openapi: "3.0.0"
info:
    version: "0.1.0"
    title: "CodeConnect"
    description: "CodeConnect API"
servers:
    - url: "https://api.codeconnect.io"
paths:
    /scenarios:
        post:
            summary: "Create a scenario request."
            operationId: "createScenario"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            properties:
                                qualifications:
                                    type: string
                                    description: "Qualifications for developers that companies want"
                                preferences:
                                    type: string
                                    description: "Preferential conditions for developers that companies want"
                            required:
                                - qualifications
                                - preferences
            responses:
                "202":
                    description: "Scenario request is accepted. You can get the scenario ID from the response."
                    content:
                        application/json:
                            schema:
                                required:
                                    - request_id
                                properties:
                                    request_id:
                                        $ref: "#/components/schemas/RequestID"
                "400":
                    description: "Required content is missing, or the wrong data type has been sent."
                    content:
                        application/json:
                            schema:
                                required:
                                    - message
                                properties:
                                    message:
                                        type: string
                                        description: "Error message"
                                        example: "`id` field is required"
                default:
                    description: "Unexpected error"
    /scenarios/{request_id}:
        get:
            summary: "Get scenarios corresponding to the request ID."
            operationId: "getScenariosByRequestID"
            parameters:
                - name: "request_id"
                  in: "path"
                  description: "ID of the scenario request"
                  required: true
                  schema:
                      $ref: "#/components/schemas/RequestID"
            responses:
                "200":
                    description: "Scenarios corresponding to the request ID have been successfully retrieved."
                    content:
                        application/json:
                            schema:
                                required:
                                    - scenarios
                                properties:
                                    scenarios:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Scenario"
                default:
                    description: "Unexpected error"
#    /scenarios/{scenario_id}:
#        get:
#            summary: "Get a scenario."
#            operationId: "getScenario"
#            parameters:
#                - name: "scenario_id"
#                  in: "path"
#                  description: "ID of the scenario"
#                  required: true
#                  schema:
#                      $ref: "#/components/schemas/ScenarioID"
#            responses:
#                "200":
#                    description: "Scenario is successfully retrieved."
#                    content:
#                        application/json:
#                            schema:
#                                $ref: "#/components/schemas/Scenario"
    /problems:
        post:
            summary: "문제 생성을 요청합니다."
            operationId: "createProblem"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            properties:
                                language:
                                    $ref: "#/components/schemas/ProblemLanguage"
                                difficulty:
                                    $ref: "#/components/schemas/ProblemDifficulty"
                            required:
                                - language
                                - difficulty
            responses:
                "202":
                    $ref: "#/components/responses/CreateProblemResponse"
                "400":
                    $ref: "#/components/responses/BadRequest"
                "429":
                    $ref: "#/components/responses/TooManyRequests"
                "500":
                    $ref: "#/components/responses/InternalServerError"
    /problems/{problem_id}:
        get:
            summary: "문제를 조회합니다."
            operationId: "getProblem"
            parameters:
                - name: "problem_id"
                  in: "path"
                  description: "문제 ID"
                  required: true
                  schema:
                      $ref: "#/components/schemas/ProblemID"
            responses:
                "200":
                    $ref: "#/components/responses/GetProblemResponse"
                "400":
                    $ref: "#/components/responses/BadRequest"
                "429":
                    $ref: "#/components/responses/TooManyRequests"
                "500":
                    $ref: "#/components/responses/InternalServerError"
components:
    schemas:
        ProblemID:
            type: string
            description: "문제의 ID 입니다."
            example: "1234567890"
        ProblemLanguage:
            type: string
            description: "문제 풀이시 사용할 언어입니다."
            enum:
                - python
                - java
                - javascript
                - c
                - cpp
                - go
            x-enum-varnames:
                - Python
                - Java
                - JavaScript
                - C
                - CPP
                - Go
        ProblemDifficulty:
            type: number
            description: "문제의 난이도입니다. 1 ~ 100 사이의 정수입니다."
            example: 50
        Problem:
            description: "문제 데이터입니다."
            type: object
            required:
                - id
                - language
                - content
            properties:
                id:
                    type: string
                    description: "문제의 ID 입니다."
                    example: "1234567890"
                language:
                    type: string
                    description: "문제 풀이시 사용할 언어입니다."
                    example: "python"
                content:
                    type: string
                    description: "문제 내용입니다. Markdown 형식으로 작성되어 있습니다."
                    example: "## 문제\n\n문제 내용입니다."
        Scenario:
            type: object
            required:
                - id
                - title
                - content
            properties:
                id:
                    $ref: "#/components/schemas/ScenarioID"
                title:
                    type: string
                    description: "Scenario title"
                    example: "Scenario title"
                content:
                    type: string
                    description: "Scenario content"
                    example: "Scenario content"
        ScenarioID:
            type: string
            description: "ID of the scenario"
            example: "1234567890"
        RequestID:
            type: string
            description: "ID of the scenario request"
            example: "1234567890"
    responses:
        BadRequest:
            description: "요청 형식이 올바르지 않습니다."
            content:
                application/json:
                    schema:
                        properties:
                            message:
                                type: string
                                description: "오류 메시지"
                                example: "`id` field is required"
        TooManyRequests:
            description: "요청이 너무 많습니다. 잠시 후 다시 시도해주세요."
        InternalServerError:
            description: "서버 내부 오류입니다."
        CreateProblemResponse:
            description: "문제 생성 요청이 성공적으로 접수되었습니다. 문제 생성 완료 후 지금 반환받은 문제 ID로 문제를 조회할 수 있습니다."
            content:
                application/json:
                    schema:
                        properties:
                            id:
                                type: string
                                description: "ID of the problem"
                                example: "1234567890"
        GetProblemResponse:
            description: "문제 조회에 성공했습니다."
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/Problem"