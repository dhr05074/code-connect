// Code generated by ent, DO NOT EDIT.

package submission

import (
	"code-connect/problem/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Submission {
	return predicate.Submission(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Submission {
	return predicate.Submission(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Submission {
	return predicate.Submission(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Submission {
	return predicate.Submission(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Submission {
	return predicate.Submission(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Submission {
	return predicate.Submission(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Submission {
	return predicate.Submission(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Submission {
	return predicate.Submission(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Submission {
	return predicate.Submission(sql.FieldLTE(FieldID, id))
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v string) predicate.Submission {
	return predicate.Submission(sql.FieldEQ(FieldUUID, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Submission {
	return predicate.Submission(sql.FieldEQ(FieldCode, v))
}

// SubmitterID applies equality check predicate on the "submitter_id" field. It's identical to SubmitterIDEQ.
func SubmitterID(v string) predicate.Submission {
	return predicate.Submission(sql.FieldEQ(FieldSubmitterID, v))
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v string) predicate.Submission {
	return predicate.Submission(sql.FieldEQ(FieldUUID, v))
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v string) predicate.Submission {
	return predicate.Submission(sql.FieldNEQ(FieldUUID, v))
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...string) predicate.Submission {
	return predicate.Submission(sql.FieldIn(FieldUUID, vs...))
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...string) predicate.Submission {
	return predicate.Submission(sql.FieldNotIn(FieldUUID, vs...))
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v string) predicate.Submission {
	return predicate.Submission(sql.FieldGT(FieldUUID, v))
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v string) predicate.Submission {
	return predicate.Submission(sql.FieldGTE(FieldUUID, v))
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v string) predicate.Submission {
	return predicate.Submission(sql.FieldLT(FieldUUID, v))
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v string) predicate.Submission {
	return predicate.Submission(sql.FieldLTE(FieldUUID, v))
}

// UUIDContains applies the Contains predicate on the "uuid" field.
func UUIDContains(v string) predicate.Submission {
	return predicate.Submission(sql.FieldContains(FieldUUID, v))
}

// UUIDHasPrefix applies the HasPrefix predicate on the "uuid" field.
func UUIDHasPrefix(v string) predicate.Submission {
	return predicate.Submission(sql.FieldHasPrefix(FieldUUID, v))
}

// UUIDHasSuffix applies the HasSuffix predicate on the "uuid" field.
func UUIDHasSuffix(v string) predicate.Submission {
	return predicate.Submission(sql.FieldHasSuffix(FieldUUID, v))
}

// UUIDEqualFold applies the EqualFold predicate on the "uuid" field.
func UUIDEqualFold(v string) predicate.Submission {
	return predicate.Submission(sql.FieldEqualFold(FieldUUID, v))
}

// UUIDContainsFold applies the ContainsFold predicate on the "uuid" field.
func UUIDContainsFold(v string) predicate.Submission {
	return predicate.Submission(sql.FieldContainsFold(FieldUUID, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Submission {
	return predicate.Submission(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Submission {
	return predicate.Submission(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Submission {
	return predicate.Submission(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Submission {
	return predicate.Submission(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Submission {
	return predicate.Submission(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Submission {
	return predicate.Submission(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Submission {
	return predicate.Submission(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Submission {
	return predicate.Submission(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Submission {
	return predicate.Submission(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Submission {
	return predicate.Submission(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Submission {
	return predicate.Submission(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Submission {
	return predicate.Submission(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Submission {
	return predicate.Submission(sql.FieldContainsFold(FieldCode, v))
}

// SubmitterIDEQ applies the EQ predicate on the "submitter_id" field.
func SubmitterIDEQ(v string) predicate.Submission {
	return predicate.Submission(sql.FieldEQ(FieldSubmitterID, v))
}

// SubmitterIDNEQ applies the NEQ predicate on the "submitter_id" field.
func SubmitterIDNEQ(v string) predicate.Submission {
	return predicate.Submission(sql.FieldNEQ(FieldSubmitterID, v))
}

// SubmitterIDIn applies the In predicate on the "submitter_id" field.
func SubmitterIDIn(vs ...string) predicate.Submission {
	return predicate.Submission(sql.FieldIn(FieldSubmitterID, vs...))
}

// SubmitterIDNotIn applies the NotIn predicate on the "submitter_id" field.
func SubmitterIDNotIn(vs ...string) predicate.Submission {
	return predicate.Submission(sql.FieldNotIn(FieldSubmitterID, vs...))
}

// SubmitterIDGT applies the GT predicate on the "submitter_id" field.
func SubmitterIDGT(v string) predicate.Submission {
	return predicate.Submission(sql.FieldGT(FieldSubmitterID, v))
}

// SubmitterIDGTE applies the GTE predicate on the "submitter_id" field.
func SubmitterIDGTE(v string) predicate.Submission {
	return predicate.Submission(sql.FieldGTE(FieldSubmitterID, v))
}

// SubmitterIDLT applies the LT predicate on the "submitter_id" field.
func SubmitterIDLT(v string) predicate.Submission {
	return predicate.Submission(sql.FieldLT(FieldSubmitterID, v))
}

// SubmitterIDLTE applies the LTE predicate on the "submitter_id" field.
func SubmitterIDLTE(v string) predicate.Submission {
	return predicate.Submission(sql.FieldLTE(FieldSubmitterID, v))
}

// SubmitterIDContains applies the Contains predicate on the "submitter_id" field.
func SubmitterIDContains(v string) predicate.Submission {
	return predicate.Submission(sql.FieldContains(FieldSubmitterID, v))
}

// SubmitterIDHasPrefix applies the HasPrefix predicate on the "submitter_id" field.
func SubmitterIDHasPrefix(v string) predicate.Submission {
	return predicate.Submission(sql.FieldHasPrefix(FieldSubmitterID, v))
}

// SubmitterIDHasSuffix applies the HasSuffix predicate on the "submitter_id" field.
func SubmitterIDHasSuffix(v string) predicate.Submission {
	return predicate.Submission(sql.FieldHasSuffix(FieldSubmitterID, v))
}

// SubmitterIDEqualFold applies the EqualFold predicate on the "submitter_id" field.
func SubmitterIDEqualFold(v string) predicate.Submission {
	return predicate.Submission(sql.FieldEqualFold(FieldSubmitterID, v))
}

// SubmitterIDContainsFold applies the ContainsFold predicate on the "submitter_id" field.
func SubmitterIDContainsFold(v string) predicate.Submission {
	return predicate.Submission(sql.FieldContainsFold(FieldSubmitterID, v))
}

// HasProblem applies the HasEdge predicate on the "problem" edge.
func HasProblem() predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProblemTable, ProblemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProblemWith applies the HasEdge predicate on the "problem" edge with a given conditions (other predicates).
func HasProblemWith(preds ...predicate.Problem) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProblemInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProblemTable, ProblemColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Submission) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Submission) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Submission) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		p(s.Not())
	})
}
