// Code generated by ent, DO NOT EDIT.

package ent

import (
	"code-connect/problem/ent/scenario"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Scenario is the model entity for the Scenario schema.
type Scenario struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// RequestID holds the value of the "request_id" field.
	RequestID string `json:"request_id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Scenario) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case scenario.FieldID:
			values[i] = new(sql.NullInt64)
		case scenario.FieldUUID, scenario.FieldTitle, scenario.FieldContent, scenario.FieldRequestID:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Scenario", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Scenario fields.
func (s *Scenario) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case scenario.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case scenario.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				s.UUID = value.String
			}
		case scenario.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				s.Title = value.String
			}
		case scenario.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				s.Content = value.String
			}
		case scenario.FieldRequestID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request_id", values[i])
			} else if value.Valid {
				s.RequestID = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Scenario.
// Note that you need to call Scenario.Unwrap() before calling this method if this Scenario
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Scenario) Update() *ScenarioUpdateOne {
	return NewScenarioClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Scenario entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Scenario) Unwrap() *Scenario {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Scenario is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Scenario) String() string {
	var builder strings.Builder
	builder.WriteString("Scenario(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("uuid=")
	builder.WriteString(s.UUID)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(s.Title)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(s.Content)
	builder.WriteString(", ")
	builder.WriteString("request_id=")
	builder.WriteString(s.RequestID)
	builder.WriteByte(')')
	return builder.String()
}

// Scenarios is a parsable slice of Scenario.
type Scenarios []*Scenario
