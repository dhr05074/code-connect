// Code generated by ent, DO NOT EDIT.

package ent

import (
	"code-connect/problem/ent/problem"
	"code-connect/problem/ent/submission"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SubmissionCreate is the builder for creating a Submission entity.
type SubmissionCreate struct {
	config
	mutation *SubmissionMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (sc *SubmissionCreate) SetUUID(s string) *SubmissionCreate {
	sc.mutation.SetUUID(s)
	return sc
}

// SetCode sets the "code" field.
func (sc *SubmissionCreate) SetCode(s string) *SubmissionCreate {
	sc.mutation.SetCode(s)
	return sc
}

// SetSubmitterID sets the "submitter_id" field.
func (sc *SubmissionCreate) SetSubmitterID(s string) *SubmissionCreate {
	sc.mutation.SetSubmitterID(s)
	return sc
}

// SetProblemID sets the "problem" edge to the Problem entity by ID.
func (sc *SubmissionCreate) SetProblemID(id int) *SubmissionCreate {
	sc.mutation.SetProblemID(id)
	return sc
}

// SetNillableProblemID sets the "problem" edge to the Problem entity by ID if the given value is not nil.
func (sc *SubmissionCreate) SetNillableProblemID(id *int) *SubmissionCreate {
	if id != nil {
		sc = sc.SetProblemID(*id)
	}
	return sc
}

// SetProblem sets the "problem" edge to the Problem entity.
func (sc *SubmissionCreate) SetProblem(p *Problem) *SubmissionCreate {
	return sc.SetProblemID(p.ID)
}

// Mutation returns the SubmissionMutation object of the builder.
func (sc *SubmissionCreate) Mutation() *SubmissionMutation {
	return sc.mutation
}

// Save creates the Submission in the database.
func (sc *SubmissionCreate) Save(ctx context.Context) (*Submission, error) {
	return withHooks[*Submission, SubmissionMutation](ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SubmissionCreate) SaveX(ctx context.Context) *Submission {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SubmissionCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SubmissionCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SubmissionCreate) check() error {
	if _, ok := sc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "Submission.uuid"`)}
	}
	if _, ok := sc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Submission.code"`)}
	}
	if _, ok := sc.mutation.SubmitterID(); !ok {
		return &ValidationError{Name: "submitter_id", err: errors.New(`ent: missing required field "Submission.submitter_id"`)}
	}
	return nil
}

func (sc *SubmissionCreate) sqlSave(ctx context.Context) (*Submission, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SubmissionCreate) createSpec() (*Submission, *sqlgraph.CreateSpec) {
	var (
		_node = &Submission{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(submission.Table, sqlgraph.NewFieldSpec(submission.FieldID, field.TypeInt))
	)
	if value, ok := sc.mutation.UUID(); ok {
		_spec.SetField(submission.FieldUUID, field.TypeString, value)
		_node.UUID = value
	}
	if value, ok := sc.mutation.Code(); ok {
		_spec.SetField(submission.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := sc.mutation.SubmitterID(); ok {
		_spec.SetField(submission.FieldSubmitterID, field.TypeString, value)
		_node.SubmitterID = value
	}
	if nodes := sc.mutation.ProblemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submission.ProblemTable,
			Columns: []string{submission.ProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.problem_submissions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SubmissionCreateBulk is the builder for creating many Submission entities in bulk.
type SubmissionCreateBulk struct {
	config
	builders []*SubmissionCreate
}

// Save creates the Submission entities in the database.
func (scb *SubmissionCreateBulk) Save(ctx context.Context) ([]*Submission, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Submission, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubmissionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SubmissionCreateBulk) SaveX(ctx context.Context) []*Submission {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SubmissionCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SubmissionCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
