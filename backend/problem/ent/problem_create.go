// Code generated by ent, DO NOT EDIT.

package ent

import (
	"code-connect/problem/ent/problem"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProblemCreate is the builder for creating a Problem entity.
type ProblemCreate struct {
	config
	mutation *ProblemMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (pc *ProblemCreate) SetUUID(s string) *ProblemCreate {
	pc.mutation.SetUUID(s)
	return pc
}

// SetTitle sets the "title" field.
func (pc *ProblemCreate) SetTitle(s string) *ProblemCreate {
	pc.mutation.SetTitle(s)
	return pc
}

// SetBackground sets the "background" field.
func (pc *ProblemCreate) SetBackground(s string) *ProblemCreate {
	pc.mutation.SetBackground(s)
	return pc
}

// SetCode sets the "code" field.
func (pc *ProblemCreate) SetCode(s string) *ProblemCreate {
	pc.mutation.SetCode(s)
	return pc
}

// SetTestCode sets the "test_code" field.
func (pc *ProblemCreate) SetTestCode(s string) *ProblemCreate {
	pc.mutation.SetTestCode(s)
	return pc
}

// SetNillableTestCode sets the "test_code" field if the given value is not nil.
func (pc *ProblemCreate) SetNillableTestCode(s *string) *ProblemCreate {
	if s != nil {
		pc.SetTestCode(*s)
	}
	return pc
}

// SetEstimatedTime sets the "estimated_time" field.
func (pc *ProblemCreate) SetEstimatedTime(i int) *ProblemCreate {
	pc.mutation.SetEstimatedTime(i)
	return pc
}

// SetNillableEstimatedTime sets the "estimated_time" field if the given value is not nil.
func (pc *ProblemCreate) SetNillableEstimatedTime(i *int) *ProblemCreate {
	if i != nil {
		pc.SetEstimatedTime(*i)
	}
	return pc
}

// SetLanguage sets the "language" field.
func (pc *ProblemCreate) SetLanguage(s string) *ProblemCreate {
	pc.mutation.SetLanguage(s)
	return pc
}

// SetRequestID sets the "request_id" field.
func (pc *ProblemCreate) SetRequestID(s string) *ProblemCreate {
	pc.mutation.SetRequestID(s)
	return pc
}

// Mutation returns the ProblemMutation object of the builder.
func (pc *ProblemCreate) Mutation() *ProblemMutation {
	return pc.mutation
}

// Save creates the Problem in the database.
func (pc *ProblemCreate) Save(ctx context.Context) (*Problem, error) {
	pc.defaults()
	return withHooks[*Problem, ProblemMutation](ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProblemCreate) SaveX(ctx context.Context) *Problem {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProblemCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProblemCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProblemCreate) defaults() {
	if _, ok := pc.mutation.EstimatedTime(); !ok {
		v := problem.DefaultEstimatedTime
		pc.mutation.SetEstimatedTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProblemCreate) check() error {
	if _, ok := pc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "Problem.uuid"`)}
	}
	if _, ok := pc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Problem.title"`)}
	}
	if _, ok := pc.mutation.Background(); !ok {
		return &ValidationError{Name: "background", err: errors.New(`ent: missing required field "Problem.background"`)}
	}
	if _, ok := pc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Problem.code"`)}
	}
	if _, ok := pc.mutation.EstimatedTime(); !ok {
		return &ValidationError{Name: "estimated_time", err: errors.New(`ent: missing required field "Problem.estimated_time"`)}
	}
	if _, ok := pc.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required field "Problem.language"`)}
	}
	if _, ok := pc.mutation.RequestID(); !ok {
		return &ValidationError{Name: "request_id", err: errors.New(`ent: missing required field "Problem.request_id"`)}
	}
	return nil
}

func (pc *ProblemCreate) sqlSave(ctx context.Context) (*Problem, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProblemCreate) createSpec() (*Problem, *sqlgraph.CreateSpec) {
	var (
		_node = &Problem{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(problem.Table, sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt))
	)
	if value, ok := pc.mutation.UUID(); ok {
		_spec.SetField(problem.FieldUUID, field.TypeString, value)
		_node.UUID = value
	}
	if value, ok := pc.mutation.Title(); ok {
		_spec.SetField(problem.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := pc.mutation.Background(); ok {
		_spec.SetField(problem.FieldBackground, field.TypeString, value)
		_node.Background = value
	}
	if value, ok := pc.mutation.Code(); ok {
		_spec.SetField(problem.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := pc.mutation.TestCode(); ok {
		_spec.SetField(problem.FieldTestCode, field.TypeString, value)
		_node.TestCode = value
	}
	if value, ok := pc.mutation.EstimatedTime(); ok {
		_spec.SetField(problem.FieldEstimatedTime, field.TypeInt, value)
		_node.EstimatedTime = value
	}
	if value, ok := pc.mutation.Language(); ok {
		_spec.SetField(problem.FieldLanguage, field.TypeString, value)
		_node.Language = value
	}
	if value, ok := pc.mutation.RequestID(); ok {
		_spec.SetField(problem.FieldRequestID, field.TypeString, value)
		_node.RequestID = value
	}
	return _node, _spec
}

// ProblemCreateBulk is the builder for creating many Problem entities in bulk.
type ProblemCreateBulk struct {
	config
	builders []*ProblemCreate
}

// Save creates the Problem entities in the database.
func (pcb *ProblemCreateBulk) Save(ctx context.Context) ([]*Problem, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Problem, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProblemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProblemCreateBulk) SaveX(ctx context.Context) []*Problem {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProblemCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProblemCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
