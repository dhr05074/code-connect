// Code generated by ent, DO NOT EDIT.

package problem

import (
	"code-connect/problem/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Problem {
	return predicate.Problem(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Problem {
	return predicate.Problem(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Problem {
	return predicate.Problem(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Problem {
	return predicate.Problem(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Problem {
	return predicate.Problem(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Problem {
	return predicate.Problem(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Problem {
	return predicate.Problem(sql.FieldLTE(FieldID, id))
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldUUID, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldTitle, v))
}

// Background applies equality check predicate on the "background" field. It's identical to BackgroundEQ.
func Background(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldBackground, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldCode, v))
}

// TestCode applies equality check predicate on the "test_code" field. It's identical to TestCodeEQ.
func TestCode(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldTestCode, v))
}

// EstimatedTime applies equality check predicate on the "estimated_time" field. It's identical to EstimatedTimeEQ.
func EstimatedTime(v int) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldEstimatedTime, v))
}

// Language applies equality check predicate on the "language" field. It's identical to LanguageEQ.
func Language(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldLanguage, v))
}

// RequestID applies equality check predicate on the "request_id" field. It's identical to RequestIDEQ.
func RequestID(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldRequestID, v))
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldUUID, v))
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v string) predicate.Problem {
	return predicate.Problem(sql.FieldNEQ(FieldUUID, v))
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...string) predicate.Problem {
	return predicate.Problem(sql.FieldIn(FieldUUID, vs...))
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...string) predicate.Problem {
	return predicate.Problem(sql.FieldNotIn(FieldUUID, vs...))
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v string) predicate.Problem {
	return predicate.Problem(sql.FieldGT(FieldUUID, v))
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v string) predicate.Problem {
	return predicate.Problem(sql.FieldGTE(FieldUUID, v))
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v string) predicate.Problem {
	return predicate.Problem(sql.FieldLT(FieldUUID, v))
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v string) predicate.Problem {
	return predicate.Problem(sql.FieldLTE(FieldUUID, v))
}

// UUIDContains applies the Contains predicate on the "uuid" field.
func UUIDContains(v string) predicate.Problem {
	return predicate.Problem(sql.FieldContains(FieldUUID, v))
}

// UUIDHasPrefix applies the HasPrefix predicate on the "uuid" field.
func UUIDHasPrefix(v string) predicate.Problem {
	return predicate.Problem(sql.FieldHasPrefix(FieldUUID, v))
}

// UUIDHasSuffix applies the HasSuffix predicate on the "uuid" field.
func UUIDHasSuffix(v string) predicate.Problem {
	return predicate.Problem(sql.FieldHasSuffix(FieldUUID, v))
}

// UUIDEqualFold applies the EqualFold predicate on the "uuid" field.
func UUIDEqualFold(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEqualFold(FieldUUID, v))
}

// UUIDContainsFold applies the ContainsFold predicate on the "uuid" field.
func UUIDContainsFold(v string) predicate.Problem {
	return predicate.Problem(sql.FieldContainsFold(FieldUUID, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Problem {
	return predicate.Problem(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Problem {
	return predicate.Problem(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Problem {
	return predicate.Problem(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Problem {
	return predicate.Problem(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Problem {
	return predicate.Problem(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Problem {
	return predicate.Problem(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Problem {
	return predicate.Problem(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Problem {
	return predicate.Problem(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Problem {
	return predicate.Problem(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Problem {
	return predicate.Problem(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Problem {
	return predicate.Problem(sql.FieldContainsFold(FieldTitle, v))
}

// BackgroundEQ applies the EQ predicate on the "background" field.
func BackgroundEQ(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldBackground, v))
}

// BackgroundNEQ applies the NEQ predicate on the "background" field.
func BackgroundNEQ(v string) predicate.Problem {
	return predicate.Problem(sql.FieldNEQ(FieldBackground, v))
}

// BackgroundIn applies the In predicate on the "background" field.
func BackgroundIn(vs ...string) predicate.Problem {
	return predicate.Problem(sql.FieldIn(FieldBackground, vs...))
}

// BackgroundNotIn applies the NotIn predicate on the "background" field.
func BackgroundNotIn(vs ...string) predicate.Problem {
	return predicate.Problem(sql.FieldNotIn(FieldBackground, vs...))
}

// BackgroundGT applies the GT predicate on the "background" field.
func BackgroundGT(v string) predicate.Problem {
	return predicate.Problem(sql.FieldGT(FieldBackground, v))
}

// BackgroundGTE applies the GTE predicate on the "background" field.
func BackgroundGTE(v string) predicate.Problem {
	return predicate.Problem(sql.FieldGTE(FieldBackground, v))
}

// BackgroundLT applies the LT predicate on the "background" field.
func BackgroundLT(v string) predicate.Problem {
	return predicate.Problem(sql.FieldLT(FieldBackground, v))
}

// BackgroundLTE applies the LTE predicate on the "background" field.
func BackgroundLTE(v string) predicate.Problem {
	return predicate.Problem(sql.FieldLTE(FieldBackground, v))
}

// BackgroundContains applies the Contains predicate on the "background" field.
func BackgroundContains(v string) predicate.Problem {
	return predicate.Problem(sql.FieldContains(FieldBackground, v))
}

// BackgroundHasPrefix applies the HasPrefix predicate on the "background" field.
func BackgroundHasPrefix(v string) predicate.Problem {
	return predicate.Problem(sql.FieldHasPrefix(FieldBackground, v))
}

// BackgroundHasSuffix applies the HasSuffix predicate on the "background" field.
func BackgroundHasSuffix(v string) predicate.Problem {
	return predicate.Problem(sql.FieldHasSuffix(FieldBackground, v))
}

// BackgroundEqualFold applies the EqualFold predicate on the "background" field.
func BackgroundEqualFold(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEqualFold(FieldBackground, v))
}

// BackgroundContainsFold applies the ContainsFold predicate on the "background" field.
func BackgroundContainsFold(v string) predicate.Problem {
	return predicate.Problem(sql.FieldContainsFold(FieldBackground, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Problem {
	return predicate.Problem(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Problem {
	return predicate.Problem(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Problem {
	return predicate.Problem(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Problem {
	return predicate.Problem(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Problem {
	return predicate.Problem(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Problem {
	return predicate.Problem(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Problem {
	return predicate.Problem(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Problem {
	return predicate.Problem(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Problem {
	return predicate.Problem(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Problem {
	return predicate.Problem(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Problem {
	return predicate.Problem(sql.FieldContainsFold(FieldCode, v))
}

// TestCodeEQ applies the EQ predicate on the "test_code" field.
func TestCodeEQ(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldTestCode, v))
}

// TestCodeNEQ applies the NEQ predicate on the "test_code" field.
func TestCodeNEQ(v string) predicate.Problem {
	return predicate.Problem(sql.FieldNEQ(FieldTestCode, v))
}

// TestCodeIn applies the In predicate on the "test_code" field.
func TestCodeIn(vs ...string) predicate.Problem {
	return predicate.Problem(sql.FieldIn(FieldTestCode, vs...))
}

// TestCodeNotIn applies the NotIn predicate on the "test_code" field.
func TestCodeNotIn(vs ...string) predicate.Problem {
	return predicate.Problem(sql.FieldNotIn(FieldTestCode, vs...))
}

// TestCodeGT applies the GT predicate on the "test_code" field.
func TestCodeGT(v string) predicate.Problem {
	return predicate.Problem(sql.FieldGT(FieldTestCode, v))
}

// TestCodeGTE applies the GTE predicate on the "test_code" field.
func TestCodeGTE(v string) predicate.Problem {
	return predicate.Problem(sql.FieldGTE(FieldTestCode, v))
}

// TestCodeLT applies the LT predicate on the "test_code" field.
func TestCodeLT(v string) predicate.Problem {
	return predicate.Problem(sql.FieldLT(FieldTestCode, v))
}

// TestCodeLTE applies the LTE predicate on the "test_code" field.
func TestCodeLTE(v string) predicate.Problem {
	return predicate.Problem(sql.FieldLTE(FieldTestCode, v))
}

// TestCodeContains applies the Contains predicate on the "test_code" field.
func TestCodeContains(v string) predicate.Problem {
	return predicate.Problem(sql.FieldContains(FieldTestCode, v))
}

// TestCodeHasPrefix applies the HasPrefix predicate on the "test_code" field.
func TestCodeHasPrefix(v string) predicate.Problem {
	return predicate.Problem(sql.FieldHasPrefix(FieldTestCode, v))
}

// TestCodeHasSuffix applies the HasSuffix predicate on the "test_code" field.
func TestCodeHasSuffix(v string) predicate.Problem {
	return predicate.Problem(sql.FieldHasSuffix(FieldTestCode, v))
}

// TestCodeIsNil applies the IsNil predicate on the "test_code" field.
func TestCodeIsNil() predicate.Problem {
	return predicate.Problem(sql.FieldIsNull(FieldTestCode))
}

// TestCodeNotNil applies the NotNil predicate on the "test_code" field.
func TestCodeNotNil() predicate.Problem {
	return predicate.Problem(sql.FieldNotNull(FieldTestCode))
}

// TestCodeEqualFold applies the EqualFold predicate on the "test_code" field.
func TestCodeEqualFold(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEqualFold(FieldTestCode, v))
}

// TestCodeContainsFold applies the ContainsFold predicate on the "test_code" field.
func TestCodeContainsFold(v string) predicate.Problem {
	return predicate.Problem(sql.FieldContainsFold(FieldTestCode, v))
}

// EstimatedTimeEQ applies the EQ predicate on the "estimated_time" field.
func EstimatedTimeEQ(v int) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldEstimatedTime, v))
}

// EstimatedTimeNEQ applies the NEQ predicate on the "estimated_time" field.
func EstimatedTimeNEQ(v int) predicate.Problem {
	return predicate.Problem(sql.FieldNEQ(FieldEstimatedTime, v))
}

// EstimatedTimeIn applies the In predicate on the "estimated_time" field.
func EstimatedTimeIn(vs ...int) predicate.Problem {
	return predicate.Problem(sql.FieldIn(FieldEstimatedTime, vs...))
}

// EstimatedTimeNotIn applies the NotIn predicate on the "estimated_time" field.
func EstimatedTimeNotIn(vs ...int) predicate.Problem {
	return predicate.Problem(sql.FieldNotIn(FieldEstimatedTime, vs...))
}

// EstimatedTimeGT applies the GT predicate on the "estimated_time" field.
func EstimatedTimeGT(v int) predicate.Problem {
	return predicate.Problem(sql.FieldGT(FieldEstimatedTime, v))
}

// EstimatedTimeGTE applies the GTE predicate on the "estimated_time" field.
func EstimatedTimeGTE(v int) predicate.Problem {
	return predicate.Problem(sql.FieldGTE(FieldEstimatedTime, v))
}

// EstimatedTimeLT applies the LT predicate on the "estimated_time" field.
func EstimatedTimeLT(v int) predicate.Problem {
	return predicate.Problem(sql.FieldLT(FieldEstimatedTime, v))
}

// EstimatedTimeLTE applies the LTE predicate on the "estimated_time" field.
func EstimatedTimeLTE(v int) predicate.Problem {
	return predicate.Problem(sql.FieldLTE(FieldEstimatedTime, v))
}

// LanguageEQ applies the EQ predicate on the "language" field.
func LanguageEQ(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldLanguage, v))
}

// LanguageNEQ applies the NEQ predicate on the "language" field.
func LanguageNEQ(v string) predicate.Problem {
	return predicate.Problem(sql.FieldNEQ(FieldLanguage, v))
}

// LanguageIn applies the In predicate on the "language" field.
func LanguageIn(vs ...string) predicate.Problem {
	return predicate.Problem(sql.FieldIn(FieldLanguage, vs...))
}

// LanguageNotIn applies the NotIn predicate on the "language" field.
func LanguageNotIn(vs ...string) predicate.Problem {
	return predicate.Problem(sql.FieldNotIn(FieldLanguage, vs...))
}

// LanguageGT applies the GT predicate on the "language" field.
func LanguageGT(v string) predicate.Problem {
	return predicate.Problem(sql.FieldGT(FieldLanguage, v))
}

// LanguageGTE applies the GTE predicate on the "language" field.
func LanguageGTE(v string) predicate.Problem {
	return predicate.Problem(sql.FieldGTE(FieldLanguage, v))
}

// LanguageLT applies the LT predicate on the "language" field.
func LanguageLT(v string) predicate.Problem {
	return predicate.Problem(sql.FieldLT(FieldLanguage, v))
}

// LanguageLTE applies the LTE predicate on the "language" field.
func LanguageLTE(v string) predicate.Problem {
	return predicate.Problem(sql.FieldLTE(FieldLanguage, v))
}

// LanguageContains applies the Contains predicate on the "language" field.
func LanguageContains(v string) predicate.Problem {
	return predicate.Problem(sql.FieldContains(FieldLanguage, v))
}

// LanguageHasPrefix applies the HasPrefix predicate on the "language" field.
func LanguageHasPrefix(v string) predicate.Problem {
	return predicate.Problem(sql.FieldHasPrefix(FieldLanguage, v))
}

// LanguageHasSuffix applies the HasSuffix predicate on the "language" field.
func LanguageHasSuffix(v string) predicate.Problem {
	return predicate.Problem(sql.FieldHasSuffix(FieldLanguage, v))
}

// LanguageEqualFold applies the EqualFold predicate on the "language" field.
func LanguageEqualFold(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEqualFold(FieldLanguage, v))
}

// LanguageContainsFold applies the ContainsFold predicate on the "language" field.
func LanguageContainsFold(v string) predicate.Problem {
	return predicate.Problem(sql.FieldContainsFold(FieldLanguage, v))
}

// RequestIDEQ applies the EQ predicate on the "request_id" field.
func RequestIDEQ(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldRequestID, v))
}

// RequestIDNEQ applies the NEQ predicate on the "request_id" field.
func RequestIDNEQ(v string) predicate.Problem {
	return predicate.Problem(sql.FieldNEQ(FieldRequestID, v))
}

// RequestIDIn applies the In predicate on the "request_id" field.
func RequestIDIn(vs ...string) predicate.Problem {
	return predicate.Problem(sql.FieldIn(FieldRequestID, vs...))
}

// RequestIDNotIn applies the NotIn predicate on the "request_id" field.
func RequestIDNotIn(vs ...string) predicate.Problem {
	return predicate.Problem(sql.FieldNotIn(FieldRequestID, vs...))
}

// RequestIDGT applies the GT predicate on the "request_id" field.
func RequestIDGT(v string) predicate.Problem {
	return predicate.Problem(sql.FieldGT(FieldRequestID, v))
}

// RequestIDGTE applies the GTE predicate on the "request_id" field.
func RequestIDGTE(v string) predicate.Problem {
	return predicate.Problem(sql.FieldGTE(FieldRequestID, v))
}

// RequestIDLT applies the LT predicate on the "request_id" field.
func RequestIDLT(v string) predicate.Problem {
	return predicate.Problem(sql.FieldLT(FieldRequestID, v))
}

// RequestIDLTE applies the LTE predicate on the "request_id" field.
func RequestIDLTE(v string) predicate.Problem {
	return predicate.Problem(sql.FieldLTE(FieldRequestID, v))
}

// RequestIDContains applies the Contains predicate on the "request_id" field.
func RequestIDContains(v string) predicate.Problem {
	return predicate.Problem(sql.FieldContains(FieldRequestID, v))
}

// RequestIDHasPrefix applies the HasPrefix predicate on the "request_id" field.
func RequestIDHasPrefix(v string) predicate.Problem {
	return predicate.Problem(sql.FieldHasPrefix(FieldRequestID, v))
}

// RequestIDHasSuffix applies the HasSuffix predicate on the "request_id" field.
func RequestIDHasSuffix(v string) predicate.Problem {
	return predicate.Problem(sql.FieldHasSuffix(FieldRequestID, v))
}

// RequestIDEqualFold applies the EqualFold predicate on the "request_id" field.
func RequestIDEqualFold(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEqualFold(FieldRequestID, v))
}

// RequestIDContainsFold applies the ContainsFold predicate on the "request_id" field.
func RequestIDContainsFold(v string) predicate.Problem {
	return predicate.Problem(sql.FieldContainsFold(FieldRequestID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Problem) predicate.Problem {
	return predicate.Problem(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Problem) predicate.Problem {
	return predicate.Problem(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Problem) predicate.Problem {
	return predicate.Problem(func(s *sql.Selector) {
		p(s.Not())
	})
}
