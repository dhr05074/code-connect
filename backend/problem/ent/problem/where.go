// Code generated by ent, DO NOT EDIT.

package problem

import (
	"code-connect/problem/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Problem {
	return predicate.Problem(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Problem {
	return predicate.Problem(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Problem {
	return predicate.Problem(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Problem {
	return predicate.Problem(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Problem {
	return predicate.Problem(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Problem {
	return predicate.Problem(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Problem {
	return predicate.Problem(sql.FieldLTE(FieldID, id))
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldUUID, v))
}

// Difficulty applies equality check predicate on the "difficulty" field. It's identical to DifficultyEQ.
func Difficulty(v int) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldDifficulty, v))
}

// Language applies equality check predicate on the "language" field. It's identical to LanguageEQ.
func Language(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldLanguage, v))
}

// Statement applies equality check predicate on the "statement" field. It's identical to StatementEQ.
func Statement(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldStatement, v))
}

// Examples applies equality check predicate on the "examples" field. It's identical to ExamplesEQ.
func Examples(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldExamples, v))
}

// Constraints applies equality check predicate on the "constraints" field. It's identical to ConstraintsEQ.
func Constraints(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldConstraints, v))
}

// EvaluationCriteria applies equality check predicate on the "evaluation_criteria" field. It's identical to EvaluationCriteriaEQ.
func EvaluationCriteria(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldEvaluationCriteria, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldCreatedAt, v))
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldUUID, v))
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v string) predicate.Problem {
	return predicate.Problem(sql.FieldNEQ(FieldUUID, v))
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...string) predicate.Problem {
	return predicate.Problem(sql.FieldIn(FieldUUID, vs...))
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...string) predicate.Problem {
	return predicate.Problem(sql.FieldNotIn(FieldUUID, vs...))
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v string) predicate.Problem {
	return predicate.Problem(sql.FieldGT(FieldUUID, v))
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v string) predicate.Problem {
	return predicate.Problem(sql.FieldGTE(FieldUUID, v))
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v string) predicate.Problem {
	return predicate.Problem(sql.FieldLT(FieldUUID, v))
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v string) predicate.Problem {
	return predicate.Problem(sql.FieldLTE(FieldUUID, v))
}

// UUIDContains applies the Contains predicate on the "uuid" field.
func UUIDContains(v string) predicate.Problem {
	return predicate.Problem(sql.FieldContains(FieldUUID, v))
}

// UUIDHasPrefix applies the HasPrefix predicate on the "uuid" field.
func UUIDHasPrefix(v string) predicate.Problem {
	return predicate.Problem(sql.FieldHasPrefix(FieldUUID, v))
}

// UUIDHasSuffix applies the HasSuffix predicate on the "uuid" field.
func UUIDHasSuffix(v string) predicate.Problem {
	return predicate.Problem(sql.FieldHasSuffix(FieldUUID, v))
}

// UUIDEqualFold applies the EqualFold predicate on the "uuid" field.
func UUIDEqualFold(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEqualFold(FieldUUID, v))
}

// UUIDContainsFold applies the ContainsFold predicate on the "uuid" field.
func UUIDContainsFold(v string) predicate.Problem {
	return predicate.Problem(sql.FieldContainsFold(FieldUUID, v))
}

// DifficultyEQ applies the EQ predicate on the "difficulty" field.
func DifficultyEQ(v int) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldDifficulty, v))
}

// DifficultyNEQ applies the NEQ predicate on the "difficulty" field.
func DifficultyNEQ(v int) predicate.Problem {
	return predicate.Problem(sql.FieldNEQ(FieldDifficulty, v))
}

// DifficultyIn applies the In predicate on the "difficulty" field.
func DifficultyIn(vs ...int) predicate.Problem {
	return predicate.Problem(sql.FieldIn(FieldDifficulty, vs...))
}

// DifficultyNotIn applies the NotIn predicate on the "difficulty" field.
func DifficultyNotIn(vs ...int) predicate.Problem {
	return predicate.Problem(sql.FieldNotIn(FieldDifficulty, vs...))
}

// DifficultyGT applies the GT predicate on the "difficulty" field.
func DifficultyGT(v int) predicate.Problem {
	return predicate.Problem(sql.FieldGT(FieldDifficulty, v))
}

// DifficultyGTE applies the GTE predicate on the "difficulty" field.
func DifficultyGTE(v int) predicate.Problem {
	return predicate.Problem(sql.FieldGTE(FieldDifficulty, v))
}

// DifficultyLT applies the LT predicate on the "difficulty" field.
func DifficultyLT(v int) predicate.Problem {
	return predicate.Problem(sql.FieldLT(FieldDifficulty, v))
}

// DifficultyLTE applies the LTE predicate on the "difficulty" field.
func DifficultyLTE(v int) predicate.Problem {
	return predicate.Problem(sql.FieldLTE(FieldDifficulty, v))
}

// LanguageEQ applies the EQ predicate on the "language" field.
func LanguageEQ(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldLanguage, v))
}

// LanguageNEQ applies the NEQ predicate on the "language" field.
func LanguageNEQ(v string) predicate.Problem {
	return predicate.Problem(sql.FieldNEQ(FieldLanguage, v))
}

// LanguageIn applies the In predicate on the "language" field.
func LanguageIn(vs ...string) predicate.Problem {
	return predicate.Problem(sql.FieldIn(FieldLanguage, vs...))
}

// LanguageNotIn applies the NotIn predicate on the "language" field.
func LanguageNotIn(vs ...string) predicate.Problem {
	return predicate.Problem(sql.FieldNotIn(FieldLanguage, vs...))
}

// LanguageGT applies the GT predicate on the "language" field.
func LanguageGT(v string) predicate.Problem {
	return predicate.Problem(sql.FieldGT(FieldLanguage, v))
}

// LanguageGTE applies the GTE predicate on the "language" field.
func LanguageGTE(v string) predicate.Problem {
	return predicate.Problem(sql.FieldGTE(FieldLanguage, v))
}

// LanguageLT applies the LT predicate on the "language" field.
func LanguageLT(v string) predicate.Problem {
	return predicate.Problem(sql.FieldLT(FieldLanguage, v))
}

// LanguageLTE applies the LTE predicate on the "language" field.
func LanguageLTE(v string) predicate.Problem {
	return predicate.Problem(sql.FieldLTE(FieldLanguage, v))
}

// LanguageContains applies the Contains predicate on the "language" field.
func LanguageContains(v string) predicate.Problem {
	return predicate.Problem(sql.FieldContains(FieldLanguage, v))
}

// LanguageHasPrefix applies the HasPrefix predicate on the "language" field.
func LanguageHasPrefix(v string) predicate.Problem {
	return predicate.Problem(sql.FieldHasPrefix(FieldLanguage, v))
}

// LanguageHasSuffix applies the HasSuffix predicate on the "language" field.
func LanguageHasSuffix(v string) predicate.Problem {
	return predicate.Problem(sql.FieldHasSuffix(FieldLanguage, v))
}

// LanguageEqualFold applies the EqualFold predicate on the "language" field.
func LanguageEqualFold(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEqualFold(FieldLanguage, v))
}

// LanguageContainsFold applies the ContainsFold predicate on the "language" field.
func LanguageContainsFold(v string) predicate.Problem {
	return predicate.Problem(sql.FieldContainsFold(FieldLanguage, v))
}

// StatementEQ applies the EQ predicate on the "statement" field.
func StatementEQ(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldStatement, v))
}

// StatementNEQ applies the NEQ predicate on the "statement" field.
func StatementNEQ(v string) predicate.Problem {
	return predicate.Problem(sql.FieldNEQ(FieldStatement, v))
}

// StatementIn applies the In predicate on the "statement" field.
func StatementIn(vs ...string) predicate.Problem {
	return predicate.Problem(sql.FieldIn(FieldStatement, vs...))
}

// StatementNotIn applies the NotIn predicate on the "statement" field.
func StatementNotIn(vs ...string) predicate.Problem {
	return predicate.Problem(sql.FieldNotIn(FieldStatement, vs...))
}

// StatementGT applies the GT predicate on the "statement" field.
func StatementGT(v string) predicate.Problem {
	return predicate.Problem(sql.FieldGT(FieldStatement, v))
}

// StatementGTE applies the GTE predicate on the "statement" field.
func StatementGTE(v string) predicate.Problem {
	return predicate.Problem(sql.FieldGTE(FieldStatement, v))
}

// StatementLT applies the LT predicate on the "statement" field.
func StatementLT(v string) predicate.Problem {
	return predicate.Problem(sql.FieldLT(FieldStatement, v))
}

// StatementLTE applies the LTE predicate on the "statement" field.
func StatementLTE(v string) predicate.Problem {
	return predicate.Problem(sql.FieldLTE(FieldStatement, v))
}

// StatementContains applies the Contains predicate on the "statement" field.
func StatementContains(v string) predicate.Problem {
	return predicate.Problem(sql.FieldContains(FieldStatement, v))
}

// StatementHasPrefix applies the HasPrefix predicate on the "statement" field.
func StatementHasPrefix(v string) predicate.Problem {
	return predicate.Problem(sql.FieldHasPrefix(FieldStatement, v))
}

// StatementHasSuffix applies the HasSuffix predicate on the "statement" field.
func StatementHasSuffix(v string) predicate.Problem {
	return predicate.Problem(sql.FieldHasSuffix(FieldStatement, v))
}

// StatementIsNil applies the IsNil predicate on the "statement" field.
func StatementIsNil() predicate.Problem {
	return predicate.Problem(sql.FieldIsNull(FieldStatement))
}

// StatementNotNil applies the NotNil predicate on the "statement" field.
func StatementNotNil() predicate.Problem {
	return predicate.Problem(sql.FieldNotNull(FieldStatement))
}

// StatementEqualFold applies the EqualFold predicate on the "statement" field.
func StatementEqualFold(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEqualFold(FieldStatement, v))
}

// StatementContainsFold applies the ContainsFold predicate on the "statement" field.
func StatementContainsFold(v string) predicate.Problem {
	return predicate.Problem(sql.FieldContainsFold(FieldStatement, v))
}

// ExamplesEQ applies the EQ predicate on the "examples" field.
func ExamplesEQ(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldExamples, v))
}

// ExamplesNEQ applies the NEQ predicate on the "examples" field.
func ExamplesNEQ(v string) predicate.Problem {
	return predicate.Problem(sql.FieldNEQ(FieldExamples, v))
}

// ExamplesIn applies the In predicate on the "examples" field.
func ExamplesIn(vs ...string) predicate.Problem {
	return predicate.Problem(sql.FieldIn(FieldExamples, vs...))
}

// ExamplesNotIn applies the NotIn predicate on the "examples" field.
func ExamplesNotIn(vs ...string) predicate.Problem {
	return predicate.Problem(sql.FieldNotIn(FieldExamples, vs...))
}

// ExamplesGT applies the GT predicate on the "examples" field.
func ExamplesGT(v string) predicate.Problem {
	return predicate.Problem(sql.FieldGT(FieldExamples, v))
}

// ExamplesGTE applies the GTE predicate on the "examples" field.
func ExamplesGTE(v string) predicate.Problem {
	return predicate.Problem(sql.FieldGTE(FieldExamples, v))
}

// ExamplesLT applies the LT predicate on the "examples" field.
func ExamplesLT(v string) predicate.Problem {
	return predicate.Problem(sql.FieldLT(FieldExamples, v))
}

// ExamplesLTE applies the LTE predicate on the "examples" field.
func ExamplesLTE(v string) predicate.Problem {
	return predicate.Problem(sql.FieldLTE(FieldExamples, v))
}

// ExamplesContains applies the Contains predicate on the "examples" field.
func ExamplesContains(v string) predicate.Problem {
	return predicate.Problem(sql.FieldContains(FieldExamples, v))
}

// ExamplesHasPrefix applies the HasPrefix predicate on the "examples" field.
func ExamplesHasPrefix(v string) predicate.Problem {
	return predicate.Problem(sql.FieldHasPrefix(FieldExamples, v))
}

// ExamplesHasSuffix applies the HasSuffix predicate on the "examples" field.
func ExamplesHasSuffix(v string) predicate.Problem {
	return predicate.Problem(sql.FieldHasSuffix(FieldExamples, v))
}

// ExamplesIsNil applies the IsNil predicate on the "examples" field.
func ExamplesIsNil() predicate.Problem {
	return predicate.Problem(sql.FieldIsNull(FieldExamples))
}

// ExamplesNotNil applies the NotNil predicate on the "examples" field.
func ExamplesNotNil() predicate.Problem {
	return predicate.Problem(sql.FieldNotNull(FieldExamples))
}

// ExamplesEqualFold applies the EqualFold predicate on the "examples" field.
func ExamplesEqualFold(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEqualFold(FieldExamples, v))
}

// ExamplesContainsFold applies the ContainsFold predicate on the "examples" field.
func ExamplesContainsFold(v string) predicate.Problem {
	return predicate.Problem(sql.FieldContainsFold(FieldExamples, v))
}

// ConstraintsEQ applies the EQ predicate on the "constraints" field.
func ConstraintsEQ(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldConstraints, v))
}

// ConstraintsNEQ applies the NEQ predicate on the "constraints" field.
func ConstraintsNEQ(v string) predicate.Problem {
	return predicate.Problem(sql.FieldNEQ(FieldConstraints, v))
}

// ConstraintsIn applies the In predicate on the "constraints" field.
func ConstraintsIn(vs ...string) predicate.Problem {
	return predicate.Problem(sql.FieldIn(FieldConstraints, vs...))
}

// ConstraintsNotIn applies the NotIn predicate on the "constraints" field.
func ConstraintsNotIn(vs ...string) predicate.Problem {
	return predicate.Problem(sql.FieldNotIn(FieldConstraints, vs...))
}

// ConstraintsGT applies the GT predicate on the "constraints" field.
func ConstraintsGT(v string) predicate.Problem {
	return predicate.Problem(sql.FieldGT(FieldConstraints, v))
}

// ConstraintsGTE applies the GTE predicate on the "constraints" field.
func ConstraintsGTE(v string) predicate.Problem {
	return predicate.Problem(sql.FieldGTE(FieldConstraints, v))
}

// ConstraintsLT applies the LT predicate on the "constraints" field.
func ConstraintsLT(v string) predicate.Problem {
	return predicate.Problem(sql.FieldLT(FieldConstraints, v))
}

// ConstraintsLTE applies the LTE predicate on the "constraints" field.
func ConstraintsLTE(v string) predicate.Problem {
	return predicate.Problem(sql.FieldLTE(FieldConstraints, v))
}

// ConstraintsContains applies the Contains predicate on the "constraints" field.
func ConstraintsContains(v string) predicate.Problem {
	return predicate.Problem(sql.FieldContains(FieldConstraints, v))
}

// ConstraintsHasPrefix applies the HasPrefix predicate on the "constraints" field.
func ConstraintsHasPrefix(v string) predicate.Problem {
	return predicate.Problem(sql.FieldHasPrefix(FieldConstraints, v))
}

// ConstraintsHasSuffix applies the HasSuffix predicate on the "constraints" field.
func ConstraintsHasSuffix(v string) predicate.Problem {
	return predicate.Problem(sql.FieldHasSuffix(FieldConstraints, v))
}

// ConstraintsIsNil applies the IsNil predicate on the "constraints" field.
func ConstraintsIsNil() predicate.Problem {
	return predicate.Problem(sql.FieldIsNull(FieldConstraints))
}

// ConstraintsNotNil applies the NotNil predicate on the "constraints" field.
func ConstraintsNotNil() predicate.Problem {
	return predicate.Problem(sql.FieldNotNull(FieldConstraints))
}

// ConstraintsEqualFold applies the EqualFold predicate on the "constraints" field.
func ConstraintsEqualFold(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEqualFold(FieldConstraints, v))
}

// ConstraintsContainsFold applies the ContainsFold predicate on the "constraints" field.
func ConstraintsContainsFold(v string) predicate.Problem {
	return predicate.Problem(sql.FieldContainsFold(FieldConstraints, v))
}

// EvaluationCriteriaEQ applies the EQ predicate on the "evaluation_criteria" field.
func EvaluationCriteriaEQ(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldEvaluationCriteria, v))
}

// EvaluationCriteriaNEQ applies the NEQ predicate on the "evaluation_criteria" field.
func EvaluationCriteriaNEQ(v string) predicate.Problem {
	return predicate.Problem(sql.FieldNEQ(FieldEvaluationCriteria, v))
}

// EvaluationCriteriaIn applies the In predicate on the "evaluation_criteria" field.
func EvaluationCriteriaIn(vs ...string) predicate.Problem {
	return predicate.Problem(sql.FieldIn(FieldEvaluationCriteria, vs...))
}

// EvaluationCriteriaNotIn applies the NotIn predicate on the "evaluation_criteria" field.
func EvaluationCriteriaNotIn(vs ...string) predicate.Problem {
	return predicate.Problem(sql.FieldNotIn(FieldEvaluationCriteria, vs...))
}

// EvaluationCriteriaGT applies the GT predicate on the "evaluation_criteria" field.
func EvaluationCriteriaGT(v string) predicate.Problem {
	return predicate.Problem(sql.FieldGT(FieldEvaluationCriteria, v))
}

// EvaluationCriteriaGTE applies the GTE predicate on the "evaluation_criteria" field.
func EvaluationCriteriaGTE(v string) predicate.Problem {
	return predicate.Problem(sql.FieldGTE(FieldEvaluationCriteria, v))
}

// EvaluationCriteriaLT applies the LT predicate on the "evaluation_criteria" field.
func EvaluationCriteriaLT(v string) predicate.Problem {
	return predicate.Problem(sql.FieldLT(FieldEvaluationCriteria, v))
}

// EvaluationCriteriaLTE applies the LTE predicate on the "evaluation_criteria" field.
func EvaluationCriteriaLTE(v string) predicate.Problem {
	return predicate.Problem(sql.FieldLTE(FieldEvaluationCriteria, v))
}

// EvaluationCriteriaContains applies the Contains predicate on the "evaluation_criteria" field.
func EvaluationCriteriaContains(v string) predicate.Problem {
	return predicate.Problem(sql.FieldContains(FieldEvaluationCriteria, v))
}

// EvaluationCriteriaHasPrefix applies the HasPrefix predicate on the "evaluation_criteria" field.
func EvaluationCriteriaHasPrefix(v string) predicate.Problem {
	return predicate.Problem(sql.FieldHasPrefix(FieldEvaluationCriteria, v))
}

// EvaluationCriteriaHasSuffix applies the HasSuffix predicate on the "evaluation_criteria" field.
func EvaluationCriteriaHasSuffix(v string) predicate.Problem {
	return predicate.Problem(sql.FieldHasSuffix(FieldEvaluationCriteria, v))
}

// EvaluationCriteriaIsNil applies the IsNil predicate on the "evaluation_criteria" field.
func EvaluationCriteriaIsNil() predicate.Problem {
	return predicate.Problem(sql.FieldIsNull(FieldEvaluationCriteria))
}

// EvaluationCriteriaNotNil applies the NotNil predicate on the "evaluation_criteria" field.
func EvaluationCriteriaNotNil() predicate.Problem {
	return predicate.Problem(sql.FieldNotNull(FieldEvaluationCriteria))
}

// EvaluationCriteriaEqualFold applies the EqualFold predicate on the "evaluation_criteria" field.
func EvaluationCriteriaEqualFold(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEqualFold(FieldEvaluationCriteria, v))
}

// EvaluationCriteriaContainsFold applies the ContainsFold predicate on the "evaluation_criteria" field.
func EvaluationCriteriaContainsFold(v string) predicate.Problem {
	return predicate.Problem(sql.FieldContainsFold(FieldEvaluationCriteria, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Problem) predicate.Problem {
	return predicate.Problem(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Problem) predicate.Problem {
	return predicate.Problem(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Problem) predicate.Problem {
	return predicate.Problem(func(s *sql.Selector) {
		p(s.Not())
	})
}
