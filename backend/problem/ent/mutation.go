// Code generated by ent, DO NOT EDIT.

package ent

import (
	"code-connect/problem/ent/predicate"
	"code-connect/problem/ent/problem"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeProblem = "Problem"
)

// ProblemMutation represents an operation that mutates the Problem nodes in the graph.
type ProblemMutation struct {
	config
	op                        Op
	typ                       string
	id                        *int
	uuid                      *string
	difficulty                *int
	adddifficulty             *int
	language                  *string
	statement                 *string
	examples                  *string
	constraints               *[]string
	appendconstraints         []string
	evaluation_criteria       *[]string
	appendevaluation_criteria []string
	created_at                *time.Time
	clearedFields             map[string]struct{}
	done                      bool
	oldValue                  func(context.Context) (*Problem, error)
	predicates                []predicate.Problem
}

var _ ent.Mutation = (*ProblemMutation)(nil)

// problemOption allows management of the mutation configuration using functional options.
type problemOption func(*ProblemMutation)

// newProblemMutation creates new mutation for the Problem entity.
func newProblemMutation(c config, op Op, opts ...problemOption) *ProblemMutation {
	m := &ProblemMutation{
		config:        c,
		op:            op,
		typ:           TypeProblem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProblemID sets the ID field of the mutation.
func withProblemID(id int) problemOption {
	return func(m *ProblemMutation) {
		var (
			err   error
			once  sync.Once
			value *Problem
		)
		m.oldValue = func(ctx context.Context) (*Problem, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Problem.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProblem sets the old Problem of the mutation.
func withProblem(node *Problem) problemOption {
	return func(m *ProblemMutation) {
		m.oldValue = func(context.Context) (*Problem, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProblemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProblemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProblemMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProblemMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Problem.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUUID sets the "uuid" field.
func (m *ProblemMutation) SetUUID(s string) {
	m.uuid = &s
}

// UUID returns the value of the "uuid" field in the mutation.
func (m *ProblemMutation) UUID() (r string, exists bool) {
	v := m.uuid
	if v == nil {
		return
	}
	return *v, true
}

// OldUUID returns the old "uuid" field's value of the Problem entity.
// If the Problem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProblemMutation) OldUUID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUUID: %w", err)
	}
	return oldValue.UUID, nil
}

// ResetUUID resets all changes to the "uuid" field.
func (m *ProblemMutation) ResetUUID() {
	m.uuid = nil
}

// SetDifficulty sets the "difficulty" field.
func (m *ProblemMutation) SetDifficulty(i int) {
	m.difficulty = &i
	m.adddifficulty = nil
}

// Difficulty returns the value of the "difficulty" field in the mutation.
func (m *ProblemMutation) Difficulty() (r int, exists bool) {
	v := m.difficulty
	if v == nil {
		return
	}
	return *v, true
}

// OldDifficulty returns the old "difficulty" field's value of the Problem entity.
// If the Problem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProblemMutation) OldDifficulty(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDifficulty is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDifficulty requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDifficulty: %w", err)
	}
	return oldValue.Difficulty, nil
}

// AddDifficulty adds i to the "difficulty" field.
func (m *ProblemMutation) AddDifficulty(i int) {
	if m.adddifficulty != nil {
		*m.adddifficulty += i
	} else {
		m.adddifficulty = &i
	}
}

// AddedDifficulty returns the value that was added to the "difficulty" field in this mutation.
func (m *ProblemMutation) AddedDifficulty() (r int, exists bool) {
	v := m.adddifficulty
	if v == nil {
		return
	}
	return *v, true
}

// ResetDifficulty resets all changes to the "difficulty" field.
func (m *ProblemMutation) ResetDifficulty() {
	m.difficulty = nil
	m.adddifficulty = nil
}

// SetLanguage sets the "language" field.
func (m *ProblemMutation) SetLanguage(s string) {
	m.language = &s
}

// Language returns the value of the "language" field in the mutation.
func (m *ProblemMutation) Language() (r string, exists bool) {
	v := m.language
	if v == nil {
		return
	}
	return *v, true
}

// OldLanguage returns the old "language" field's value of the Problem entity.
// If the Problem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProblemMutation) OldLanguage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLanguage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLanguage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLanguage: %w", err)
	}
	return oldValue.Language, nil
}

// ResetLanguage resets all changes to the "language" field.
func (m *ProblemMutation) ResetLanguage() {
	m.language = nil
}

// SetStatement sets the "statement" field.
func (m *ProblemMutation) SetStatement(s string) {
	m.statement = &s
}

// Statement returns the value of the "statement" field in the mutation.
func (m *ProblemMutation) Statement() (r string, exists bool) {
	v := m.statement
	if v == nil {
		return
	}
	return *v, true
}

// OldStatement returns the old "statement" field's value of the Problem entity.
// If the Problem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProblemMutation) OldStatement(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatement is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatement requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatement: %w", err)
	}
	return oldValue.Statement, nil
}

// ClearStatement clears the value of the "statement" field.
func (m *ProblemMutation) ClearStatement() {
	m.statement = nil
	m.clearedFields[problem.FieldStatement] = struct{}{}
}

// StatementCleared returns if the "statement" field was cleared in this mutation.
func (m *ProblemMutation) StatementCleared() bool {
	_, ok := m.clearedFields[problem.FieldStatement]
	return ok
}

// ResetStatement resets all changes to the "statement" field.
func (m *ProblemMutation) ResetStatement() {
	m.statement = nil
	delete(m.clearedFields, problem.FieldStatement)
}

// SetExamples sets the "examples" field.
func (m *ProblemMutation) SetExamples(s string) {
	m.examples = &s
}

// Examples returns the value of the "examples" field in the mutation.
func (m *ProblemMutation) Examples() (r string, exists bool) {
	v := m.examples
	if v == nil {
		return
	}
	return *v, true
}

// OldExamples returns the old "examples" field's value of the Problem entity.
// If the Problem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProblemMutation) OldExamples(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExamples is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExamples requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExamples: %w", err)
	}
	return oldValue.Examples, nil
}

// ClearExamples clears the value of the "examples" field.
func (m *ProblemMutation) ClearExamples() {
	m.examples = nil
	m.clearedFields[problem.FieldExamples] = struct{}{}
}

// ExamplesCleared returns if the "examples" field was cleared in this mutation.
func (m *ProblemMutation) ExamplesCleared() bool {
	_, ok := m.clearedFields[problem.FieldExamples]
	return ok
}

// ResetExamples resets all changes to the "examples" field.
func (m *ProblemMutation) ResetExamples() {
	m.examples = nil
	delete(m.clearedFields, problem.FieldExamples)
}

// SetConstraints sets the "constraints" field.
func (m *ProblemMutation) SetConstraints(s []string) {
	m.constraints = &s
	m.appendconstraints = nil
}

// Constraints returns the value of the "constraints" field in the mutation.
func (m *ProblemMutation) Constraints() (r []string, exists bool) {
	v := m.constraints
	if v == nil {
		return
	}
	return *v, true
}

// OldConstraints returns the old "constraints" field's value of the Problem entity.
// If the Problem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProblemMutation) OldConstraints(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConstraints is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConstraints requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConstraints: %w", err)
	}
	return oldValue.Constraints, nil
}

// AppendConstraints adds s to the "constraints" field.
func (m *ProblemMutation) AppendConstraints(s []string) {
	m.appendconstraints = append(m.appendconstraints, s...)
}

// AppendedConstraints returns the list of values that were appended to the "constraints" field in this mutation.
func (m *ProblemMutation) AppendedConstraints() ([]string, bool) {
	if len(m.appendconstraints) == 0 {
		return nil, false
	}
	return m.appendconstraints, true
}

// ClearConstraints clears the value of the "constraints" field.
func (m *ProblemMutation) ClearConstraints() {
	m.constraints = nil
	m.appendconstraints = nil
	m.clearedFields[problem.FieldConstraints] = struct{}{}
}

// ConstraintsCleared returns if the "constraints" field was cleared in this mutation.
func (m *ProblemMutation) ConstraintsCleared() bool {
	_, ok := m.clearedFields[problem.FieldConstraints]
	return ok
}

// ResetConstraints resets all changes to the "constraints" field.
func (m *ProblemMutation) ResetConstraints() {
	m.constraints = nil
	m.appendconstraints = nil
	delete(m.clearedFields, problem.FieldConstraints)
}

// SetEvaluationCriteria sets the "evaluation_criteria" field.
func (m *ProblemMutation) SetEvaluationCriteria(s []string) {
	m.evaluation_criteria = &s
	m.appendevaluation_criteria = nil
}

// EvaluationCriteria returns the value of the "evaluation_criteria" field in the mutation.
func (m *ProblemMutation) EvaluationCriteria() (r []string, exists bool) {
	v := m.evaluation_criteria
	if v == nil {
		return
	}
	return *v, true
}

// OldEvaluationCriteria returns the old "evaluation_criteria" field's value of the Problem entity.
// If the Problem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProblemMutation) OldEvaluationCriteria(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEvaluationCriteria is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEvaluationCriteria requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEvaluationCriteria: %w", err)
	}
	return oldValue.EvaluationCriteria, nil
}

// AppendEvaluationCriteria adds s to the "evaluation_criteria" field.
func (m *ProblemMutation) AppendEvaluationCriteria(s []string) {
	m.appendevaluation_criteria = append(m.appendevaluation_criteria, s...)
}

// AppendedEvaluationCriteria returns the list of values that were appended to the "evaluation_criteria" field in this mutation.
func (m *ProblemMutation) AppendedEvaluationCriteria() ([]string, bool) {
	if len(m.appendevaluation_criteria) == 0 {
		return nil, false
	}
	return m.appendevaluation_criteria, true
}

// ClearEvaluationCriteria clears the value of the "evaluation_criteria" field.
func (m *ProblemMutation) ClearEvaluationCriteria() {
	m.evaluation_criteria = nil
	m.appendevaluation_criteria = nil
	m.clearedFields[problem.FieldEvaluationCriteria] = struct{}{}
}

// EvaluationCriteriaCleared returns if the "evaluation_criteria" field was cleared in this mutation.
func (m *ProblemMutation) EvaluationCriteriaCleared() bool {
	_, ok := m.clearedFields[problem.FieldEvaluationCriteria]
	return ok
}

// ResetEvaluationCriteria resets all changes to the "evaluation_criteria" field.
func (m *ProblemMutation) ResetEvaluationCriteria() {
	m.evaluation_criteria = nil
	m.appendevaluation_criteria = nil
	delete(m.clearedFields, problem.FieldEvaluationCriteria)
}

// SetCreatedAt sets the "created_at" field.
func (m *ProblemMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProblemMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Problem entity.
// If the Problem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProblemMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProblemMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the ProblemMutation builder.
func (m *ProblemMutation) Where(ps ...predicate.Problem) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProblemMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProblemMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Problem, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProblemMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProblemMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Problem).
func (m *ProblemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProblemMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.uuid != nil {
		fields = append(fields, problem.FieldUUID)
	}
	if m.difficulty != nil {
		fields = append(fields, problem.FieldDifficulty)
	}
	if m.language != nil {
		fields = append(fields, problem.FieldLanguage)
	}
	if m.statement != nil {
		fields = append(fields, problem.FieldStatement)
	}
	if m.examples != nil {
		fields = append(fields, problem.FieldExamples)
	}
	if m.constraints != nil {
		fields = append(fields, problem.FieldConstraints)
	}
	if m.evaluation_criteria != nil {
		fields = append(fields, problem.FieldEvaluationCriteria)
	}
	if m.created_at != nil {
		fields = append(fields, problem.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProblemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case problem.FieldUUID:
		return m.UUID()
	case problem.FieldDifficulty:
		return m.Difficulty()
	case problem.FieldLanguage:
		return m.Language()
	case problem.FieldStatement:
		return m.Statement()
	case problem.FieldExamples:
		return m.Examples()
	case problem.FieldConstraints:
		return m.Constraints()
	case problem.FieldEvaluationCriteria:
		return m.EvaluationCriteria()
	case problem.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProblemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case problem.FieldUUID:
		return m.OldUUID(ctx)
	case problem.FieldDifficulty:
		return m.OldDifficulty(ctx)
	case problem.FieldLanguage:
		return m.OldLanguage(ctx)
	case problem.FieldStatement:
		return m.OldStatement(ctx)
	case problem.FieldExamples:
		return m.OldExamples(ctx)
	case problem.FieldConstraints:
		return m.OldConstraints(ctx)
	case problem.FieldEvaluationCriteria:
		return m.OldEvaluationCriteria(ctx)
	case problem.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Problem field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProblemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case problem.FieldUUID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUUID(v)
		return nil
	case problem.FieldDifficulty:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDifficulty(v)
		return nil
	case problem.FieldLanguage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLanguage(v)
		return nil
	case problem.FieldStatement:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatement(v)
		return nil
	case problem.FieldExamples:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExamples(v)
		return nil
	case problem.FieldConstraints:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConstraints(v)
		return nil
	case problem.FieldEvaluationCriteria:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEvaluationCriteria(v)
		return nil
	case problem.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Problem field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProblemMutation) AddedFields() []string {
	var fields []string
	if m.adddifficulty != nil {
		fields = append(fields, problem.FieldDifficulty)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProblemMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case problem.FieldDifficulty:
		return m.AddedDifficulty()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProblemMutation) AddField(name string, value ent.Value) error {
	switch name {
	case problem.FieldDifficulty:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDifficulty(v)
		return nil
	}
	return fmt.Errorf("unknown Problem numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProblemMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(problem.FieldStatement) {
		fields = append(fields, problem.FieldStatement)
	}
	if m.FieldCleared(problem.FieldExamples) {
		fields = append(fields, problem.FieldExamples)
	}
	if m.FieldCleared(problem.FieldConstraints) {
		fields = append(fields, problem.FieldConstraints)
	}
	if m.FieldCleared(problem.FieldEvaluationCriteria) {
		fields = append(fields, problem.FieldEvaluationCriteria)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProblemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProblemMutation) ClearField(name string) error {
	switch name {
	case problem.FieldStatement:
		m.ClearStatement()
		return nil
	case problem.FieldExamples:
		m.ClearExamples()
		return nil
	case problem.FieldConstraints:
		m.ClearConstraints()
		return nil
	case problem.FieldEvaluationCriteria:
		m.ClearEvaluationCriteria()
		return nil
	}
	return fmt.Errorf("unknown Problem nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProblemMutation) ResetField(name string) error {
	switch name {
	case problem.FieldUUID:
		m.ResetUUID()
		return nil
	case problem.FieldDifficulty:
		m.ResetDifficulty()
		return nil
	case problem.FieldLanguage:
		m.ResetLanguage()
		return nil
	case problem.FieldStatement:
		m.ResetStatement()
		return nil
	case problem.FieldExamples:
		m.ResetExamples()
		return nil
	case problem.FieldConstraints:
		m.ResetConstraints()
		return nil
	case problem.FieldEvaluationCriteria:
		m.ResetEvaluationCriteria()
		return nil
	case problem.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Problem field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProblemMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProblemMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProblemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProblemMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProblemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProblemMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProblemMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Problem unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProblemMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Problem edge %s", name)
}
