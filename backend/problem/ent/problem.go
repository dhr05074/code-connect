// Code generated by ent, DO NOT EDIT.

package ent

import (
	"code-connect/problem/ent/problem"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Problem is the model entity for the Problem schema.
type Problem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid,omitempty"`
	// Difficulty holds the value of the "difficulty" field.
	Difficulty int `json:"difficulty,omitempty"`
	// Language holds the value of the "language" field.
	Language string `json:"language,omitempty"`
	// Statement holds the value of the "statement" field.
	Statement string `json:"statement,omitempty"`
	// Examples holds the value of the "examples" field.
	Examples string `json:"examples,omitempty"`
	// Constraints holds the value of the "constraints" field.
	Constraints string `json:"constraints,omitempty"`
	// EvaluationCriteria holds the value of the "evaluation_criteria" field.
	EvaluationCriteria string `json:"evaluation_criteria,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Problem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case problem.FieldID, problem.FieldDifficulty:
			values[i] = new(sql.NullInt64)
		case problem.FieldUUID, problem.FieldLanguage, problem.FieldStatement, problem.FieldExamples, problem.FieldConstraints, problem.FieldEvaluationCriteria:
			values[i] = new(sql.NullString)
		case problem.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Problem", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Problem fields.
func (pr *Problem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case problem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case problem.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				pr.UUID = value.String
			}
		case problem.FieldDifficulty:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field difficulty", values[i])
			} else if value.Valid {
				pr.Difficulty = int(value.Int64)
			}
		case problem.FieldLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language", values[i])
			} else if value.Valid {
				pr.Language = value.String
			}
		case problem.FieldStatement:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field statement", values[i])
			} else if value.Valid {
				pr.Statement = value.String
			}
		case problem.FieldExamples:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field examples", values[i])
			} else if value.Valid {
				pr.Examples = value.String
			}
		case problem.FieldConstraints:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field constraints", values[i])
			} else if value.Valid {
				pr.Constraints = value.String
			}
		case problem.FieldEvaluationCriteria:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field evaluation_criteria", values[i])
			} else if value.Valid {
				pr.EvaluationCriteria = value.String
			}
		case problem.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Problem.
// Note that you need to call Problem.Unwrap() before calling this method if this Problem
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Problem) Update() *ProblemUpdateOne {
	return NewProblemClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Problem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Problem) Unwrap() *Problem {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Problem is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Problem) String() string {
	var builder strings.Builder
	builder.WriteString("Problem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("uuid=")
	builder.WriteString(pr.UUID)
	builder.WriteString(", ")
	builder.WriteString("difficulty=")
	builder.WriteString(fmt.Sprintf("%v", pr.Difficulty))
	builder.WriteString(", ")
	builder.WriteString("language=")
	builder.WriteString(pr.Language)
	builder.WriteString(", ")
	builder.WriteString("statement=")
	builder.WriteString(pr.Statement)
	builder.WriteString(", ")
	builder.WriteString("examples=")
	builder.WriteString(pr.Examples)
	builder.WriteString(", ")
	builder.WriteString("constraints=")
	builder.WriteString(pr.Constraints)
	builder.WriteString(", ")
	builder.WriteString("evaluation_criteria=")
	builder.WriteString(pr.EvaluationCriteria)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Problems is a parsable slice of Problem.
type Problems []*Problem
