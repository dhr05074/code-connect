// Package gateway provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package gateway

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	ApiKeyScopes = "apiKey.Scopes"
)

// Defines values for ErrorCode.
const (
	InvalidAuthorization ErrorCode = "InvalidAuthorization"
	ProblemNotFound      ErrorCode = "ProblemNotFound"
	ProblemNotReady      ErrorCode = "ProblemNotReady"
	RecordNotFound       ErrorCode = "RecordNotFound"
	ServerError          ErrorCode = "ServerError"
	TooManyRequests      ErrorCode = "TooManyRequests"
	UserNotFound         ErrorCode = "UserNotFound"
)

// Defines values for ErrorMessage.
const (
	InvalidAuthorizationMessage ErrorMessage = "유효하지 않은 인증 정보입니다."
	ProblemNotFoundMessage      ErrorMessage = "해당 문제를 찾을 수 없습니다."
	ProblemNotReadyMessage      ErrorMessage = "해당 문제는 현재 생성 중입니다."
	RecordNotFoundMessage       ErrorMessage = "해당 레코드를 찾을 수 없습니다."
	ServerErrorMessage          ErrorMessage = "서버 내부 오류가 발생했습니다."
	TooManyRequestsMessage      ErrorMessage = "요청이 너무 많습니다."
	UserNotFoundMessage         ErrorMessage = "해당 유저를 찾을 수 없습니다."
)

// Defines values for ProgrammingLanguage.
const (
	Cpp        ProgrammingLanguage = "Cpp"
	Go         ProgrammingLanguage = "Go"
	Javascript ProgrammingLanguage = "Javascript"
)

// Code Developic에서 사용되는 코드 데이터입니다.
// 코드 데이터의 Escape를 방지하기 위해 Base64로 인코딩되어 전송, 보관됩니다.
type Code = string

// ELOScore Developic에서 유저의 실력을 가늠하는 ELO 점수입니다.
type ELOScore = int32

// Error defines model for Error.
type Error struct {
	// Code Developic에서 사용되는 오류 코드입니다.
	Code ErrorCode `json:"code"`

	// Message Developic에서 사용되는 오류 메시지입니다.
	Message ErrorMessage `json:"message"`
}

// ErrorCode Developic에서 사용되는 오류 코드입니다.
type ErrorCode string

// ErrorMessage Developic에서 사용되는 오류 메시지입니다.
type ErrorMessage string

// Nickname Developic에서 사용되는 유저의 이름입니다.
type Nickname = string

// Problem defines model for Problem.
type Problem struct {
	// Code Developic에서 사용되는 코드 데이터입니다.
	// 코드 데이터의 Escape를 방지하기 위해 Base64로 인코딩되어 전송, 보관됩니다.
	Code Code `json:"code"`

	// Description 문제의 자세한 설명입니다.
	Description string `json:"description"`

	// Id Developic에서 출제한 문제의 고유 ID입니다.
	Id ProblemID `json:"id"`

	// Title Developic에서 출제한 문제의 타이틀입니다.
	Title ProblemTitle `json:"title"`
}

// ProblemID Developic에서 출제한 문제의 고유 ID입니다.
type ProblemID = string

// ProblemTitle Developic에서 출제한 문제의 타이틀입니다.
type ProblemTitle = string

// ProgrammingLanguage Developic에서 사용할 프로그래밍 언어입니다.
type ProgrammingLanguage string

// Record defines model for Record.
type Record struct {
	// Code Developic에서 사용되는 코드 데이터입니다.
	// 코드 데이터의 Escape를 방지하기 위해 Base64로 인코딩되어 전송, 보관됩니다.
	Code Code `json:"code"`

	// Efficiency 결과 보고서에서 사용자가 취득한 총점입니다.
	Efficiency Score `json:"efficiency"`

	// Id Developic에서 생성된 결과 보고서의 고유 ID입니다.
	Id RecordID `json:"id"`

	// ProblemId Developic에서 출제한 문제의 고유 ID입니다.
	ProblemId ProblemID `json:"problem_id"`

	// ProblemTitle Developic에서 출제한 문제의 타이틀입니다.
	ProblemTitle ProblemTitle `json:"problem_title"`

	// Readability 결과 보고서에서 사용자가 취득한 총점입니다.
	Readability Score `json:"readability"`

	// Robustness 결과 보고서에서 사용자가 취득한 총점입니다.
	Robustness Score `json:"robustness"`
}

// RecordID Developic에서 생성된 결과 보고서의 고유 ID입니다.
type RecordID = string

// Score 결과 보고서에서 사용자가 취득한 총점입니다.
type Score = int32

// N200GetProblem defines model for 200GetProblem.
type N200GetProblem = Problem

// N200GetRecord defines model for 200GetRecord.
type N200GetRecord = Record

// N200GetRecords defines model for 200GetRecords.
type N200GetRecords struct {
	Records []Record `json:"records"`
}

// N202Submit defines model for 202Submit.
type N202Submit struct {
	// RecordId Developic에서 생성된 결과 보고서의 고유 ID입니다.
	RecordId RecordID `json:"record_id"`
}

// InternalServerError defines model for InternalServerError.
type InternalServerError = Error

// SubmitCode defines model for SubmitCode.
type SubmitCode struct {
	// Code Developic에서 사용되는 코드 데이터입니다.
	// 코드 데이터의 Escape를 방지하기 위해 Base64로 인코딩되어 전송, 보관됩니다.
	Code Code `json:"code"`

	// ProblemId Developic에서 출제한 문제의 고유 ID입니다.
	ProblemId ProblemID `json:"problem_id"`
}

// RequestProblemJSONBody defines parameters for RequestProblem.
type RequestProblemJSONBody struct {
	// EloScore Developic에서 유저의 실력을 가늠하는 ELO 점수입니다.
	EloScore *ELOScore `json:"elo_score,omitempty"`

	// Language Developic에서 사용할 프로그래밍 언어입니다.
	Language ProgrammingLanguage `json:"language"`
}

// GetRecordsParams defines parameters for GetRecords.
type GetRecordsParams struct {
	// Page 조회할 페이지입니다.
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// Limit 한 페이지당 조회할 아이템의 수입니다.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// SubmitSolutionJSONBody defines parameters for SubmitSolution.
type SubmitSolutionJSONBody struct {
	// Code Developic에서 사용되는 코드 데이터입니다.
	// 코드 데이터의 Escape를 방지하기 위해 Base64로 인코딩되어 전송, 보관됩니다.
	Code Code `json:"code"`

	// ProblemId Developic에서 출제한 문제의 고유 ID입니다.
	ProblemId ProblemID `json:"problem_id"`
}

// RequestProblemJSONRequestBody defines body for RequestProblem for application/json ContentType.
type RequestProblemJSONRequestBody RequestProblemJSONBody

// SubmitSolutionJSONRequestBody defines body for SubmitSolution for application/json ContentType.
type SubmitSolutionJSONRequestBody SubmitSolutionJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /me)
	GetMe(ctx echo.Context) error

	// (POST /problems)
	RequestProblem(ctx echo.Context) error

	// (GET /problems/{id})
	GetProblem(ctx echo.Context, id ProblemID) error

	// (GET /records)
	GetRecords(ctx echo.Context, params GetRecordsParams) error

	// (GET /records/{id})
	GetRecord(ctx echo.Context, id RecordID) error

	// (POST /submit)
	SubmitSolution(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetMe converts echo context to params.
func (w *ServerInterfaceWrapper) GetMe(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMe(ctx)
	return err
}

// RequestProblem converts echo context to params.
func (w *ServerInterfaceWrapper) RequestProblem(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RequestProblem(ctx)
	return err
}

// GetProblem converts echo context to params.
func (w *ServerInterfaceWrapper) GetProblem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id ProblemID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProblem(ctx, id)
	return err
}

// GetRecords converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecords(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecordsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecords(ctx, params)
	return err
}

// GetRecord converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecord(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id RecordID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecord(ctx, id)
	return err
}

// SubmitSolution converts echo context to params.
func (w *ServerInterfaceWrapper) SubmitSolution(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SubmitSolution(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/me", wrapper.GetMe)
	router.POST(baseURL+"/problems", wrapper.RequestProblem)
	router.GET(baseURL+"/problems/:id", wrapper.GetProblem)
	router.GET(baseURL+"/records", wrapper.GetRecords)
	router.GET(baseURL+"/records/:id", wrapper.GetRecord)
	router.POST(baseURL+"/submit", wrapper.SubmitSolution)

}

type N200GetProblemJSONResponse Problem

type N200GetRecordJSONResponse Record

type N200GetRecordsJSONResponse struct {
	Records []Record `json:"records"`
}

type N202SubmitJSONResponse struct {
	// RecordId Developic에서 생성된 결과 보고서의 고유 ID입니다.
	RecordId RecordID `json:"record_id"`
}

type InternalServerErrorJSONResponse Error

type GetMeRequestObject struct {
}

type GetMeResponseObject interface {
	VisitGetMeResponse(w http.ResponseWriter) error
}

type GetMe200JSONResponse struct {
	// EloScore Developic에서 유저의 실력을 가늠하는 ELO 점수입니다.
	EloScore ELOScore `json:"elo_score"`

	// Nickname Developic에서 사용되는 유저의 이름입니다.
	Nickname Nickname `json:"nickname"`
}

func (response GetMe200JSONResponse) VisitGetMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMe401JSONResponse Error

func (response GetMe401JSONResponse) VisitGetMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetMe404JSONResponse Error

func (response GetMe404JSONResponse) VisitGetMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetMedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetMedefaultJSONResponse) VisitGetMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RequestProblemRequestObject struct {
	Body *RequestProblemJSONRequestBody
}

type RequestProblemResponseObject interface {
	VisitRequestProblemResponse(w http.ResponseWriter) error
}

type RequestProblem202JSONResponse struct {
	// ProblemId Developic에서 출제한 문제의 고유 ID입니다.
	ProblemId ProblemID `json:"problem_id"`
}

func (response RequestProblem202JSONResponse) VisitRequestProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type RequestProblem429JSONResponse Error

func (response RequestProblem429JSONResponse) VisitRequestProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type RequestProblemdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response RequestProblemdefaultJSONResponse) VisitRequestProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetProblemRequestObject struct {
	Id ProblemID `json:"id"`
}

type GetProblemResponseObject interface {
	VisitGetProblemResponse(w http.ResponseWriter) error
}

type GetProblem200JSONResponse struct{ N200GetProblemJSONResponse }

func (response GetProblem200JSONResponse) VisitGetProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProblem404JSONResponse Error

func (response GetProblem404JSONResponse) VisitGetProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetProblem409JSONResponse Error

func (response GetProblem409JSONResponse) VisitGetProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type GetProblemdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetProblemdefaultJSONResponse) VisitGetProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetRecordsRequestObject struct {
	Params GetRecordsParams
}

type GetRecordsResponseObject interface {
	VisitGetRecordsResponse(w http.ResponseWriter) error
}

type GetRecords200JSONResponse struct{ N200GetRecordsJSONResponse }

func (response GetRecords200JSONResponse) VisitGetRecordsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRecordsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetRecordsdefaultJSONResponse) VisitGetRecordsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetRecordRequestObject struct {
	Id RecordID `json:"id"`
}

type GetRecordResponseObject interface {
	VisitGetRecordResponse(w http.ResponseWriter) error
}

type GetRecord200JSONResponse struct{ N200GetRecordJSONResponse }

func (response GetRecord200JSONResponse) VisitGetRecordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRecord404Response struct {
}

func (response GetRecord404Response) VisitGetRecordResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetRecord409Response struct {
}

func (response GetRecord409Response) VisitGetRecordResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

type GetRecorddefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetRecorddefaultJSONResponse) VisitGetRecordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SubmitSolutionRequestObject struct {
	Body *SubmitSolutionJSONRequestBody
}

type SubmitSolutionResponseObject interface {
	VisitSubmitSolutionResponse(w http.ResponseWriter) error
}

type SubmitSolution202JSONResponse struct{ N202SubmitJSONResponse }

func (response SubmitSolution202JSONResponse) VisitSubmitSolutionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type SubmitSolution404JSONResponse Error

func (response SubmitSolution404JSONResponse) VisitSubmitSolutionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type SubmitSolutiondefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response SubmitSolutiondefaultJSONResponse) VisitSubmitSolutionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /me)
	GetMe(ctx context.Context, request GetMeRequestObject) (GetMeResponseObject, error)

	// (POST /problems)
	RequestProblem(ctx context.Context, request RequestProblemRequestObject) (RequestProblemResponseObject, error)

	// (GET /problems/{id})
	GetProblem(ctx context.Context, request GetProblemRequestObject) (GetProblemResponseObject, error)

	// (GET /records)
	GetRecords(ctx context.Context, request GetRecordsRequestObject) (GetRecordsResponseObject, error)

	// (GET /records/{id})
	GetRecord(ctx context.Context, request GetRecordRequestObject) (GetRecordResponseObject, error)

	// (POST /submit)
	SubmitSolution(ctx context.Context, request SubmitSolutionRequestObject) (SubmitSolutionResponseObject, error)
}

type StrictHandlerFunc = runtime.StrictEchoHandlerFunc
type StrictMiddlewareFunc = runtime.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetMe operation middleware
func (sh *strictHandler) GetMe(ctx echo.Context) error {
	var request GetMeRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetMe(ctx.Request().Context(), request.(GetMeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMe")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetMeResponseObject); ok {
		return validResponse.VisitGetMeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// RequestProblem operation middleware
func (sh *strictHandler) RequestProblem(ctx echo.Context) error {
	var request RequestProblemRequestObject

	var body RequestProblemJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RequestProblem(ctx.Request().Context(), request.(RequestProblemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RequestProblem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RequestProblemResponseObject); ok {
		return validResponse.VisitRequestProblemResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetProblem operation middleware
func (sh *strictHandler) GetProblem(ctx echo.Context, id ProblemID) error {
	var request GetProblemRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProblem(ctx.Request().Context(), request.(GetProblemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProblem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetProblemResponseObject); ok {
		return validResponse.VisitGetProblemResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetRecords operation middleware
func (sh *strictHandler) GetRecords(ctx echo.Context, params GetRecordsParams) error {
	var request GetRecordsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRecords(ctx.Request().Context(), request.(GetRecordsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRecords")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetRecordsResponseObject); ok {
		return validResponse.VisitGetRecordsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetRecord operation middleware
func (sh *strictHandler) GetRecord(ctx echo.Context, id RecordID) error {
	var request GetRecordRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRecord(ctx.Request().Context(), request.(GetRecordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRecord")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetRecordResponseObject); ok {
		return validResponse.VisitGetRecordResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// SubmitSolution operation middleware
func (sh *strictHandler) SubmitSolution(ctx echo.Context) error {
	var request SubmitSolutionRequestObject

	var body SubmitSolutionJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SubmitSolution(ctx.Request().Context(), request.(SubmitSolutionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SubmitSolution")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SubmitSolutionResponseObject); ok {
		return validResponse.VisitSubmitSolutionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
