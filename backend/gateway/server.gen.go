// Package gateway provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package gateway

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for ProblemLanguage.
const (
	C          ProblemLanguage = "c"
	Cpp        ProblemLanguage = "cpp"
	Go         ProblemLanguage = "go"
	Java       ProblemLanguage = "java"
	Javascript ProblemLanguage = "javascript"
	Python     ProblemLanguage = "python"
)

// Problem 문제 데이터입니다.
type Problem struct {
	// Content 문제 내용입니다. Markdown 형식으로 작성되어 있습니다.
	Content string `json:"content"`

	// Id 문제의 ID 입니다.
	Id string `json:"id"`

	// Language 문제 풀이시 사용할 언어입니다.
	Language string `json:"language"`
}

// ProblemDifficulty 문제의 난이도입니다. 1 ~ 100 사이의 정수입니다.
type ProblemDifficulty = float32

// ProblemID 문제의 ID 입니다.
type ProblemID = string

// ProblemLanguage 문제 풀이시 사용할 언어입니다.
type ProblemLanguage string

// BadRequest defines model for BadRequest.
type BadRequest struct {
	// Message 오류 메시지
	Message *string `json:"message,omitempty"`
}

// CreateProblemResponse defines model for CreateProblemResponse.
type CreateProblemResponse struct {
	// Id ID of the problem
	Id *string `json:"id,omitempty"`
}

// GetProblemResponse 문제 데이터입니다.
type GetProblemResponse = Problem

// CreateProblemJSONBody defines parameters for CreateProblem.
type CreateProblemJSONBody struct {
	// Difficulty 문제의 난이도입니다. 1 ~ 100 사이의 정수입니다.
	Difficulty ProblemDifficulty `json:"difficulty"`

	// Language 문제 풀이시 사용할 언어입니다.
	Language ProblemLanguage `json:"language"`
}

// CreateProblemJSONRequestBody defines body for CreateProblem for application/json ContentType.
type CreateProblemJSONRequestBody CreateProblemJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 문제 생성을 요청합니다.
	// (POST /problems)
	CreateProblem(ctx echo.Context) error
	// 문제를 조회합니다.
	// (GET /problems/{problem_id})
	GetProblem(ctx echo.Context, problemId ProblemID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateProblem converts echo context to params.
func (w *ServerInterfaceWrapper) CreateProblem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateProblem(ctx)
	return err
}

// GetProblem converts echo context to params.
func (w *ServerInterfaceWrapper) GetProblem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "problem_id" -------------
	var problemId ProblemID

	err = runtime.BindStyledParameterWithLocation("simple", false, "problem_id", runtime.ParamLocationPath, ctx.Param("problem_id"), &problemId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter problem_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProblem(ctx, problemId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/problems", wrapper.CreateProblem)
	router.GET(baseURL+"/problems/:problem_id", wrapper.GetProblem)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RW327bNhd/FYL5LlXbSZtvq+/WeCg8rEDQ7q4NVsaiY2UWqVJ0ViPw4GUaYNTd2g5x",
	"qqZ24KIJggAZ4HTqkIs8UXn8DgMlxVZspfWQ7WIGDJESz9/f7/CcTVzitsMZZdLF+U0sqOtw5tJwc4uY",
	"d+mjGnWl3pU4k5SFS+I4VatEpMVZdt3lTL9zSxVqE71yBHeokFakxKauS9aoXprULQnL0WI4j8HfVwc+",
	"Ukfb0O7CYRMbmD4mtlOlOI8fWuZDVLZo1USWiwR9VLMENbGBZd3R310pLLaGG/pnTCre3YZ3v6Oh34F2",
	"D3oBAv9YDbbVQQCHTQSdJ/DkvWq3VHs/gxsGXhKUSLos+GqV2nfj+K8QsGVOx1osIF5GskKRE9m5EOz8",
	"wvUbi///7PObudkCVMen0O8i+KkH3gmKwg3j9E4+/PEe+j9C90y96SLov4CWr5778LI1jhlNiL/y1Nun",
	"aPjaQ3DY/HDaQmrgD1/5avAaes3zw8WCVhht1MEZgjeD4e7TYaePoOUj2GtdzOltKq+S0P8JWsZ5PJcd",
	"kzMbfXWzsV78kbyEvsHL53FChjsT3hWZpIKR6j0qNqj4UgguUujpddU7D6mtQP3ZRBFZYe/nhJpvOL9D",
	"WD0uETdFxQgZ5bXUcYDU4a8JHGCvD+1umHnV3tdLaHfVM2/YCeDtGXinsLudwTrMOHZt4Tz8KWNx8OqX",
	"AfSCoTdI+GpMMDSBQ7qOrQB2j8YK0B0ivjP59+y8pmJ67b0A70TTayeYoECS3XNzMW8esAfsEgvTvDdS",
	"6ygSh56PigV0QXy2ajJwlbC1Wup9FLs2/K0JvSBEY+sYdo9Cju+cwk5wiT2nLiucpVSugUf3Vv6+Didh",
	"3RiBsDIS5KvrtCS1kzHIBatctkq1qqx/LBNqqwu9QD3zEoDNox/QfC4XhtAL9Cnod6Dlp4ewmBv5wGr2",
	"KhUJH4qFfwOFWPnX/xQYrGbrHI+gWCcbJH5EWnXC9d9xsIHXeCLrsVMGfnxNq7m2QQQjti6U+3j5XN9X",
	"kT79uHeub0n/l5exgW9zvBJeRxYr8+lYlrhJlzhjtCTRF8tFnQ9LhklKfMEG3qDCjSRymflMTueJO5QR",
	"x8J5fD2Ty+hUOkRWwiLOxp0k3Dg86tG6ysNLtWhq9cnOhiM6Ulfe4mb9Cv3NvMDKGa7qBI0nCnAG4RFF",
	"JuspUUoJjyIcxuekqNHwRWKsWcgtXGZ8dC6bPhU0DHwjl/u0dGJy0iILNz8tMtlNGgZenMVUWjMLe0bN",
	"tomoT44L0PPiiWHYORo1s4Yx5lN2M159a5kNbX+NpnBr3OFDUgpiU0mFrppLSrlYwLpA9IVJZAUbWFeZ",
	"3o2M4UngjL83EhQLuNFYmQJ7hhymjCv/YaST81kCYn0ylIxAqokqzuOKlI6bz2aJY2VK3KSl6DbKWBw3",
	"Vhp/BQAA//+cA0dOHgwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
