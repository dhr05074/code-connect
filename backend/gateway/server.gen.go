// Package gateway provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package gateway

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Difficulty 문제의 난이도입니다.
// 1부터 100까지의 정수로 입력합니다.
type Difficulty = int

// EstimatedTime 초보 프로그래머 기준 문제 풀이 예상 소요 시간입니다. 분 단위로 입력합니다.
//
// 입력하지 않을 경우 기본값으로 30분이 설정됩니다.
type EstimatedTime = int

// Problem 사용자가 입력한 `language`와 `estimated_time`에 따라 자동으로 생성된 문제입니다.
type Problem struct {
	// Background 문제의 배경 설명입니다.
	// 사용자가 문제를 이해하는 데 도움이 되는 정보를 제공합니다.
	Background string `json:"background"`

	// Code 생성된 코드입니다. Base64로 인코딩되어 있으니, 화면에 출력하기 위해 디코딩이 필요합니다.
	Code string `json:"code"`

	// Difficulty 문제의 난이도입니다.
	// 1부터 100까지의 정수로 입력합니다.
	Difficulty Difficulty `json:"difficulty"`

	// EstimatedTime 초보 프로그래머 기준 문제 풀이 예상 소요 시간입니다. 분 단위로 입력합니다.
	//
	// 입력하지 않을 경우 기본값으로 30분이 설정됩니다.
	EstimatedTime EstimatedTime `json:"estimated_time"`

	// ProblemId ID of the problem.
	ProblemId ProblemId `json:"problem_id"`

	// Title 문제의 제목입니다.
	// 사용자가 문제를 이해하는 데 도움이 되는 정보를 제공합니다.
	Title string `json:"title"`
}

// ProblemId ID of the problem.
type ProblemId = string

// RequestId This ID is given upon request. This ID allows the requested resource to be returned.
type RequestId = string

// CreateProblemJSONBody defines parameters for CreateProblem.
type CreateProblemJSONBody struct {
	// Difficulty 문제의 난이도입니다.
	// 1부터 100까지의 정수로 입력합니다.
	Difficulty *Difficulty `json:"difficulty,omitempty"`

	// Language 문제 출제 시 사용할 프로그래밍 언어입니다.
	Language string `json:"language"`
}

// SubmitSolutionJSONBody defines parameters for SubmitSolution.
type SubmitSolutionJSONBody struct {
	// Code 문제 풀이에 사용할 코드입니다.
	// 코드는 Base64로 인코딩되어야 합니다.
	Code string `json:"code"`
}

// CreateProblemJSONRequestBody defines body for CreateProblem for application/json ContentType.
type CreateProblemJSONRequestBody CreateProblemJSONBody

// SubmitSolutionJSONRequestBody defines body for SubmitSolution for application/json ContentType.
type SubmitSolutionJSONRequestBody SubmitSolutionJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 문제를 만듭니다.
	// (POST /problems)
	CreateProblem(ctx echo.Context) error
	// 문제를 조회합니다.
	// (GET /problems/{request_id})
	GetProblem(ctx echo.Context, requestId RequestId) error
	// 문제 풀이를 제출합니다.
	// (POST /submit/{request_id})
	SubmitSolution(ctx echo.Context, requestId RequestId) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateProblem converts echo context to params.
func (w *ServerInterfaceWrapper) CreateProblem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateProblem(ctx)
	return err
}

// GetProblem converts echo context to params.
func (w *ServerInterfaceWrapper) GetProblem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "request_id" -------------
	var requestId RequestId

	err = runtime.BindStyledParameterWithLocation("simple", false, "request_id", runtime.ParamLocationPath, ctx.Param("request_id"), &requestId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter request_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProblem(ctx, requestId)
	return err
}

// SubmitSolution converts echo context to params.
func (w *ServerInterfaceWrapper) SubmitSolution(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "request_id" -------------
	var requestId RequestId

	err = runtime.BindStyledParameterWithLocation("simple", false, "request_id", runtime.ParamLocationPath, ctx.Param("request_id"), &requestId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter request_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SubmitSolution(ctx, requestId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/problems", wrapper.CreateProblem)
	router.GET(baseURL+"/problems/:request_id", wrapper.GetProblem)
	router.POST(baseURL+"/submit/:request_id", wrapper.SubmitSolution)

}

type CreateProblemRequestObject struct {
	Body *CreateProblemJSONRequestBody
}

type CreateProblemResponseObject interface {
	VisitCreateProblemResponse(w http.ResponseWriter) error
}

type CreateProblem202JSONResponse struct {
	// RequestId This ID is given upon request. This ID allows the requested resource to be returned.
	RequestId RequestId `json:"request_id"`
}

func (response CreateProblem202JSONResponse) VisitCreateProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type CreateProblem400JSONResponse struct {
	// Message Error message
	Message string `json:"message"`
}

func (response CreateProblem400JSONResponse) VisitCreateProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateProblemdefaultResponse struct {
	StatusCode int
}

func (response CreateProblemdefaultResponse) VisitCreateProblemResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GetProblemRequestObject struct {
	RequestId RequestId `json:"request_id"`
}

type GetProblemResponseObject interface {
	VisitGetProblemResponse(w http.ResponseWriter) error
}

type GetProblem200JSONResponse struct {
	// Problem 사용자가 입력한 `language`와 `estimated_time`에 따라 자동으로 생성된 문제입니다.
	Problem Problem `json:"problem"`
}

func (response GetProblem200JSONResponse) VisitGetProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProblem404JSONResponse struct {
	// Message Error message
	Message string `json:"message"`
}

func (response GetProblem404JSONResponse) VisitGetProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type SubmitSolutionRequestObject struct {
	RequestId RequestId `json:"request_id"`
	Body      *SubmitSolutionJSONRequestBody
}

type SubmitSolutionResponseObject interface {
	VisitSubmitSolutionResponse(w http.ResponseWriter) error
}

type SubmitSolution200JSONResponse struct {
	// Score Score of the solution out of 100.
	Score string `json:"score"`
}

func (response SubmitSolution200JSONResponse) VisitSubmitSolutionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SubmitSolutiondefaultResponse struct {
	StatusCode int
}

func (response SubmitSolutiondefaultResponse) VisitSubmitSolutionResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// 문제를 만듭니다.
	// (POST /problems)
	CreateProblem(ctx context.Context, request CreateProblemRequestObject) (CreateProblemResponseObject, error)
	// 문제를 조회합니다.
	// (GET /problems/{request_id})
	GetProblem(ctx context.Context, request GetProblemRequestObject) (GetProblemResponseObject, error)
	// 문제 풀이를 제출합니다.
	// (POST /submit/{request_id})
	SubmitSolution(ctx context.Context, request SubmitSolutionRequestObject) (SubmitSolutionResponseObject, error)
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// CreateProblem operation middleware
func (sh *strictHandler) CreateProblem(ctx echo.Context) error {
	var request CreateProblemRequestObject

	var body CreateProblemJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProblem(ctx.Request().Context(), request.(CreateProblemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProblem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateProblemResponseObject); ok {
		return validResponse.VisitCreateProblemResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetProblem operation middleware
func (sh *strictHandler) GetProblem(ctx echo.Context, requestId RequestId) error {
	var request GetProblemRequestObject

	request.RequestId = requestId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProblem(ctx.Request().Context(), request.(GetProblemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProblem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetProblemResponseObject); ok {
		return validResponse.VisitGetProblemResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// SubmitSolution operation middleware
func (sh *strictHandler) SubmitSolution(ctx echo.Context, requestId RequestId) error {
	var request SubmitSolutionRequestObject

	request.RequestId = requestId

	var body SubmitSolutionJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SubmitSolution(ctx.Request().Context(), request.(SubmitSolutionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SubmitSolution")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SubmitSolutionResponseObject); ok {
		return validResponse.VisitSubmitSolutionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"BlyaW/otAAD//9f6HWC8FAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
