// Package gateway provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package gateway

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Problem This is the problem that is returned.
type Problem struct {
	// Content Content of the problem.
	Content string `json:"content"`

	// ProblemId ID of the problem.
	ProblemId ProblemId `json:"problem_id"`

	// Title Title of the problem.
	Title string `json:"title"`
}

// ProblemId ID of the problem.
type ProblemId = string

// RequestId This ID is given upon request. This ID allows the requested resource to be returned.
type RequestId = string

// EvaluateSolutionJSONBody defines parameters for EvaluateSolution.
type EvaluateSolutionJSONBody struct {
	// After Candidate's solution after the change.
	After string `json:"after"`

	// Before Candidate's solution before the change.
	Before string `json:"before"`

	// ProblemId ID of the problem.
	ProblemId ProblemId `json:"problem_id"`
}

// CreateProblemJSONBody defines parameters for CreateProblem.
type CreateProblemJSONBody struct {
	// Difficulty Difficulty of the problem out of 100.
	Difficulty int `json:"difficulty"`

	// Language Language of the problem.
	Language string `json:"language"`
}

// EvaluateSolutionJSONRequestBody defines body for EvaluateSolution for application/json ContentType.
type EvaluateSolutionJSONRequestBody EvaluateSolutionJSONBody

// CreateProblemJSONRequestBody defines body for CreateProblem for application/json ContentType.
type CreateProblemJSONRequestBody CreateProblemJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Evaluate a candidate's solution.
	// (POST /evaluate)
	EvaluateSolution(ctx echo.Context) error
	// Create a problem.
	// (POST /problems)
	CreateProblem(ctx echo.Context) error
	// Get a problem.
	// (GET /problems/{request_id})
	GetProblem(ctx echo.Context, requestId RequestId) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// EvaluateSolution converts echo context to params.
func (w *ServerInterfaceWrapper) EvaluateSolution(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EvaluateSolution(ctx)
	return err
}

// CreateProblem converts echo context to params.
func (w *ServerInterfaceWrapper) CreateProblem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateProblem(ctx)
	return err
}

// GetProblem converts echo context to params.
func (w *ServerInterfaceWrapper) GetProblem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "request_id" -------------
	var requestId RequestId

	err = runtime.BindStyledParameterWithLocation("simple", false, "request_id", runtime.ParamLocationPath, ctx.Param("request_id"), &requestId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter request_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProblem(ctx, requestId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/evaluate", wrapper.EvaluateSolution)
	router.POST(baseURL+"/problems", wrapper.CreateProblem)
	router.GET(baseURL+"/problems/:request_id", wrapper.GetProblem)

}

type EvaluateSolutionRequestObject struct {
	Body *EvaluateSolutionJSONRequestBody
}

type EvaluateSolutionResponseObject interface {
	VisitEvaluateSolutionResponse(w http.ResponseWriter) error
}

type EvaluateSolution200JSONResponse struct {
	// Score Score of the solution out of 100.
	Score string `json:"score"`
}

func (response EvaluateSolution200JSONResponse) VisitEvaluateSolutionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type EvaluateSolutiondefaultResponse struct {
	StatusCode int
}

func (response EvaluateSolutiondefaultResponse) VisitEvaluateSolutionResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type CreateProblemRequestObject struct {
	Body *CreateProblemJSONRequestBody
}

type CreateProblemResponseObject interface {
	VisitCreateProblemResponse(w http.ResponseWriter) error
}

type CreateProblem202JSONResponse struct {
	// RequestId This ID is given upon request. This ID allows the requested resource to be returned.
	RequestId RequestId `json:"request_id"`
}

func (response CreateProblem202JSONResponse) VisitCreateProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type CreateProblem400JSONResponse struct {
	// Message Error message
	Message string `json:"message"`
}

func (response CreateProblem400JSONResponse) VisitCreateProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateProblemdefaultResponse struct {
	StatusCode int
}

func (response CreateProblemdefaultResponse) VisitCreateProblemResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GetProblemRequestObject struct {
	RequestId RequestId `json:"request_id"`
}

type GetProblemResponseObject interface {
	VisitGetProblemResponse(w http.ResponseWriter) error
}

type GetProblem200JSONResponse struct {
	// Problem This is the problem that is returned.
	Problem Problem `json:"problem"`
}

func (response GetProblem200JSONResponse) VisitGetProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Evaluate a candidate's solution.
	// (POST /evaluate)
	EvaluateSolution(ctx context.Context, request EvaluateSolutionRequestObject) (EvaluateSolutionResponseObject, error)
	// Create a problem.
	// (POST /problems)
	CreateProblem(ctx context.Context, request CreateProblemRequestObject) (CreateProblemResponseObject, error)
	// Get a problem.
	// (GET /problems/{request_id})
	GetProblem(ctx context.Context, request GetProblemRequestObject) (GetProblemResponseObject, error)
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// EvaluateSolution operation middleware
func (sh *strictHandler) EvaluateSolution(ctx echo.Context) error {
	var request EvaluateSolutionRequestObject

	var body EvaluateSolutionJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.EvaluateSolution(ctx.Request().Context(), request.(EvaluateSolutionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EvaluateSolution")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(EvaluateSolutionResponseObject); ok {
		return validResponse.VisitEvaluateSolutionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// CreateProblem operation middleware
func (sh *strictHandler) CreateProblem(ctx echo.Context) error {
	var request CreateProblemRequestObject

	var body CreateProblemJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProblem(ctx.Request().Context(), request.(CreateProblemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProblem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateProblemResponseObject); ok {
		return validResponse.VisitCreateProblemResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetProblem operation middleware
func (sh *strictHandler) GetProblem(ctx echo.Context, requestId RequestId) error {
	var request GetProblemRequestObject

	request.RequestId = requestId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProblem(ctx.Request().Context(), request.(GetProblemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProblem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetProblemResponseObject); ok {
		return validResponse.VisitGetProblemResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xW32/cNgz+VwhtwDbU8F3SARvubWuKIsAeimV7GNpg1Um0rdaWNFFKegjufx/oX7Hv",
	"3Fza5O3OosiP/PiRuhPKNd5ZtJHE5k6QqrCR7U8f3LbGhn9qJBWMj8ZZsRF/VYbAEMQKoTeCWMnI3wLG",
	"FCzqXGTswGOIBlt3ytmINh67e9UdgCumHtkBfpaNr5FtAsqIIOEWt2QidvFkXbtbgkQYCKKD5GsnNZhG",
	"lkjsIO4836YYjC3FPhty+tdoxvF9wEJsxHer+xqs+gKsJpb7TEQTGcdRJfjzVwE/BrXPRMD/kgmoxebd",
	"FOEQNhtrdz3edtuPqOJxSnN8lxcPgvtFnv/6Ui/ViREhxUWnLf2XF8x2aW7QQvLOQn8jh+G4J4eD92eo",
	"ISC5FBQyW1ucdctpWFwqYwu31EIaXzlrUUX47e3lWLnZicjEDQbqbqzzs3zNmTqPVnojNuJlvs7X3LYy",
	"Vm3HrvBG1knGlnjvaKF3X/cWIEFJq42WEX8gIFcntoDtDoz1KUZjy5leuEBWt5+WLubvrWixBcl/L/Uk",
	"1lVvI0aafnd6dyAx6X1tVHt59ZEY66DtXtoTZcoiYlgo6lJCrW0Hu5K2xDlzGguQWv8oM9j+tHlvAaDn",
	"GCS8gC28gLOldtti4QI+EkJn/M0Ynm8sPKTcPqOsL+6xcOe3Y0jYfiDvLHW0nK/XTyCV1GJFr/jzMBTG",
	"krrUjt+z9To/OaA6x8sJLYqDAxgCSkohUZHqXLSmhUz1gqT+tvjZo+JpgSG40AKg1DQy7E4rLm/NB5ro",
	"y8odB3OroCOt3rrwKYMhb6BPpq4pAx+wwIBWIWWtgBlrMPxhSbJdkLf9In0uvWpTFEalOu6O07oYzw4m",
	"/wHHo17O1yOTxkYsMTA7tbRlkuVCA/3Rnzy4WPwuVu2AeriVJolMQn6bVs6fUND5tntI/hPLw2QmR9cL",
	"YuibABS3hLlfmCwNqRT6iDqHf1zitoYS4+G6KIJr+m3aJd7K6OcnDYkGiRZZfs3Kg+F4Su0Hoz9AYbDW",
	"3XOvL8ApqgdXS6X5c1BZnwU7bgyRsWUGrts2t8HZErSMEjgQVJJgi2iB0MYnDZRxEIydPJsgq7t7Yvfs",
	"vMSFGFcog6q6ndT60yN1iYbdPzCunEYwRAk13FZo+56YvxCWxskbjNNZ8my7YvLSf8Tu+9Lie9ROGGRg",
	"CAqXrM4P2HiDcUYFP8eCbDBiILF5d/KBe6QvwW9GHkkyViITVjYMcCLWw9GSTcr06FFw3WaB4WaAmUIt",
	"NqKK0dNmtZLe5My66l6iuXFif73/PwAA//8R2q7VfA0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
