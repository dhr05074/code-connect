// Package gateway provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package gateway

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	ApiKeyScopes = "apiKey.Scopes"
)

// Defines values for ErrorCode.
const (
	InvalidAuthorization ErrorCode = "InvalidAuthorization"
	ProblemNotFound      ErrorCode = "ProblemNotFound"
	ProblemNotReady      ErrorCode = "ProblemNotReady"
	RecordNotFound       ErrorCode = "RecordNotFound"
	ServerError          ErrorCode = "ServerError"
	UserNotFound         ErrorCode = "UserNotFound"
)

// Defines values for ErrorMessage.
const (
	InvalidAuthorizationMessage ErrorMessage = "유효하지 않은 인증 정보입니다."
	ProblemNotFoundMessage      ErrorMessage = "해당 문제를 찾을 수 없습니다."
	ProblemNotReadyMessage      ErrorMessage = "해당 문제는 현재 생성 중입니다."
	RecordNotFoundMessage       ErrorMessage = "해당 레코드를 찾을 수 없습니다."
	ServerErrorMessage          ErrorMessage = "서버 내부 오류가 발생했습니다."
	UserNotFoundMessage         ErrorMessage = "해당 유저를 찾을 수 없습니다."
)

// Defines values for ProgrammingLanguage.
const (
	Cpp        ProgrammingLanguage = "Cpp"
	Go         ProgrammingLanguage = "Go"
	Javascript ProgrammingLanguage = "Javascript"
)

// Code Developic에서 사용되는 코드 데이터입니다.
// 코드 데이터의 Escape를 방지하기 위해 Base64로 인코딩되어 전송, 보관됩니다.
type Code = string

// ELOScore Developic에서 유저의 실력을 가늠하는 ELO 점수입니다.
type ELOScore = int32

// Error defines model for Error.
type Error struct {
	// Code Developic에서 사용되는 오류 코드입니다.
	Code ErrorCode `json:"code"`

	// Message Developic에서 사용되는 오류 메시지입니다.
	Message ErrorMessage `json:"message"`
}

// ErrorCode Developic에서 사용되는 오류 코드입니다.
type ErrorCode string

// ErrorMessage Developic에서 사용되는 오류 메시지입니다.
type ErrorMessage string

// Nickname Developic에서 사용되는 유저의 이름입니다.
type Nickname = string

// Problem defines model for Problem.
type Problem struct {
	// Code Developic에서 사용되는 코드 데이터입니다.
	// 코드 데이터의 Escape를 방지하기 위해 Base64로 인코딩되어 전송, 보관됩니다.
	Code Code `json:"code"`

	// Description 문제의 자세한 설명입니다.
	Description string `json:"description"`

	// Id Developic에서 출제한 문제의 고유 ID입니다.
	Id ProblemID `json:"id"`

	// Title Developic에서 출제한 문제의 타이틀입니다.
	Title ProblemTitle `json:"title"`
}

// ProblemID Developic에서 출제한 문제의 고유 ID입니다.
type ProblemID = string

// ProblemTitle Developic에서 출제한 문제의 타이틀입니다.
type ProblemTitle = string

// ProgrammingLanguage Developic에서 사용할 프로그래밍 언어입니다.
type ProgrammingLanguage string

// Record defines model for Record.
type Record struct {
	// Code Developic에서 사용되는 코드 데이터입니다.
	// 코드 데이터의 Escape를 방지하기 위해 Base64로 인코딩되어 전송, 보관됩니다.
	Code Code `json:"code"`

	// Efficiency 결과 보고서에서 사용자가 취득한 총점입니다.
	Efficiency Score `json:"efficiency"`

	// Id Developic에서 생성된 결과 보고서의 고유 ID입니다.
	Id RecordID `json:"id"`

	// ProblemId Developic에서 출제한 문제의 고유 ID입니다.
	ProblemId ProblemID `json:"problem_id"`

	// ProblemTitle Developic에서 출제한 문제의 타이틀입니다.
	ProblemTitle ProblemTitle `json:"problem_title"`

	// Readability 결과 보고서에서 사용자가 취득한 총점입니다.
	Readability Score `json:"readability"`

	// Robustness 결과 보고서에서 사용자가 취득한 총점입니다.
	Robustness Score `json:"robustness"`
}

// RecordID Developic에서 생성된 결과 보고서의 고유 ID입니다.
type RecordID = string

// Score 결과 보고서에서 사용자가 취득한 총점입니다.
type Score = int32

// N200GetProblem defines model for 200GetProblem.
type N200GetProblem = Problem

// N200GetRecord defines model for 200GetRecord.
type N200GetRecord = Record

// N200GetRecords defines model for 200GetRecords.
type N200GetRecords struct {
	Records []Record `json:"records"`
}

// N202Submit defines model for 202Submit.
type N202Submit struct {
	// RecordId Developic에서 생성된 결과 보고서의 고유 ID입니다.
	RecordId RecordID `json:"record_id"`
}

// InternalServerError defines model for InternalServerError.
type InternalServerError = Error

// SubmitCode defines model for SubmitCode.
type SubmitCode struct {
	// Code Developic에서 사용되는 코드 데이터입니다.
	// 코드 데이터의 Escape를 방지하기 위해 Base64로 인코딩되어 전송, 보관됩니다.
	Code Code `json:"code"`

	// ProblemId Developic에서 출제한 문제의 고유 ID입니다.
	ProblemId ProblemID `json:"problem_id"`
}

// RequestProblemJSONBody defines parameters for RequestProblem.
type RequestProblemJSONBody struct {
	// EloScore Developic에서 유저의 실력을 가늠하는 ELO 점수입니다.
	EloScore *ELOScore `json:"elo_score,omitempty"`

	// Language Developic에서 사용할 프로그래밍 언어입니다.
	Language ProgrammingLanguage `json:"language"`
}

// GetRecordsParams defines parameters for GetRecords.
type GetRecordsParams struct {
	// Page 조회할 페이지입니다.
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// Limit 한 페이지당 조회할 아이템의 수입니다.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// SubmitSolutionJSONBody defines parameters for SubmitSolution.
type SubmitSolutionJSONBody struct {
	// Code Developic에서 사용되는 코드 데이터입니다.
	// 코드 데이터의 Escape를 방지하기 위해 Base64로 인코딩되어 전송, 보관됩니다.
	Code Code `json:"code"`

	// ProblemId Developic에서 출제한 문제의 고유 ID입니다.
	ProblemId ProblemID `json:"problem_id"`
}

// RequestProblemJSONRequestBody defines body for RequestProblem for application/json ContentType.
type RequestProblemJSONRequestBody RequestProblemJSONBody

// SubmitSolutionJSONRequestBody defines body for SubmitSolution for application/json ContentType.
type SubmitSolutionJSONRequestBody SubmitSolutionJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /me)
	GetMe(ctx echo.Context) error

	// (POST /problems)
	RequestProblem(ctx echo.Context) error

	// (GET /problems/{id})
	GetProblem(ctx echo.Context, id ProblemID) error

	// (GET /records)
	GetRecords(ctx echo.Context, params GetRecordsParams) error

	// (GET /records/{id})
	GetRecord(ctx echo.Context, id RecordID) error

	// (POST /submit)
	SubmitSolution(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetMe converts echo context to params.
func (w *ServerInterfaceWrapper) GetMe(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMe(ctx)
	return err
}

// RequestProblem converts echo context to params.
func (w *ServerInterfaceWrapper) RequestProblem(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RequestProblem(ctx)
	return err
}

// GetProblem converts echo context to params.
func (w *ServerInterfaceWrapper) GetProblem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id ProblemID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProblem(ctx, id)
	return err
}

// GetRecords converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecords(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecordsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecords(ctx, params)
	return err
}

// GetRecord converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecord(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id RecordID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecord(ctx, id)
	return err
}

// SubmitSolution converts echo context to params.
func (w *ServerInterfaceWrapper) SubmitSolution(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SubmitSolution(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/me", wrapper.GetMe)
	router.POST(baseURL+"/problems", wrapper.RequestProblem)
	router.GET(baseURL+"/problems/:id", wrapper.GetProblem)
	router.GET(baseURL+"/records", wrapper.GetRecords)
	router.GET(baseURL+"/records/:id", wrapper.GetRecord)
	router.POST(baseURL+"/submit", wrapper.SubmitSolution)

}

type N200GetProblemJSONResponse Problem

type N200GetRecordJSONResponse Record

type N200GetRecordsJSONResponse struct {
	Records []Record `json:"records"`
}

type N202SubmitJSONResponse struct {
	// RecordId Developic에서 생성된 결과 보고서의 고유 ID입니다.
	RecordId RecordID `json:"record_id"`
}

type InternalServerErrorJSONResponse Error

type GetMeRequestObject struct {
}

type GetMeResponseObject interface {
	VisitGetMeResponse(w http.ResponseWriter) error
}

type GetMe200JSONResponse struct {
	// EloScore Developic에서 유저의 실력을 가늠하는 ELO 점수입니다.
	EloScore ELOScore `json:"elo_score"`

	// Nickname Developic에서 사용되는 유저의 이름입니다.
	Nickname Nickname `json:"nickname"`
}

func (response GetMe200JSONResponse) VisitGetMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMe401JSONResponse Error

func (response GetMe401JSONResponse) VisitGetMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetMe404JSONResponse Error

func (response GetMe404JSONResponse) VisitGetMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetMedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetMedefaultJSONResponse) VisitGetMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RequestProblemRequestObject struct {
	Body *RequestProblemJSONRequestBody
}

type RequestProblemResponseObject interface {
	VisitRequestProblemResponse(w http.ResponseWriter) error
}

type RequestProblem202JSONResponse struct {
	// ProblemId Developic에서 출제한 문제의 고유 ID입니다.
	ProblemId ProblemID `json:"problem_id"`
}

func (response RequestProblem202JSONResponse) VisitRequestProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type RequestProblemdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response RequestProblemdefaultJSONResponse) VisitRequestProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetProblemRequestObject struct {
	Id ProblemID `json:"id"`
}

type GetProblemResponseObject interface {
	VisitGetProblemResponse(w http.ResponseWriter) error
}

type GetProblem200JSONResponse struct{ N200GetProblemJSONResponse }

func (response GetProblem200JSONResponse) VisitGetProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProblem404JSONResponse Error

func (response GetProblem404JSONResponse) VisitGetProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetProblem409JSONResponse Error

func (response GetProblem409JSONResponse) VisitGetProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type GetProblemdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetProblemdefaultJSONResponse) VisitGetProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetRecordsRequestObject struct {
	Params GetRecordsParams
}

type GetRecordsResponseObject interface {
	VisitGetRecordsResponse(w http.ResponseWriter) error
}

type GetRecords200JSONResponse struct{ N200GetRecordsJSONResponse }

func (response GetRecords200JSONResponse) VisitGetRecordsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRecordsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetRecordsdefaultJSONResponse) VisitGetRecordsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetRecordRequestObject struct {
	Id RecordID `json:"id"`
}

type GetRecordResponseObject interface {
	VisitGetRecordResponse(w http.ResponseWriter) error
}

type GetRecord200JSONResponse struct{ N200GetRecordJSONResponse }

func (response GetRecord200JSONResponse) VisitGetRecordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRecord404Response struct {
}

func (response GetRecord404Response) VisitGetRecordResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetRecord409Response struct {
}

func (response GetRecord409Response) VisitGetRecordResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

type GetRecorddefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetRecorddefaultJSONResponse) VisitGetRecordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SubmitSolutionRequestObject struct {
	Body *SubmitSolutionJSONRequestBody
}

type SubmitSolutionResponseObject interface {
	VisitSubmitSolutionResponse(w http.ResponseWriter) error
}

type SubmitSolution202JSONResponse struct{ N202SubmitJSONResponse }

func (response SubmitSolution202JSONResponse) VisitSubmitSolutionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type SubmitSolution404JSONResponse Error

func (response SubmitSolution404JSONResponse) VisitSubmitSolutionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type SubmitSolutiondefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response SubmitSolutiondefaultJSONResponse) VisitSubmitSolutionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /me)
	GetMe(ctx context.Context, request GetMeRequestObject) (GetMeResponseObject, error)

	// (POST /problems)
	RequestProblem(ctx context.Context, request RequestProblemRequestObject) (RequestProblemResponseObject, error)

	// (GET /problems/{id})
	GetProblem(ctx context.Context, request GetProblemRequestObject) (GetProblemResponseObject, error)

	// (GET /records)
	GetRecords(ctx context.Context, request GetRecordsRequestObject) (GetRecordsResponseObject, error)

	// (GET /records/{id})
	GetRecord(ctx context.Context, request GetRecordRequestObject) (GetRecordResponseObject, error)

	// (POST /submit)
	SubmitSolution(ctx context.Context, request SubmitSolutionRequestObject) (SubmitSolutionResponseObject, error)
}

type StrictHandlerFunc = runtime.StrictEchoHandlerFunc
type StrictMiddlewareFunc = runtime.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetMe operation middleware
func (sh *strictHandler) GetMe(ctx echo.Context) error {
	var request GetMeRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetMe(ctx.Request().Context(), request.(GetMeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMe")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetMeResponseObject); ok {
		return validResponse.VisitGetMeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// RequestProblem operation middleware
func (sh *strictHandler) RequestProblem(ctx echo.Context) error {
	var request RequestProblemRequestObject

	var body RequestProblemJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RequestProblem(ctx.Request().Context(), request.(RequestProblemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RequestProblem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RequestProblemResponseObject); ok {
		return validResponse.VisitRequestProblemResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetProblem operation middleware
func (sh *strictHandler) GetProblem(ctx echo.Context, id ProblemID) error {
	var request GetProblemRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProblem(ctx.Request().Context(), request.(GetProblemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProblem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetProblemResponseObject); ok {
		return validResponse.VisitGetProblemResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetRecords operation middleware
func (sh *strictHandler) GetRecords(ctx echo.Context, params GetRecordsParams) error {
	var request GetRecordsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRecords(ctx.Request().Context(), request.(GetRecordsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRecords")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetRecordsResponseObject); ok {
		return validResponse.VisitGetRecordsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetRecord operation middleware
func (sh *strictHandler) GetRecord(ctx echo.Context, id RecordID) error {
	var request GetRecordRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRecord(ctx.Request().Context(), request.(GetRecordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRecord")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetRecordResponseObject); ok {
		return validResponse.VisitGetRecordResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// SubmitSolution operation middleware
func (sh *strictHandler) SubmitSolution(ctx echo.Context) error {
	var request SubmitSolutionRequestObject

	var body SubmitSolutionJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SubmitSolution(ctx.Request().Context(), request.(SubmitSolutionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SubmitSolution")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SubmitSolutionResponseObject); ok {
		return validResponse.VisitSubmitSolutionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"mbw/c5m5r4Lycvm/AQAA//8I2r9U1yQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
