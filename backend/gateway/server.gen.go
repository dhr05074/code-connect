// Package gateway provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package gateway

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Problem This is the problem that is returned.
type Problem struct {
	// Content Content of the problem.
	Content string `json:"content"`

	// ProblemId ID of the problem.
	ProblemId ProblemId `json:"problem_id"`

	// Title Title of the problem.
	Title string `json:"title"`
}

// ProblemId ID of the problem.
type ProblemId = string

// RequestId This ID is given upon request. This ID allows the requested resource to be returned.
type RequestId = string

// CreateProblemJSONBody defines parameters for CreateProblem.
type CreateProblemJSONBody struct {
	// Requirements Requirements for the problem.
	Requirements string `json:"requirements"`

	// TimeLimit Time limit for the problem.
	// You can specify the time limit in the following format.
	// - `1h` : 1 hour
	// - `1d` : 1 day
	// - `1w` : 1 week
	TimeLimit string `json:"time_limit"`
}

// CreateProblemJSONRequestBody defines body for CreateProblem for application/json ContentType.
type CreateProblemJSONRequestBody CreateProblemJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a problem.
	// (POST /problems)
	CreateProblem(ctx echo.Context) error
	// Get a problem.
	// (GET /problems/{request_id})
	GetProblem(ctx echo.Context, requestId RequestId) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateProblem converts echo context to params.
func (w *ServerInterfaceWrapper) CreateProblem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateProblem(ctx)
	return err
}

// GetProblem converts echo context to params.
func (w *ServerInterfaceWrapper) GetProblem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "request_id" -------------
	var requestId RequestId

	err = runtime.BindStyledParameterWithLocation("simple", false, "request_id", runtime.ParamLocationPath, ctx.Param("request_id"), &requestId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter request_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProblem(ctx, requestId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/problems", wrapper.CreateProblem)
	router.GET(baseURL+"/problems/:request_id", wrapper.GetProblem)

}

type CreateProblemRequestObject struct {
	Body *CreateProblemJSONRequestBody
}

type CreateProblemResponseObject interface {
	VisitCreateProblemResponse(w http.ResponseWriter) error
}

type CreateProblem202JSONResponse struct {
	// RequestId This ID is given upon request. This ID allows the requested resource to be returned.
	RequestId RequestId `json:"request_id"`
}

func (response CreateProblem202JSONResponse) VisitCreateProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type CreateProblem400JSONResponse struct {
	// Message Error message
	Message string `json:"message"`
}

func (response CreateProblem400JSONResponse) VisitCreateProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateProblemdefaultResponse struct {
	StatusCode int
}

func (response CreateProblemdefaultResponse) VisitCreateProblemResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GetProblemRequestObject struct {
	RequestId RequestId `json:"request_id"`
}

type GetProblemResponseObject interface {
	VisitGetProblemResponse(w http.ResponseWriter) error
}

type GetProblem200JSONResponse struct {
	// Problem This is the problem that is returned.
	Problem Problem `json:"problem"`
}

func (response GetProblem200JSONResponse) VisitGetProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Create a problem.
	// (POST /problems)
	CreateProblem(ctx context.Context, request CreateProblemRequestObject) (CreateProblemResponseObject, error)
	// Get a problem.
	// (GET /problems/{request_id})
	GetProblem(ctx context.Context, request GetProblemRequestObject) (GetProblemResponseObject, error)
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// CreateProblem operation middleware
func (sh *strictHandler) CreateProblem(ctx echo.Context) error {
	var request CreateProblemRequestObject

	var body CreateProblemJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProblem(ctx.Request().Context(), request.(CreateProblemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProblem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateProblemResponseObject); ok {
		return validResponse.VisitCreateProblemResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetProblem operation middleware
func (sh *strictHandler) GetProblem(ctx echo.Context, requestId RequestId) error {
	var request GetProblemRequestObject

	request.RequestId = requestId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProblem(ctx.Request().Context(), request.(GetProblemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProblem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetProblemResponseObject); ok {
		return validResponse.VisitGetProblemResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RWUW/bNhD+Kwduj5rspAM26G1rhsJvRbc9DE3Q0ORJYiORHHmKawT+78NRki3Fap0h",
	"6JvF4x2/u+++Oz8J5VrvLFqKongSUdXYyvTTB7dtsOWfGqMKxpNxVhTir9pEMBGoRhguAdWS+CwgdcGi",
	"zkXGATwGMpjCKWcJLZ2He9sbwJXTiBwAv8jWN8h3AkpCkLDDbTSE/XuyadwuQhcxRCAHnW+c1GBaWWHk",
	"ALT37B0pGFuJQzbm9MloxvFjwFIU4ofVqQaroQCryc1DJsgQ4zirBB//L+DnoA6ZCPhvZwJqUXycIhyf",
	"zY61uzt6u+1nVHSe0hzf5uab4H6R17++0Ut1YkQYaTFoon9zw2xX5hEtdN5ZGDxyGM0DOfz4YEMNAaPr",
	"gkJma4uzbrkMi0tlbOmWWkjjW2ctKoLf3m+OlZtZRCYeMcTeY51f5WvO1Hm00htRiDf5Ol9z20qqU8eO",
	"PdCrwcWl3h3pTQkaZ2G7B2N9R2RsBTsXHjIY6YX4YJomZuADlhjQKowZSKsBv3gMhg/yWysSqCA53EYf",
	"H3k/yPFIzu9O758JS3rfGJU8V58jIxwVPQh6oscBVTsqf57Yh4kVShe+vzTJtPipMa2hJZ21CMl2huXW",
	"/uM6UNJC9KhMuU9WOjkYm05Kx4iYlNKFVlJ+a3+C+6v6Hgq4gtp1oT/Q/YGW+/5713/vEB8SNafEr/RF",
	"Mc9qPEvxXMlzXwodpoPonY09Y9fr61fyfZL0t0bf5OZSQoPpLiGe8zT0KCjuCXOaCjwrpFLoCXUOI2EV",
	"0myHbG6gDK4dRkafeM6t8fN6/YrEW4xRVgvT+48QXIDRPKX23uh7KA02ut9pQwEu0T2GWirNh3EIDFlw",
	"4NbEaGyVwdDTu+BsBVqSBH4Iahlhi2ghoqVUCY2l7JoFhfxteYYonrHIaSVssWtbGfZTkR4lzPbjgFs9",
	"nYg9cPAKF974E2VQdUKaCEZ9pK7jPKazHpTTCCbGDjXsarRDTwy3Tuo9m3bvkKajbtb/r2mDyd+ZF+z9",
	"r+3lrwh3WQaGR2dndf6MjXdIMyp45wTZImGIovh4cYuf6UvwYhRFWl0iE1a2DHAi1uejJZuU6cWj4C5l",
	"geFxhNmFRhSiJvKxWK2kNzmzrvp1mxsnDneH/wIAAP//8WyYemEKAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
