// Package gateway provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package gateway

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Difficulty 문제의 난이도입니다.
// 1부터 100까지의 정수로 입력합니다.
type Difficulty = int

// EstimatedTime 초보 프로그래머 기준 문제 풀이 예상 소요 시간입니다. 분 단위로 입력합니다.
//
// 입력하지 않을 경우 기본값으로 30분이 설정됩니다.
type EstimatedTime = int

// Problem 사용자가 입력한 `language`와 `estimated_time`에 따라 자동으로 생성된 문제입니다.
type Problem struct {
	// Background 문제의 배경 설명입니다.
	// 사용자가 문제를 이해하는 데 도움이 되는 정보를 제공합니다.
	Background string `json:"background"`

	// Code 생성된 코드입니다. Base64로 인코딩되어 있으니, 화면에 출력하기 위해 디코딩이 필요합니다.
	Code string `json:"code"`

	// Difficulty 문제의 난이도입니다.
	// 1부터 100까지의 정수로 입력합니다.
	Difficulty Difficulty `json:"difficulty"`

	// EstimatedTime 초보 프로그래머 기준 문제 풀이 예상 소요 시간입니다. 분 단위로 입력합니다.
	//
	// 입력하지 않을 경우 기본값으로 30분이 설정됩니다.
	EstimatedTime EstimatedTime `json:"estimated_time"`

	// ProblemId ID of the problem.
	ProblemId ProblemId `json:"problem_id"`

	// Title 문제의 제목입니다.
	// 사용자가 문제를 이해하는 데 도움이 되는 정보를 제공합니다.
	Title string `json:"title"`
}

// ProblemId ID of the problem.
type ProblemId = string

// RequestId This ID is given upon request. This ID allows the requested resource to be returned.
type RequestId = string

// CreateProblemJSONBody defines parameters for CreateProblem.
type CreateProblemJSONBody struct {
	// Difficulty 문제의 난이도입니다.
	// 1부터 100까지의 정수로 입력합니다.
	Difficulty *Difficulty `json:"difficulty,omitempty"`

	// Language 문제 출제 시 사용할 프로그래밍 언어입니다.
	Language string `json:"language"`
}

// SubmitSolutionJSONBody defines parameters for SubmitSolution.
type SubmitSolutionJSONBody struct {
	// Code 문제 풀이에 사용할 코드입니다.
	// 코드는 Base64로 인코딩되어야 합니다.
	Code string `json:"code"`
}

// CreateProblemJSONRequestBody defines body for CreateProblem for application/json ContentType.
type CreateProblemJSONRequestBody CreateProblemJSONBody

// SubmitSolutionJSONRequestBody defines body for SubmitSolution for application/json ContentType.
type SubmitSolutionJSONRequestBody SubmitSolutionJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 문제를 만듭니다.
	// (POST /problems)
	CreateProblem(ctx echo.Context) error
	// 문제를 조회합니다.
	// (GET /problems/{request_id})
	GetProblem(ctx echo.Context, requestId RequestId) error
	// 문제 풀이를 제출합니다.
	// (POST /submit/{request_id})
	SubmitSolution(ctx echo.Context, requestId RequestId) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateProblem converts echo context to params.
func (w *ServerInterfaceWrapper) CreateProblem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateProblem(ctx)
	return err
}

// GetProblem converts echo context to params.
func (w *ServerInterfaceWrapper) GetProblem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "request_id" -------------
	var requestId RequestId

	err = runtime.BindStyledParameterWithLocation("simple", false, "request_id", runtime.ParamLocationPath, ctx.Param("request_id"), &requestId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter request_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProblem(ctx, requestId)
	return err
}

// SubmitSolution converts echo context to params.
func (w *ServerInterfaceWrapper) SubmitSolution(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "request_id" -------------
	var requestId RequestId

	err = runtime.BindStyledParameterWithLocation("simple", false, "request_id", runtime.ParamLocationPath, ctx.Param("request_id"), &requestId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter request_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SubmitSolution(ctx, requestId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/problems", wrapper.CreateProblem)
	router.GET(baseURL+"/problems/:request_id", wrapper.GetProblem)
	router.POST(baseURL+"/submit/:request_id", wrapper.SubmitSolution)

}

type CreateProblemRequestObject struct {
	Body *CreateProblemJSONRequestBody
}

type CreateProblemResponseObject interface {
	VisitCreateProblemResponse(w http.ResponseWriter) error
}

type CreateProblem202JSONResponse struct {
	// RequestId This ID is given upon request. This ID allows the requested resource to be returned.
	RequestId RequestId `json:"request_id"`
}

func (response CreateProblem202JSONResponse) VisitCreateProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type CreateProblem400JSONResponse struct {
	// Message Error message
	Message string `json:"message"`
}

func (response CreateProblem400JSONResponse) VisitCreateProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateProblemdefaultResponse struct {
	StatusCode int
}

func (response CreateProblemdefaultResponse) VisitCreateProblemResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GetProblemRequestObject struct {
	RequestId RequestId `json:"request_id"`
}

type GetProblemResponseObject interface {
	VisitGetProblemResponse(w http.ResponseWriter) error
}

type GetProblem200JSONResponse struct {
	// Problem 사용자가 입력한 `language`와 `estimated_time`에 따라 자동으로 생성된 문제입니다.
	Problem Problem `json:"problem"`
}

func (response GetProblem200JSONResponse) VisitGetProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProblem404JSONResponse struct {
	// Message Error message
	Message string `json:"message"`
}

func (response GetProblem404JSONResponse) VisitGetProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type SubmitSolutionRequestObject struct {
	RequestId RequestId `json:"request_id"`
	Body      *SubmitSolutionJSONRequestBody
}

type SubmitSolutionResponseObject interface {
	VisitSubmitSolutionResponse(w http.ResponseWriter) error
}

type SubmitSolution200JSONResponse struct {
	// SubmissionId Submission ID
	SubmissionId string `json:"submission_id"`
}

func (response SubmitSolution200JSONResponse) VisitSubmitSolutionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SubmitSolutiondefaultResponse struct {
	StatusCode int
}

func (response SubmitSolutiondefaultResponse) VisitSubmitSolutionResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// 문제를 만듭니다.
	// (POST /problems)
	CreateProblem(ctx context.Context, request CreateProblemRequestObject) (CreateProblemResponseObject, error)
	// 문제를 조회합니다.
	// (GET /problems/{request_id})
	GetProblem(ctx context.Context, request GetProblemRequestObject) (GetProblemResponseObject, error)
	// 문제 풀이를 제출합니다.
	// (POST /submit/{request_id})
	SubmitSolution(ctx context.Context, request SubmitSolutionRequestObject) (SubmitSolutionResponseObject, error)
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// CreateProblem operation middleware
func (sh *strictHandler) CreateProblem(ctx echo.Context) error {
	var request CreateProblemRequestObject

	var body CreateProblemJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProblem(ctx.Request().Context(), request.(CreateProblemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProblem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateProblemResponseObject); ok {
		return validResponse.VisitCreateProblemResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetProblem operation middleware
func (sh *strictHandler) GetProblem(ctx echo.Context, requestId RequestId) error {
	var request GetProblemRequestObject

	request.RequestId = requestId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProblem(ctx.Request().Context(), request.(GetProblemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProblem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetProblemResponseObject); ok {
		return validResponse.VisitGetProblemResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// SubmitSolution operation middleware
func (sh *strictHandler) SubmitSolution(ctx echo.Context, requestId RequestId) error {
	var request SubmitSolutionRequestObject

	request.RequestId = requestId

	var body SubmitSolutionJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SubmitSolution(ctx.Request().Context(), request.(SubmitSolutionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SubmitSolution")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SubmitSolutionResponseObject); ok {
		return validResponse.VisitSubmitSolutionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//7EbD/7gUAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
