// Package gateway provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package gateway

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	ApiKeyScopes = "apiKey.Scopes"
)

// Defines values for ProgrammingLanguage.
const (
	Cpp        ProgrammingLanguage = "Cpp"
	Go         ProgrammingLanguage = "Go"
	Javascript ProgrammingLanguage = "Javascript"
)

// Code Developic에서 사용되는 코드 데이터입니다.
// 코드 데이터의 Escape를 방지하기 위해 Base64로 인코딩되어 전송, 보관됩니다.
type Code = string

// ELOScore Developic에서 유저의 실력을 가늠하는 ELO 점수입니다.
type ELOScore = int32

// Error defines model for Error.
type Error struct {
	// Code 오류 구분 코드입니다.
	Code string `json:"code"`

	// Message 상세한 오류 정보를 알려주는 메시지입니다.
	Message string `json:"message"`
}

// Problem defines model for Problem.
type Problem struct {
	// Code Developic에서 사용되는 코드 데이터입니다.
	// 코드 데이터의 Escape를 방지하기 위해 Base64로 인코딩되어 전송, 보관됩니다.
	Code Code `json:"code"`

	// Description 문제의 자세한 설명입니다.
	Description *string `json:"description,omitempty"`

	// Id Developic에서 출제한 문제의 고유 ID입니다.
	Id ProblemID `json:"id"`

	// Name Developic에서 출제한 문제의 타이틀입니다.
	Name ProblemName `json:"name"`
}

// ProblemID Developic에서 출제한 문제의 고유 ID입니다.
type ProblemID = string

// ProblemName Developic에서 출제한 문제의 타이틀입니다.
type ProblemName = string

// ProgrammingLanguage Developic에서 사용할 프로그래밍 언어입니다.
type ProgrammingLanguage string

// RecordID Developic에서 생성된 결과 보고서의 고유 ID입니다.
type RecordID = string

// RecordScore 결과 보고서에서 사용자가 취득한 총점입니다.
type RecordScore = int32

// SucceedCheckListItems 사용자가 제출한 코드가 만족한 체크리스트의 인덱스를 의미합니다.
type SucceedCheckListItems = []int32

// N200GetProblem defines model for 200GetProblem.
type N200GetProblem = Problem

// N200GetRecord defines model for 200GetRecord.
type N200GetRecord struct {
	// Id Developic에서 생성된 결과 보고서의 고유 ID입니다.
	Id      RecordID `json:"id"`
	Problem Problem  `json:"problem"`
	Result  struct {
		// Score 채점 결과의 총점입니다. 100점 만점입니다.
		Score    int `json:"score"`
		SubScore struct {
			// Efficiency 사용자가 제출한 코드가 만족한 체크리스트의 인덱스를 의미합니다.
			Efficiency SucceedCheckListItems `json:"efficiency"`

			// Maintainability 사용자가 제출한 코드가 만족한 체크리스트의 인덱스를 의미합니다.
			Maintainability SucceedCheckListItems `json:"maintainability"`

			// Modularity 사용자가 제출한 코드가 만족한 체크리스트의 인덱스를 의미합니다.
			Modularity SucceedCheckListItems `json:"modularity"`

			// Readability 사용자가 제출한 코드가 만족한 체크리스트의 인덱스를 의미합니다.
			Readability SucceedCheckListItems `json:"readability"`

			// Testability 사용자가 제출한 코드가 만족한 체크리스트의 인덱스를 의미합니다.
			Testability SucceedCheckListItems `json:"testability"`
		} `json:"sub_score"`
	} `json:"result"`

	// UserCode Developic에서 사용되는 코드 데이터입니다.
	// 코드 데이터의 Escape를 방지하기 위해 Base64로 인코딩되어 전송, 보관됩니다.
	UserCode Code `json:"user_code"`
}

// N200GetRecords defines model for 200GetRecords.
type N200GetRecords struct {
	Records []struct {
		// Id Developic에서 생성된 결과 보고서의 고유 ID입니다.
		Id RecordID `json:"id"`

		// ProblemId Developic에서 출제한 문제의 고유 ID입니다.
		ProblemId ProblemID `json:"problem_id"`

		// ProblemName Developic에서 출제한 문제의 타이틀입니다.
		ProblemName ProblemName `json:"problem_name"`

		// Score 결과 보고서에서 사용자가 취득한 총점입니다.
		Score RecordScore `json:"score"`
	} `json:"records"`
}

// N202Submit defines model for 202Submit.
type N202Submit struct {
	// ReportId Developic에서 생성된 결과 보고서의 고유 ID입니다.
	ReportId RecordID `json:"report_id"`
}

// InternalServerError defines model for InternalServerError.
type InternalServerError = Error

// SubmitCode defines model for SubmitCode.
type SubmitCode struct {
	// Code Developic에서 사용되는 코드 데이터입니다.
	// 코드 데이터의 Escape를 방지하기 위해 Base64로 인코딩되어 전송, 보관됩니다.
	Code Code `json:"code"`

	// ProblemId Developic에서 출제한 문제의 고유 ID입니다.
	ProblemId ProblemID `json:"problem_id"`
}

// RequestProblemJSONBody defines parameters for RequestProblem.
type RequestProblemJSONBody struct {
	// EloScore Developic에서 유저의 실력을 가늠하는 ELO 점수입니다.
	EloScore *ELOScore `json:"elo_score,omitempty"`

	// Language Developic에서 사용할 프로그래밍 언어입니다.
	Language ProgrammingLanguage `json:"language"`
}

// GetRecordsParams defines parameters for GetRecords.
type GetRecordsParams struct {
	// Page 조회할 페이지입니다.
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// Limit 한 페이지당 조회할 아이템의 수입니다.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// SubmitSolutionJSONBody defines parameters for SubmitSolution.
type SubmitSolutionJSONBody struct {
	// Code Developic에서 사용되는 코드 데이터입니다.
	// 코드 데이터의 Escape를 방지하기 위해 Base64로 인코딩되어 전송, 보관됩니다.
	Code Code `json:"code"`

	// ProblemId Developic에서 출제한 문제의 고유 ID입니다.
	ProblemId ProblemID `json:"problem_id"`
}

// RequestProblemJSONRequestBody defines body for RequestProblem for application/json ContentType.
type RequestProblemJSONRequestBody RequestProblemJSONBody

// SubmitSolutionJSONRequestBody defines body for SubmitSolution for application/json ContentType.
type SubmitSolutionJSONRequestBody SubmitSolutionJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /me)
	GetMe(ctx echo.Context) error

	// (POST /problems)
	RequestProblem(ctx echo.Context) error

	// (GET /problems/{id})
	GetProblem(ctx echo.Context, id ProblemID) error

	// (GET /records)
	GetRecords(ctx echo.Context, params GetRecordsParams) error

	// (GET /records/{id})
	GetRecord(ctx echo.Context, id RecordID) error

	// (POST /submit)
	SubmitSolution(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetMe converts echo context to params.
func (w *ServerInterfaceWrapper) GetMe(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMe(ctx)
	return err
}

// RequestProblem converts echo context to params.
func (w *ServerInterfaceWrapper) RequestProblem(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RequestProblem(ctx)
	return err
}

// GetProblem converts echo context to params.
func (w *ServerInterfaceWrapper) GetProblem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id ProblemID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProblem(ctx, id)
	return err
}

// GetRecords converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecords(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecordsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecords(ctx, params)
	return err
}

// GetRecord converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecord(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id RecordID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRecord(ctx, id)
	return err
}

// SubmitSolution converts echo context to params.
func (w *ServerInterfaceWrapper) SubmitSolution(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SubmitSolution(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/me", wrapper.GetMe)
	router.POST(baseURL+"/problems", wrapper.RequestProblem)
	router.GET(baseURL+"/problems/:id", wrapper.GetProblem)
	router.GET(baseURL+"/records", wrapper.GetRecords)
	router.GET(baseURL+"/records/:id", wrapper.GetRecord)
	router.POST(baseURL+"/submit", wrapper.SubmitSolution)

}

type N200GetProblemJSONResponse Problem

type N200GetRecordJSONResponse struct {
	// Id Developic에서 생성된 결과 보고서의 고유 ID입니다.
	Id      RecordID `json:"id"`
	Problem Problem  `json:"problem"`
	Result  struct {
		// Score 채점 결과의 총점입니다. 100점 만점입니다.
		Score    int `json:"score"`
		SubScore struct {
			// Efficiency 사용자가 제출한 코드가 만족한 체크리스트의 인덱스를 의미합니다.
			Efficiency SucceedCheckListItems `json:"efficiency"`

			// Maintainability 사용자가 제출한 코드가 만족한 체크리스트의 인덱스를 의미합니다.
			Maintainability SucceedCheckListItems `json:"maintainability"`

			// Modularity 사용자가 제출한 코드가 만족한 체크리스트의 인덱스를 의미합니다.
			Modularity SucceedCheckListItems `json:"modularity"`

			// Readability 사용자가 제출한 코드가 만족한 체크리스트의 인덱스를 의미합니다.
			Readability SucceedCheckListItems `json:"readability"`

			// Testability 사용자가 제출한 코드가 만족한 체크리스트의 인덱스를 의미합니다.
			Testability SucceedCheckListItems `json:"testability"`
		} `json:"sub_score"`
	} `json:"result"`

	// UserCode Developic에서 사용되는 코드 데이터입니다.
	// 코드 데이터의 Escape를 방지하기 위해 Base64로 인코딩되어 전송, 보관됩니다.
	UserCode Code `json:"user_code"`
}

type N200GetRecordsJSONResponse struct {
	Records []struct {
		// Id Developic에서 생성된 결과 보고서의 고유 ID입니다.
		Id RecordID `json:"id"`

		// ProblemId Developic에서 출제한 문제의 고유 ID입니다.
		ProblemId ProblemID `json:"problem_id"`

		// ProblemName Developic에서 출제한 문제의 타이틀입니다.
		ProblemName ProblemName `json:"problem_name"`

		// Score 결과 보고서에서 사용자가 취득한 총점입니다.
		Score RecordScore `json:"score"`
	} `json:"records"`
}

type N202SubmitJSONResponse struct {
	// ReportId Developic에서 생성된 결과 보고서의 고유 ID입니다.
	ReportId RecordID `json:"report_id"`
}

type InternalServerErrorJSONResponse Error

type GetMeRequestObject struct {
}

type GetMeResponseObject interface {
	VisitGetMeResponse(w http.ResponseWriter) error
}

type GetMe200JSONResponse struct {
	// EloScore Developic에서 유저의 실력을 가늠하는 ELO 점수입니다.
	EloScore ELOScore `json:"elo_score"`
}

func (response GetMe200JSONResponse) VisitGetMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RequestProblemRequestObject struct {
	Body *RequestProblemJSONRequestBody
}

type RequestProblemResponseObject interface {
	VisitRequestProblemResponse(w http.ResponseWriter) error
}

type RequestProblem202JSONResponse struct {
	// ProblemId Developic에서 출제한 문제의 고유 ID입니다.
	ProblemId ProblemID `json:"problem_id"`
}

func (response RequestProblem202JSONResponse) VisitRequestProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type RequestProblemdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response RequestProblemdefaultJSONResponse) VisitRequestProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetProblemRequestObject struct {
	Id ProblemID `json:"id"`
}

type GetProblemResponseObject interface {
	VisitGetProblemResponse(w http.ResponseWriter) error
}

type GetProblem200JSONResponse struct{ N200GetProblemJSONResponse }

func (response GetProblem200JSONResponse) VisitGetProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProblem404Response struct {
}

func (response GetProblem404Response) VisitGetProblemResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetProblem409Response struct {
}

func (response GetProblem409Response) VisitGetProblemResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

type GetProblemdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetProblemdefaultJSONResponse) VisitGetProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetRecordsRequestObject struct {
	Params GetRecordsParams
}

type GetRecordsResponseObject interface {
	VisitGetRecordsResponse(w http.ResponseWriter) error
}

type GetRecords200JSONResponse struct{ N200GetRecordsJSONResponse }

func (response GetRecords200JSONResponse) VisitGetRecordsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRecordsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetRecordsdefaultJSONResponse) VisitGetRecordsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetRecordRequestObject struct {
	Id RecordID `json:"id"`
}

type GetRecordResponseObject interface {
	VisitGetRecordResponse(w http.ResponseWriter) error
}

type GetRecord200JSONResponse struct{ N200GetRecordJSONResponse }

func (response GetRecord200JSONResponse) VisitGetRecordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRecord404Response struct {
}

func (response GetRecord404Response) VisitGetRecordResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetRecord409Response struct {
}

func (response GetRecord409Response) VisitGetRecordResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

type GetRecorddefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetRecorddefaultJSONResponse) VisitGetRecordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SubmitSolutionRequestObject struct {
	Body *SubmitSolutionJSONRequestBody
}

type SubmitSolutionResponseObject interface {
	VisitSubmitSolutionResponse(w http.ResponseWriter) error
}

type SubmitSolution202JSONResponse struct{ N202SubmitJSONResponse }

func (response SubmitSolution202JSONResponse) VisitSubmitSolutionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type SubmitSolutiondefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response SubmitSolutiondefaultJSONResponse) VisitSubmitSolutionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /me)
	GetMe(ctx context.Context, request GetMeRequestObject) (GetMeResponseObject, error)

	// (POST /problems)
	RequestProblem(ctx context.Context, request RequestProblemRequestObject) (RequestProblemResponseObject, error)

	// (GET /problems/{id})
	GetProblem(ctx context.Context, request GetProblemRequestObject) (GetProblemResponseObject, error)

	// (GET /records)
	GetRecords(ctx context.Context, request GetRecordsRequestObject) (GetRecordsResponseObject, error)

	// (GET /records/{id})
	GetRecord(ctx context.Context, request GetRecordRequestObject) (GetRecordResponseObject, error)

	// (POST /submit)
	SubmitSolution(ctx context.Context, request SubmitSolutionRequestObject) (SubmitSolutionResponseObject, error)
}

type StrictHandlerFunc = runtime.StrictEchoHandlerFunc
type StrictMiddlewareFunc = runtime.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetMe operation middleware
func (sh *strictHandler) GetMe(ctx echo.Context) error {
	var request GetMeRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetMe(ctx.Request().Context(), request.(GetMeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMe")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetMeResponseObject); ok {
		return validResponse.VisitGetMeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// RequestProblem operation middleware
func (sh *strictHandler) RequestProblem(ctx echo.Context) error {
	var request RequestProblemRequestObject

	var body RequestProblemJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RequestProblem(ctx.Request().Context(), request.(RequestProblemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RequestProblem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RequestProblemResponseObject); ok {
		return validResponse.VisitRequestProblemResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetProblem operation middleware
func (sh *strictHandler) GetProblem(ctx echo.Context, id ProblemID) error {
	var request GetProblemRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProblem(ctx.Request().Context(), request.(GetProblemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProblem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetProblemResponseObject); ok {
		return validResponse.VisitGetProblemResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetRecords operation middleware
func (sh *strictHandler) GetRecords(ctx echo.Context, params GetRecordsParams) error {
	var request GetRecordsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRecords(ctx.Request().Context(), request.(GetRecordsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRecords")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetRecordsResponseObject); ok {
		return validResponse.VisitGetRecordsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetRecord operation middleware
func (sh *strictHandler) GetRecord(ctx echo.Context, id RecordID) error {
	var request GetRecordRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRecord(ctx.Request().Context(), request.(GetRecordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRecord")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetRecordResponseObject); ok {
		return validResponse.VisitGetRecordResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// SubmitSolution operation middleware
func (sh *strictHandler) SubmitSolution(ctx echo.Context) error {
	var request SubmitSolutionRequestObject

	var body SubmitSolutionJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SubmitSolution(ctx.Request().Context(), request.(SubmitSolutionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SubmitSolution")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SubmitSolutionResponseObject); ok {
		return validResponse.VisitSubmitSolutionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
