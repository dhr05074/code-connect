// Code generated by ent, DO NOT EDIT.

package ent

import (
	"code-connect/ent/predicate"
	"code-connect/ent/problem"
	"code-connect/ent/record"
	"code-connect/ent/user"
	"code-connect/gateway"
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeProblem = "Problem"
	TypeRecord  = "Record"
	TypeUser    = "User"
)

// ProblemMutation represents an operation that mutates the Problem nodes in the graph.
type ProblemMutation struct {
	config
	op                Op
	typ               string
	id                *int
	uuid              *string
	code              *string
	title             *string
	language          *gateway.ProgrammingLanguage
	description       *string
	difficulty        *int
	adddifficulty     *int
	readability       *int
	addreadability    *int
	modularity        *int
	addmodularity     *int
	efficiency        *int
	addefficiency     *int
	testability       *int
	addtestability    *int
	maintainablity    *int
	addmaintainablity *int
	clearedFields     map[string]struct{}
	records           map[int]struct{}
	removedrecords    map[int]struct{}
	clearedrecords    bool
	done              bool
	oldValue          func(context.Context) (*Problem, error)
	predicates        []predicate.Problem
}

var _ ent.Mutation = (*ProblemMutation)(nil)

// problemOption allows management of the mutation configuration using functional options.
type problemOption func(*ProblemMutation)

// newProblemMutation creates new mutation for the Problem entity.
func newProblemMutation(c config, op Op, opts ...problemOption) *ProblemMutation {
	m := &ProblemMutation{
		config:        c,
		op:            op,
		typ:           TypeProblem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProblemID sets the ID field of the mutation.
func withProblemID(id int) problemOption {
	return func(m *ProblemMutation) {
		var (
			err   error
			once  sync.Once
			value *Problem
		)
		m.oldValue = func(ctx context.Context) (*Problem, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Problem.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProblem sets the old Problem of the mutation.
func withProblem(node *Problem) problemOption {
	return func(m *ProblemMutation) {
		m.oldValue = func(context.Context) (*Problem, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProblemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProblemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Problem entities.
func (m *ProblemMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProblemMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProblemMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Problem.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUUID sets the "uuid" field.
func (m *ProblemMutation) SetUUID(s string) {
	m.uuid = &s
}

// UUID returns the value of the "uuid" field in the mutation.
func (m *ProblemMutation) UUID() (r string, exists bool) {
	v := m.uuid
	if v == nil {
		return
	}
	return *v, true
}

// OldUUID returns the old "uuid" field's value of the Problem entity.
// If the Problem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProblemMutation) OldUUID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUUID: %w", err)
	}
	return oldValue.UUID, nil
}

// ResetUUID resets all changes to the "uuid" field.
func (m *ProblemMutation) ResetUUID() {
	m.uuid = nil
}

// SetCode sets the "code" field.
func (m *ProblemMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *ProblemMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Problem entity.
// If the Problem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProblemMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ClearCode clears the value of the "code" field.
func (m *ProblemMutation) ClearCode() {
	m.code = nil
	m.clearedFields[problem.FieldCode] = struct{}{}
}

// CodeCleared returns if the "code" field was cleared in this mutation.
func (m *ProblemMutation) CodeCleared() bool {
	_, ok := m.clearedFields[problem.FieldCode]
	return ok
}

// ResetCode resets all changes to the "code" field.
func (m *ProblemMutation) ResetCode() {
	m.code = nil
	delete(m.clearedFields, problem.FieldCode)
}

// SetTitle sets the "title" field.
func (m *ProblemMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *ProblemMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Problem entity.
// If the Problem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProblemMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ClearTitle clears the value of the "title" field.
func (m *ProblemMutation) ClearTitle() {
	m.title = nil
	m.clearedFields[problem.FieldTitle] = struct{}{}
}

// TitleCleared returns if the "title" field was cleared in this mutation.
func (m *ProblemMutation) TitleCleared() bool {
	_, ok := m.clearedFields[problem.FieldTitle]
	return ok
}

// ResetTitle resets all changes to the "title" field.
func (m *ProblemMutation) ResetTitle() {
	m.title = nil
	delete(m.clearedFields, problem.FieldTitle)
}

// SetLanguage sets the "language" field.
func (m *ProblemMutation) SetLanguage(gl gateway.ProgrammingLanguage) {
	m.language = &gl
}

// Language returns the value of the "language" field in the mutation.
func (m *ProblemMutation) Language() (r gateway.ProgrammingLanguage, exists bool) {
	v := m.language
	if v == nil {
		return
	}
	return *v, true
}

// OldLanguage returns the old "language" field's value of the Problem entity.
// If the Problem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProblemMutation) OldLanguage(ctx context.Context) (v gateway.ProgrammingLanguage, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLanguage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLanguage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLanguage: %w", err)
	}
	return oldValue.Language, nil
}

// ResetLanguage resets all changes to the "language" field.
func (m *ProblemMutation) ResetLanguage() {
	m.language = nil
}

// SetDescription sets the "description" field.
func (m *ProblemMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ProblemMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Problem entity.
// If the Problem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProblemMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *ProblemMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[problem.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *ProblemMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[problem.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *ProblemMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, problem.FieldDescription)
}

// SetDifficulty sets the "difficulty" field.
func (m *ProblemMutation) SetDifficulty(i int) {
	m.difficulty = &i
	m.adddifficulty = nil
}

// Difficulty returns the value of the "difficulty" field in the mutation.
func (m *ProblemMutation) Difficulty() (r int, exists bool) {
	v := m.difficulty
	if v == nil {
		return
	}
	return *v, true
}

// OldDifficulty returns the old "difficulty" field's value of the Problem entity.
// If the Problem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProblemMutation) OldDifficulty(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDifficulty is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDifficulty requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDifficulty: %w", err)
	}
	return oldValue.Difficulty, nil
}

// AddDifficulty adds i to the "difficulty" field.
func (m *ProblemMutation) AddDifficulty(i int) {
	if m.adddifficulty != nil {
		*m.adddifficulty += i
	} else {
		m.adddifficulty = &i
	}
}

// AddedDifficulty returns the value that was added to the "difficulty" field in this mutation.
func (m *ProblemMutation) AddedDifficulty() (r int, exists bool) {
	v := m.adddifficulty
	if v == nil {
		return
	}
	return *v, true
}

// ResetDifficulty resets all changes to the "difficulty" field.
func (m *ProblemMutation) ResetDifficulty() {
	m.difficulty = nil
	m.adddifficulty = nil
}

// SetReadability sets the "readability" field.
func (m *ProblemMutation) SetReadability(i int) {
	m.readability = &i
	m.addreadability = nil
}

// Readability returns the value of the "readability" field in the mutation.
func (m *ProblemMutation) Readability() (r int, exists bool) {
	v := m.readability
	if v == nil {
		return
	}
	return *v, true
}

// OldReadability returns the old "readability" field's value of the Problem entity.
// If the Problem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProblemMutation) OldReadability(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReadability is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReadability requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReadability: %w", err)
	}
	return oldValue.Readability, nil
}

// AddReadability adds i to the "readability" field.
func (m *ProblemMutation) AddReadability(i int) {
	if m.addreadability != nil {
		*m.addreadability += i
	} else {
		m.addreadability = &i
	}
}

// AddedReadability returns the value that was added to the "readability" field in this mutation.
func (m *ProblemMutation) AddedReadability() (r int, exists bool) {
	v := m.addreadability
	if v == nil {
		return
	}
	return *v, true
}

// ResetReadability resets all changes to the "readability" field.
func (m *ProblemMutation) ResetReadability() {
	m.readability = nil
	m.addreadability = nil
}

// SetModularity sets the "modularity" field.
func (m *ProblemMutation) SetModularity(i int) {
	m.modularity = &i
	m.addmodularity = nil
}

// Modularity returns the value of the "modularity" field in the mutation.
func (m *ProblemMutation) Modularity() (r int, exists bool) {
	v := m.modularity
	if v == nil {
		return
	}
	return *v, true
}

// OldModularity returns the old "modularity" field's value of the Problem entity.
// If the Problem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProblemMutation) OldModularity(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModularity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModularity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModularity: %w", err)
	}
	return oldValue.Modularity, nil
}

// AddModularity adds i to the "modularity" field.
func (m *ProblemMutation) AddModularity(i int) {
	if m.addmodularity != nil {
		*m.addmodularity += i
	} else {
		m.addmodularity = &i
	}
}

// AddedModularity returns the value that was added to the "modularity" field in this mutation.
func (m *ProblemMutation) AddedModularity() (r int, exists bool) {
	v := m.addmodularity
	if v == nil {
		return
	}
	return *v, true
}

// ResetModularity resets all changes to the "modularity" field.
func (m *ProblemMutation) ResetModularity() {
	m.modularity = nil
	m.addmodularity = nil
}

// SetEfficiency sets the "efficiency" field.
func (m *ProblemMutation) SetEfficiency(i int) {
	m.efficiency = &i
	m.addefficiency = nil
}

// Efficiency returns the value of the "efficiency" field in the mutation.
func (m *ProblemMutation) Efficiency() (r int, exists bool) {
	v := m.efficiency
	if v == nil {
		return
	}
	return *v, true
}

// OldEfficiency returns the old "efficiency" field's value of the Problem entity.
// If the Problem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProblemMutation) OldEfficiency(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEfficiency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEfficiency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEfficiency: %w", err)
	}
	return oldValue.Efficiency, nil
}

// AddEfficiency adds i to the "efficiency" field.
func (m *ProblemMutation) AddEfficiency(i int) {
	if m.addefficiency != nil {
		*m.addefficiency += i
	} else {
		m.addefficiency = &i
	}
}

// AddedEfficiency returns the value that was added to the "efficiency" field in this mutation.
func (m *ProblemMutation) AddedEfficiency() (r int, exists bool) {
	v := m.addefficiency
	if v == nil {
		return
	}
	return *v, true
}

// ResetEfficiency resets all changes to the "efficiency" field.
func (m *ProblemMutation) ResetEfficiency() {
	m.efficiency = nil
	m.addefficiency = nil
}

// SetTestability sets the "testability" field.
func (m *ProblemMutation) SetTestability(i int) {
	m.testability = &i
	m.addtestability = nil
}

// Testability returns the value of the "testability" field in the mutation.
func (m *ProblemMutation) Testability() (r int, exists bool) {
	v := m.testability
	if v == nil {
		return
	}
	return *v, true
}

// OldTestability returns the old "testability" field's value of the Problem entity.
// If the Problem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProblemMutation) OldTestability(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTestability is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTestability requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTestability: %w", err)
	}
	return oldValue.Testability, nil
}

// AddTestability adds i to the "testability" field.
func (m *ProblemMutation) AddTestability(i int) {
	if m.addtestability != nil {
		*m.addtestability += i
	} else {
		m.addtestability = &i
	}
}

// AddedTestability returns the value that was added to the "testability" field in this mutation.
func (m *ProblemMutation) AddedTestability() (r int, exists bool) {
	v := m.addtestability
	if v == nil {
		return
	}
	return *v, true
}

// ResetTestability resets all changes to the "testability" field.
func (m *ProblemMutation) ResetTestability() {
	m.testability = nil
	m.addtestability = nil
}

// SetMaintainablity sets the "maintainablity" field.
func (m *ProblemMutation) SetMaintainablity(i int) {
	m.maintainablity = &i
	m.addmaintainablity = nil
}

// Maintainablity returns the value of the "maintainablity" field in the mutation.
func (m *ProblemMutation) Maintainablity() (r int, exists bool) {
	v := m.maintainablity
	if v == nil {
		return
	}
	return *v, true
}

// OldMaintainablity returns the old "maintainablity" field's value of the Problem entity.
// If the Problem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProblemMutation) OldMaintainablity(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMaintainablity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMaintainablity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMaintainablity: %w", err)
	}
	return oldValue.Maintainablity, nil
}

// AddMaintainablity adds i to the "maintainablity" field.
func (m *ProblemMutation) AddMaintainablity(i int) {
	if m.addmaintainablity != nil {
		*m.addmaintainablity += i
	} else {
		m.addmaintainablity = &i
	}
}

// AddedMaintainablity returns the value that was added to the "maintainablity" field in this mutation.
func (m *ProblemMutation) AddedMaintainablity() (r int, exists bool) {
	v := m.addmaintainablity
	if v == nil {
		return
	}
	return *v, true
}

// ResetMaintainablity resets all changes to the "maintainablity" field.
func (m *ProblemMutation) ResetMaintainablity() {
	m.maintainablity = nil
	m.addmaintainablity = nil
}

// AddRecordIDs adds the "records" edge to the Record entity by ids.
func (m *ProblemMutation) AddRecordIDs(ids ...int) {
	if m.records == nil {
		m.records = make(map[int]struct{})
	}
	for i := range ids {
		m.records[ids[i]] = struct{}{}
	}
}

// ClearRecords clears the "records" edge to the Record entity.
func (m *ProblemMutation) ClearRecords() {
	m.clearedrecords = true
}

// RecordsCleared reports if the "records" edge to the Record entity was cleared.
func (m *ProblemMutation) RecordsCleared() bool {
	return m.clearedrecords
}

// RemoveRecordIDs removes the "records" edge to the Record entity by IDs.
func (m *ProblemMutation) RemoveRecordIDs(ids ...int) {
	if m.removedrecords == nil {
		m.removedrecords = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.records, ids[i])
		m.removedrecords[ids[i]] = struct{}{}
	}
}

// RemovedRecords returns the removed IDs of the "records" edge to the Record entity.
func (m *ProblemMutation) RemovedRecordsIDs() (ids []int) {
	for id := range m.removedrecords {
		ids = append(ids, id)
	}
	return
}

// RecordsIDs returns the "records" edge IDs in the mutation.
func (m *ProblemMutation) RecordsIDs() (ids []int) {
	for id := range m.records {
		ids = append(ids, id)
	}
	return
}

// ResetRecords resets all changes to the "records" edge.
func (m *ProblemMutation) ResetRecords() {
	m.records = nil
	m.clearedrecords = false
	m.removedrecords = nil
}

// Where appends a list predicates to the ProblemMutation builder.
func (m *ProblemMutation) Where(ps ...predicate.Problem) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProblemMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProblemMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Problem, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProblemMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProblemMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Problem).
func (m *ProblemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProblemMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.uuid != nil {
		fields = append(fields, problem.FieldUUID)
	}
	if m.code != nil {
		fields = append(fields, problem.FieldCode)
	}
	if m.title != nil {
		fields = append(fields, problem.FieldTitle)
	}
	if m.language != nil {
		fields = append(fields, problem.FieldLanguage)
	}
	if m.description != nil {
		fields = append(fields, problem.FieldDescription)
	}
	if m.difficulty != nil {
		fields = append(fields, problem.FieldDifficulty)
	}
	if m.readability != nil {
		fields = append(fields, problem.FieldReadability)
	}
	if m.modularity != nil {
		fields = append(fields, problem.FieldModularity)
	}
	if m.efficiency != nil {
		fields = append(fields, problem.FieldEfficiency)
	}
	if m.testability != nil {
		fields = append(fields, problem.FieldTestability)
	}
	if m.maintainablity != nil {
		fields = append(fields, problem.FieldMaintainablity)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProblemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case problem.FieldUUID:
		return m.UUID()
	case problem.FieldCode:
		return m.Code()
	case problem.FieldTitle:
		return m.Title()
	case problem.FieldLanguage:
		return m.Language()
	case problem.FieldDescription:
		return m.Description()
	case problem.FieldDifficulty:
		return m.Difficulty()
	case problem.FieldReadability:
		return m.Readability()
	case problem.FieldModularity:
		return m.Modularity()
	case problem.FieldEfficiency:
		return m.Efficiency()
	case problem.FieldTestability:
		return m.Testability()
	case problem.FieldMaintainablity:
		return m.Maintainablity()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProblemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case problem.FieldUUID:
		return m.OldUUID(ctx)
	case problem.FieldCode:
		return m.OldCode(ctx)
	case problem.FieldTitle:
		return m.OldTitle(ctx)
	case problem.FieldLanguage:
		return m.OldLanguage(ctx)
	case problem.FieldDescription:
		return m.OldDescription(ctx)
	case problem.FieldDifficulty:
		return m.OldDifficulty(ctx)
	case problem.FieldReadability:
		return m.OldReadability(ctx)
	case problem.FieldModularity:
		return m.OldModularity(ctx)
	case problem.FieldEfficiency:
		return m.OldEfficiency(ctx)
	case problem.FieldTestability:
		return m.OldTestability(ctx)
	case problem.FieldMaintainablity:
		return m.OldMaintainablity(ctx)
	}
	return nil, fmt.Errorf("unknown Problem field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProblemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case problem.FieldUUID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUUID(v)
		return nil
	case problem.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case problem.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case problem.FieldLanguage:
		v, ok := value.(gateway.ProgrammingLanguage)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLanguage(v)
		return nil
	case problem.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case problem.FieldDifficulty:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDifficulty(v)
		return nil
	case problem.FieldReadability:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReadability(v)
		return nil
	case problem.FieldModularity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModularity(v)
		return nil
	case problem.FieldEfficiency:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEfficiency(v)
		return nil
	case problem.FieldTestability:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTestability(v)
		return nil
	case problem.FieldMaintainablity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMaintainablity(v)
		return nil
	}
	return fmt.Errorf("unknown Problem field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProblemMutation) AddedFields() []string {
	var fields []string
	if m.adddifficulty != nil {
		fields = append(fields, problem.FieldDifficulty)
	}
	if m.addreadability != nil {
		fields = append(fields, problem.FieldReadability)
	}
	if m.addmodularity != nil {
		fields = append(fields, problem.FieldModularity)
	}
	if m.addefficiency != nil {
		fields = append(fields, problem.FieldEfficiency)
	}
	if m.addtestability != nil {
		fields = append(fields, problem.FieldTestability)
	}
	if m.addmaintainablity != nil {
		fields = append(fields, problem.FieldMaintainablity)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProblemMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case problem.FieldDifficulty:
		return m.AddedDifficulty()
	case problem.FieldReadability:
		return m.AddedReadability()
	case problem.FieldModularity:
		return m.AddedModularity()
	case problem.FieldEfficiency:
		return m.AddedEfficiency()
	case problem.FieldTestability:
		return m.AddedTestability()
	case problem.FieldMaintainablity:
		return m.AddedMaintainablity()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProblemMutation) AddField(name string, value ent.Value) error {
	switch name {
	case problem.FieldDifficulty:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDifficulty(v)
		return nil
	case problem.FieldReadability:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddReadability(v)
		return nil
	case problem.FieldModularity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddModularity(v)
		return nil
	case problem.FieldEfficiency:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEfficiency(v)
		return nil
	case problem.FieldTestability:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTestability(v)
		return nil
	case problem.FieldMaintainablity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMaintainablity(v)
		return nil
	}
	return fmt.Errorf("unknown Problem numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProblemMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(problem.FieldCode) {
		fields = append(fields, problem.FieldCode)
	}
	if m.FieldCleared(problem.FieldTitle) {
		fields = append(fields, problem.FieldTitle)
	}
	if m.FieldCleared(problem.FieldDescription) {
		fields = append(fields, problem.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProblemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProblemMutation) ClearField(name string) error {
	switch name {
	case problem.FieldCode:
		m.ClearCode()
		return nil
	case problem.FieldTitle:
		m.ClearTitle()
		return nil
	case problem.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Problem nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProblemMutation) ResetField(name string) error {
	switch name {
	case problem.FieldUUID:
		m.ResetUUID()
		return nil
	case problem.FieldCode:
		m.ResetCode()
		return nil
	case problem.FieldTitle:
		m.ResetTitle()
		return nil
	case problem.FieldLanguage:
		m.ResetLanguage()
		return nil
	case problem.FieldDescription:
		m.ResetDescription()
		return nil
	case problem.FieldDifficulty:
		m.ResetDifficulty()
		return nil
	case problem.FieldReadability:
		m.ResetReadability()
		return nil
	case problem.FieldModularity:
		m.ResetModularity()
		return nil
	case problem.FieldEfficiency:
		m.ResetEfficiency()
		return nil
	case problem.FieldTestability:
		m.ResetTestability()
		return nil
	case problem.FieldMaintainablity:
		m.ResetMaintainablity()
		return nil
	}
	return fmt.Errorf("unknown Problem field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProblemMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.records != nil {
		edges = append(edges, problem.EdgeRecords)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProblemMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case problem.EdgeRecords:
		ids := make([]ent.Value, 0, len(m.records))
		for id := range m.records {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProblemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedrecords != nil {
		edges = append(edges, problem.EdgeRecords)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProblemMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case problem.EdgeRecords:
		ids := make([]ent.Value, 0, len(m.removedrecords))
		for id := range m.removedrecords {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProblemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrecords {
		edges = append(edges, problem.EdgeRecords)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProblemMutation) EdgeCleared(name string) bool {
	switch name {
	case problem.EdgeRecords:
		return m.clearedrecords
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProblemMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Problem unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProblemMutation) ResetEdge(name string) error {
	switch name {
	case problem.EdgeRecords:
		m.ResetRecords()
		return nil
	}
	return fmt.Errorf("unknown Problem edge %s", name)
}

// RecordMutation represents an operation that mutates the Record nodes in the graph.
type RecordMutation struct {
	config
	op                Op
	typ               string
	id                *int
	uuid              *string
	user_uuid         *string
	code              *string
	readability       *int
	addreadability    *int
	modularity        *int
	addmodularity     *int
	efficiency        *int
	addefficiency     *int
	testability       *int
	addtestability    *int
	maintainablity    *int
	addmaintainablity *int
	clearedFields     map[string]struct{}
	problem           map[int]struct{}
	removedproblem    map[int]struct{}
	clearedproblem    bool
	done              bool
	oldValue          func(context.Context) (*Record, error)
	predicates        []predicate.Record
}

var _ ent.Mutation = (*RecordMutation)(nil)

// recordOption allows management of the mutation configuration using functional options.
type recordOption func(*RecordMutation)

// newRecordMutation creates new mutation for the Record entity.
func newRecordMutation(c config, op Op, opts ...recordOption) *RecordMutation {
	m := &RecordMutation{
		config:        c,
		op:            op,
		typ:           TypeRecord,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRecordID sets the ID field of the mutation.
func withRecordID(id int) recordOption {
	return func(m *RecordMutation) {
		var (
			err   error
			once  sync.Once
			value *Record
		)
		m.oldValue = func(ctx context.Context) (*Record, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Record.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRecord sets the old Record of the mutation.
func withRecord(node *Record) recordOption {
	return func(m *RecordMutation) {
		m.oldValue = func(context.Context) (*Record, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RecordMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RecordMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Record entities.
func (m *RecordMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RecordMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RecordMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Record.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUUID sets the "uuid" field.
func (m *RecordMutation) SetUUID(s string) {
	m.uuid = &s
}

// UUID returns the value of the "uuid" field in the mutation.
func (m *RecordMutation) UUID() (r string, exists bool) {
	v := m.uuid
	if v == nil {
		return
	}
	return *v, true
}

// OldUUID returns the old "uuid" field's value of the Record entity.
// If the Record object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecordMutation) OldUUID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUUID: %w", err)
	}
	return oldValue.UUID, nil
}

// ResetUUID resets all changes to the "uuid" field.
func (m *RecordMutation) ResetUUID() {
	m.uuid = nil
}

// SetUserUUID sets the "user_uuid" field.
func (m *RecordMutation) SetUserUUID(s string) {
	m.user_uuid = &s
}

// UserUUID returns the value of the "user_uuid" field in the mutation.
func (m *RecordMutation) UserUUID() (r string, exists bool) {
	v := m.user_uuid
	if v == nil {
		return
	}
	return *v, true
}

// OldUserUUID returns the old "user_uuid" field's value of the Record entity.
// If the Record object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecordMutation) OldUserUUID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserUUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserUUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserUUID: %w", err)
	}
	return oldValue.UserUUID, nil
}

// ResetUserUUID resets all changes to the "user_uuid" field.
func (m *RecordMutation) ResetUserUUID() {
	m.user_uuid = nil
}

// SetCode sets the "code" field.
func (m *RecordMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *RecordMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Record entity.
// If the Record object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecordMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *RecordMutation) ResetCode() {
	m.code = nil
}

// SetReadability sets the "readability" field.
func (m *RecordMutation) SetReadability(i int) {
	m.readability = &i
	m.addreadability = nil
}

// Readability returns the value of the "readability" field in the mutation.
func (m *RecordMutation) Readability() (r int, exists bool) {
	v := m.readability
	if v == nil {
		return
	}
	return *v, true
}

// OldReadability returns the old "readability" field's value of the Record entity.
// If the Record object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecordMutation) OldReadability(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReadability is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReadability requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReadability: %w", err)
	}
	return oldValue.Readability, nil
}

// AddReadability adds i to the "readability" field.
func (m *RecordMutation) AddReadability(i int) {
	if m.addreadability != nil {
		*m.addreadability += i
	} else {
		m.addreadability = &i
	}
}

// AddedReadability returns the value that was added to the "readability" field in this mutation.
func (m *RecordMutation) AddedReadability() (r int, exists bool) {
	v := m.addreadability
	if v == nil {
		return
	}
	return *v, true
}

// ResetReadability resets all changes to the "readability" field.
func (m *RecordMutation) ResetReadability() {
	m.readability = nil
	m.addreadability = nil
}

// SetModularity sets the "modularity" field.
func (m *RecordMutation) SetModularity(i int) {
	m.modularity = &i
	m.addmodularity = nil
}

// Modularity returns the value of the "modularity" field in the mutation.
func (m *RecordMutation) Modularity() (r int, exists bool) {
	v := m.modularity
	if v == nil {
		return
	}
	return *v, true
}

// OldModularity returns the old "modularity" field's value of the Record entity.
// If the Record object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecordMutation) OldModularity(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModularity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModularity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModularity: %w", err)
	}
	return oldValue.Modularity, nil
}

// AddModularity adds i to the "modularity" field.
func (m *RecordMutation) AddModularity(i int) {
	if m.addmodularity != nil {
		*m.addmodularity += i
	} else {
		m.addmodularity = &i
	}
}

// AddedModularity returns the value that was added to the "modularity" field in this mutation.
func (m *RecordMutation) AddedModularity() (r int, exists bool) {
	v := m.addmodularity
	if v == nil {
		return
	}
	return *v, true
}

// ResetModularity resets all changes to the "modularity" field.
func (m *RecordMutation) ResetModularity() {
	m.modularity = nil
	m.addmodularity = nil
}

// SetEfficiency sets the "efficiency" field.
func (m *RecordMutation) SetEfficiency(i int) {
	m.efficiency = &i
	m.addefficiency = nil
}

// Efficiency returns the value of the "efficiency" field in the mutation.
func (m *RecordMutation) Efficiency() (r int, exists bool) {
	v := m.efficiency
	if v == nil {
		return
	}
	return *v, true
}

// OldEfficiency returns the old "efficiency" field's value of the Record entity.
// If the Record object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecordMutation) OldEfficiency(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEfficiency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEfficiency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEfficiency: %w", err)
	}
	return oldValue.Efficiency, nil
}

// AddEfficiency adds i to the "efficiency" field.
func (m *RecordMutation) AddEfficiency(i int) {
	if m.addefficiency != nil {
		*m.addefficiency += i
	} else {
		m.addefficiency = &i
	}
}

// AddedEfficiency returns the value that was added to the "efficiency" field in this mutation.
func (m *RecordMutation) AddedEfficiency() (r int, exists bool) {
	v := m.addefficiency
	if v == nil {
		return
	}
	return *v, true
}

// ResetEfficiency resets all changes to the "efficiency" field.
func (m *RecordMutation) ResetEfficiency() {
	m.efficiency = nil
	m.addefficiency = nil
}

// SetTestability sets the "testability" field.
func (m *RecordMutation) SetTestability(i int) {
	m.testability = &i
	m.addtestability = nil
}

// Testability returns the value of the "testability" field in the mutation.
func (m *RecordMutation) Testability() (r int, exists bool) {
	v := m.testability
	if v == nil {
		return
	}
	return *v, true
}

// OldTestability returns the old "testability" field's value of the Record entity.
// If the Record object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecordMutation) OldTestability(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTestability is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTestability requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTestability: %w", err)
	}
	return oldValue.Testability, nil
}

// AddTestability adds i to the "testability" field.
func (m *RecordMutation) AddTestability(i int) {
	if m.addtestability != nil {
		*m.addtestability += i
	} else {
		m.addtestability = &i
	}
}

// AddedTestability returns the value that was added to the "testability" field in this mutation.
func (m *RecordMutation) AddedTestability() (r int, exists bool) {
	v := m.addtestability
	if v == nil {
		return
	}
	return *v, true
}

// ResetTestability resets all changes to the "testability" field.
func (m *RecordMutation) ResetTestability() {
	m.testability = nil
	m.addtestability = nil
}

// SetMaintainablity sets the "maintainablity" field.
func (m *RecordMutation) SetMaintainablity(i int) {
	m.maintainablity = &i
	m.addmaintainablity = nil
}

// Maintainablity returns the value of the "maintainablity" field in the mutation.
func (m *RecordMutation) Maintainablity() (r int, exists bool) {
	v := m.maintainablity
	if v == nil {
		return
	}
	return *v, true
}

// OldMaintainablity returns the old "maintainablity" field's value of the Record entity.
// If the Record object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecordMutation) OldMaintainablity(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMaintainablity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMaintainablity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMaintainablity: %w", err)
	}
	return oldValue.Maintainablity, nil
}

// AddMaintainablity adds i to the "maintainablity" field.
func (m *RecordMutation) AddMaintainablity(i int) {
	if m.addmaintainablity != nil {
		*m.addmaintainablity += i
	} else {
		m.addmaintainablity = &i
	}
}

// AddedMaintainablity returns the value that was added to the "maintainablity" field in this mutation.
func (m *RecordMutation) AddedMaintainablity() (r int, exists bool) {
	v := m.addmaintainablity
	if v == nil {
		return
	}
	return *v, true
}

// ResetMaintainablity resets all changes to the "maintainablity" field.
func (m *RecordMutation) ResetMaintainablity() {
	m.maintainablity = nil
	m.addmaintainablity = nil
}

// AddProblemIDs adds the "problem" edge to the Problem entity by ids.
func (m *RecordMutation) AddProblemIDs(ids ...int) {
	if m.problem == nil {
		m.problem = make(map[int]struct{})
	}
	for i := range ids {
		m.problem[ids[i]] = struct{}{}
	}
}

// ClearProblem clears the "problem" edge to the Problem entity.
func (m *RecordMutation) ClearProblem() {
	m.clearedproblem = true
}

// ProblemCleared reports if the "problem" edge to the Problem entity was cleared.
func (m *RecordMutation) ProblemCleared() bool {
	return m.clearedproblem
}

// RemoveProblemIDs removes the "problem" edge to the Problem entity by IDs.
func (m *RecordMutation) RemoveProblemIDs(ids ...int) {
	if m.removedproblem == nil {
		m.removedproblem = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.problem, ids[i])
		m.removedproblem[ids[i]] = struct{}{}
	}
}

// RemovedProblem returns the removed IDs of the "problem" edge to the Problem entity.
func (m *RecordMutation) RemovedProblemIDs() (ids []int) {
	for id := range m.removedproblem {
		ids = append(ids, id)
	}
	return
}

// ProblemIDs returns the "problem" edge IDs in the mutation.
func (m *RecordMutation) ProblemIDs() (ids []int) {
	for id := range m.problem {
		ids = append(ids, id)
	}
	return
}

// ResetProblem resets all changes to the "problem" edge.
func (m *RecordMutation) ResetProblem() {
	m.problem = nil
	m.clearedproblem = false
	m.removedproblem = nil
}

// Where appends a list predicates to the RecordMutation builder.
func (m *RecordMutation) Where(ps ...predicate.Record) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RecordMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RecordMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Record, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RecordMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RecordMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Record).
func (m *RecordMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RecordMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.uuid != nil {
		fields = append(fields, record.FieldUUID)
	}
	if m.user_uuid != nil {
		fields = append(fields, record.FieldUserUUID)
	}
	if m.code != nil {
		fields = append(fields, record.FieldCode)
	}
	if m.readability != nil {
		fields = append(fields, record.FieldReadability)
	}
	if m.modularity != nil {
		fields = append(fields, record.FieldModularity)
	}
	if m.efficiency != nil {
		fields = append(fields, record.FieldEfficiency)
	}
	if m.testability != nil {
		fields = append(fields, record.FieldTestability)
	}
	if m.maintainablity != nil {
		fields = append(fields, record.FieldMaintainablity)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RecordMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case record.FieldUUID:
		return m.UUID()
	case record.FieldUserUUID:
		return m.UserUUID()
	case record.FieldCode:
		return m.Code()
	case record.FieldReadability:
		return m.Readability()
	case record.FieldModularity:
		return m.Modularity()
	case record.FieldEfficiency:
		return m.Efficiency()
	case record.FieldTestability:
		return m.Testability()
	case record.FieldMaintainablity:
		return m.Maintainablity()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RecordMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case record.FieldUUID:
		return m.OldUUID(ctx)
	case record.FieldUserUUID:
		return m.OldUserUUID(ctx)
	case record.FieldCode:
		return m.OldCode(ctx)
	case record.FieldReadability:
		return m.OldReadability(ctx)
	case record.FieldModularity:
		return m.OldModularity(ctx)
	case record.FieldEfficiency:
		return m.OldEfficiency(ctx)
	case record.FieldTestability:
		return m.OldTestability(ctx)
	case record.FieldMaintainablity:
		return m.OldMaintainablity(ctx)
	}
	return nil, fmt.Errorf("unknown Record field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RecordMutation) SetField(name string, value ent.Value) error {
	switch name {
	case record.FieldUUID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUUID(v)
		return nil
	case record.FieldUserUUID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserUUID(v)
		return nil
	case record.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case record.FieldReadability:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReadability(v)
		return nil
	case record.FieldModularity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModularity(v)
		return nil
	case record.FieldEfficiency:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEfficiency(v)
		return nil
	case record.FieldTestability:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTestability(v)
		return nil
	case record.FieldMaintainablity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMaintainablity(v)
		return nil
	}
	return fmt.Errorf("unknown Record field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RecordMutation) AddedFields() []string {
	var fields []string
	if m.addreadability != nil {
		fields = append(fields, record.FieldReadability)
	}
	if m.addmodularity != nil {
		fields = append(fields, record.FieldModularity)
	}
	if m.addefficiency != nil {
		fields = append(fields, record.FieldEfficiency)
	}
	if m.addtestability != nil {
		fields = append(fields, record.FieldTestability)
	}
	if m.addmaintainablity != nil {
		fields = append(fields, record.FieldMaintainablity)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RecordMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case record.FieldReadability:
		return m.AddedReadability()
	case record.FieldModularity:
		return m.AddedModularity()
	case record.FieldEfficiency:
		return m.AddedEfficiency()
	case record.FieldTestability:
		return m.AddedTestability()
	case record.FieldMaintainablity:
		return m.AddedMaintainablity()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RecordMutation) AddField(name string, value ent.Value) error {
	switch name {
	case record.FieldReadability:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddReadability(v)
		return nil
	case record.FieldModularity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddModularity(v)
		return nil
	case record.FieldEfficiency:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEfficiency(v)
		return nil
	case record.FieldTestability:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTestability(v)
		return nil
	case record.FieldMaintainablity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMaintainablity(v)
		return nil
	}
	return fmt.Errorf("unknown Record numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RecordMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RecordMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RecordMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Record nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RecordMutation) ResetField(name string) error {
	switch name {
	case record.FieldUUID:
		m.ResetUUID()
		return nil
	case record.FieldUserUUID:
		m.ResetUserUUID()
		return nil
	case record.FieldCode:
		m.ResetCode()
		return nil
	case record.FieldReadability:
		m.ResetReadability()
		return nil
	case record.FieldModularity:
		m.ResetModularity()
		return nil
	case record.FieldEfficiency:
		m.ResetEfficiency()
		return nil
	case record.FieldTestability:
		m.ResetTestability()
		return nil
	case record.FieldMaintainablity:
		m.ResetMaintainablity()
		return nil
	}
	return fmt.Errorf("unknown Record field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RecordMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.problem != nil {
		edges = append(edges, record.EdgeProblem)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RecordMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case record.EdgeProblem:
		ids := make([]ent.Value, 0, len(m.problem))
		for id := range m.problem {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RecordMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedproblem != nil {
		edges = append(edges, record.EdgeProblem)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RecordMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case record.EdgeProblem:
		ids := make([]ent.Value, 0, len(m.removedproblem))
		for id := range m.removedproblem {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RecordMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedproblem {
		edges = append(edges, record.EdgeProblem)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RecordMutation) EdgeCleared(name string) bool {
	switch name {
	case record.EdgeProblem:
		return m.clearedproblem
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RecordMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Record unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RecordMutation) ResetEdge(name string) error {
	switch name {
	case record.EdgeProblem:
		m.ResetProblem()
		return nil
	}
	return fmt.Errorf("unknown Record edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	uuid          *string
	nickname      *string
	elo_score     *int
	addelo_score  *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUUID sets the "uuid" field.
func (m *UserMutation) SetUUID(s string) {
	m.uuid = &s
}

// UUID returns the value of the "uuid" field in the mutation.
func (m *UserMutation) UUID() (r string, exists bool) {
	v := m.uuid
	if v == nil {
		return
	}
	return *v, true
}

// OldUUID returns the old "uuid" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUUID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUUID: %w", err)
	}
	return oldValue.UUID, nil
}

// ResetUUID resets all changes to the "uuid" field.
func (m *UserMutation) ResetUUID() {
	m.uuid = nil
}

// SetNickname sets the "nickname" field.
func (m *UserMutation) SetNickname(s string) {
	m.nickname = &s
}

// Nickname returns the value of the "nickname" field in the mutation.
func (m *UserMutation) Nickname() (r string, exists bool) {
	v := m.nickname
	if v == nil {
		return
	}
	return *v, true
}

// OldNickname returns the old "nickname" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldNickname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNickname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNickname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNickname: %w", err)
	}
	return oldValue.Nickname, nil
}

// ResetNickname resets all changes to the "nickname" field.
func (m *UserMutation) ResetNickname() {
	m.nickname = nil
}

// SetEloScore sets the "elo_score" field.
func (m *UserMutation) SetEloScore(i int) {
	m.elo_score = &i
	m.addelo_score = nil
}

// EloScore returns the value of the "elo_score" field in the mutation.
func (m *UserMutation) EloScore() (r int, exists bool) {
	v := m.elo_score
	if v == nil {
		return
	}
	return *v, true
}

// OldEloScore returns the old "elo_score" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEloScore(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEloScore is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEloScore requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEloScore: %w", err)
	}
	return oldValue.EloScore, nil
}

// AddEloScore adds i to the "elo_score" field.
func (m *UserMutation) AddEloScore(i int) {
	if m.addelo_score != nil {
		*m.addelo_score += i
	} else {
		m.addelo_score = &i
	}
}

// AddedEloScore returns the value that was added to the "elo_score" field in this mutation.
func (m *UserMutation) AddedEloScore() (r int, exists bool) {
	v := m.addelo_score
	if v == nil {
		return
	}
	return *v, true
}

// ResetEloScore resets all changes to the "elo_score" field.
func (m *UserMutation) ResetEloScore() {
	m.elo_score = nil
	m.addelo_score = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.uuid != nil {
		fields = append(fields, user.FieldUUID)
	}
	if m.nickname != nil {
		fields = append(fields, user.FieldNickname)
	}
	if m.elo_score != nil {
		fields = append(fields, user.FieldEloScore)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUUID:
		return m.UUID()
	case user.FieldNickname:
		return m.Nickname()
	case user.FieldEloScore:
		return m.EloScore()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUUID:
		return m.OldUUID(ctx)
	case user.FieldNickname:
		return m.OldNickname(ctx)
	case user.FieldEloScore:
		return m.OldEloScore(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUUID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUUID(v)
		return nil
	case user.FieldNickname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNickname(v)
		return nil
	case user.FieldEloScore:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEloScore(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addelo_score != nil {
		fields = append(fields, user.FieldEloScore)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldEloScore:
		return m.AddedEloScore()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldEloScore:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEloScore(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUUID:
		m.ResetUUID()
		return nil
	case user.FieldNickname:
		m.ResetNickname()
		return nil
	case user.FieldEloScore:
		m.ResetEloScore()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
