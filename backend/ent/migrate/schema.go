// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ProblemsColumns holds the columns for the "problems" table.
	ProblemsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uuid", Type: field.TypeString, Unique: true},
		{Name: "code", Type: field.TypeString, Size: 2147483647},
		{Name: "title", Type: field.TypeString},
		{Name: "language", Type: field.TypeString},
		{Name: "difficulty", Type: field.TypeInt, Default: 1500},
		{Name: "readability", Type: field.TypeInt, Default: 0},
		{Name: "modularity", Type: field.TypeInt, Default: 0},
		{Name: "efficiency", Type: field.TypeInt, Default: 0},
		{Name: "testability", Type: field.TypeInt, Default: 0},
		{Name: "maintainablity", Type: field.TypeInt, Default: 0},
	}
	// ProblemsTable holds the schema information for the "problems" table.
	ProblemsTable = &schema.Table{
		Name:       "problems",
		Columns:    ProblemsColumns,
		PrimaryKey: []*schema.Column{ProblemsColumns[0]},
	}
	// RecordsColumns holds the columns for the "records" table.
	RecordsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uuid", Type: field.TypeString, Unique: true},
		{Name: "user_uuid", Type: field.TypeString},
		{Name: "code", Type: field.TypeString, Size: 2147483647},
		{Name: "readability", Type: field.TypeInt, Default: 0},
		{Name: "modularity", Type: field.TypeInt, Default: 0},
		{Name: "efficiency", Type: field.TypeInt, Default: 0},
		{Name: "testability", Type: field.TypeInt, Default: 0},
		{Name: "maintainablity", Type: field.TypeInt, Default: 0},
	}
	// RecordsTable holds the schema information for the "records" table.
	RecordsTable = &schema.Table{
		Name:       "records",
		Columns:    RecordsColumns,
		PrimaryKey: []*schema.Column{RecordsColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uuid", Type: field.TypeString, Unique: true},
		{Name: "nickname", Type: field.TypeString},
		{Name: "elo_score", Type: field.TypeInt, Default: 1500},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// ProblemRecordsColumns holds the columns for the "problem_records" table.
	ProblemRecordsColumns = []*schema.Column{
		{Name: "problem_id", Type: field.TypeInt},
		{Name: "record_id", Type: field.TypeInt},
	}
	// ProblemRecordsTable holds the schema information for the "problem_records" table.
	ProblemRecordsTable = &schema.Table{
		Name:       "problem_records",
		Columns:    ProblemRecordsColumns,
		PrimaryKey: []*schema.Column{ProblemRecordsColumns[0], ProblemRecordsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "problem_records_problem_id",
				Columns:    []*schema.Column{ProblemRecordsColumns[0]},
				RefColumns: []*schema.Column{ProblemsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "problem_records_record_id",
				Columns:    []*schema.Column{ProblemRecordsColumns[1]},
				RefColumns: []*schema.Column{RecordsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ProblemsTable,
		RecordsTable,
		UsersTable,
		ProblemRecordsTable,
	}
)

func init() {
	ProblemRecordsTable.ForeignKeys[0].RefTable = ProblemsTable
	ProblemRecordsTable.ForeignKeys[1].RefTable = RecordsTable
}
