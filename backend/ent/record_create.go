// Code generated by ent, DO NOT EDIT.

package ent

import (
	"code-connect/ent/problem"
	"code-connect/ent/record"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RecordCreate is the builder for creating a Record entity.
type RecordCreate struct {
	config
	mutation *RecordMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (rc *RecordCreate) SetUUID(s string) *RecordCreate {
	rc.mutation.SetUUID(s)
	return rc
}

// SetUserUUID sets the "user_uuid" field.
func (rc *RecordCreate) SetUserUUID(s string) *RecordCreate {
	rc.mutation.SetUserUUID(s)
	return rc
}

// SetNillableUserUUID sets the "user_uuid" field if the given value is not nil.
func (rc *RecordCreate) SetNillableUserUUID(s *string) *RecordCreate {
	if s != nil {
		rc.SetUserUUID(*s)
	}
	return rc
}

// SetCode sets the "code" field.
func (rc *RecordCreate) SetCode(s string) *RecordCreate {
	rc.mutation.SetCode(s)
	return rc
}

// SetReadability sets the "readability" field.
func (rc *RecordCreate) SetReadability(i int) *RecordCreate {
	rc.mutation.SetReadability(i)
	return rc
}

// SetNillableReadability sets the "readability" field if the given value is not nil.
func (rc *RecordCreate) SetNillableReadability(i *int) *RecordCreate {
	if i != nil {
		rc.SetReadability(*i)
	}
	return rc
}

// SetRobustness sets the "robustness" field.
func (rc *RecordCreate) SetRobustness(i int) *RecordCreate {
	rc.mutation.SetRobustness(i)
	return rc
}

// SetNillableRobustness sets the "robustness" field if the given value is not nil.
func (rc *RecordCreate) SetNillableRobustness(i *int) *RecordCreate {
	if i != nil {
		rc.SetRobustness(*i)
	}
	return rc
}

// SetEfficiency sets the "efficiency" field.
func (rc *RecordCreate) SetEfficiency(i int) *RecordCreate {
	rc.mutation.SetEfficiency(i)
	return rc
}

// SetNillableEfficiency sets the "efficiency" field if the given value is not nil.
func (rc *RecordCreate) SetNillableEfficiency(i *int) *RecordCreate {
	if i != nil {
		rc.SetEfficiency(*i)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *RecordCreate) SetID(i int) *RecordCreate {
	rc.mutation.SetID(i)
	return rc
}

// SetProblemID sets the "problem" edge to the Problem entity by ID.
func (rc *RecordCreate) SetProblemID(id int) *RecordCreate {
	rc.mutation.SetProblemID(id)
	return rc
}

// SetProblem sets the "problem" edge to the Problem entity.
func (rc *RecordCreate) SetProblem(p *Problem) *RecordCreate {
	return rc.SetProblemID(p.ID)
}

// Mutation returns the RecordMutation object of the builder.
func (rc *RecordCreate) Mutation() *RecordMutation {
	return rc.mutation
}

// Save creates the Record in the database.
func (rc *RecordCreate) Save(ctx context.Context) (*Record, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RecordCreate) SaveX(ctx context.Context) *Record {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RecordCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RecordCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RecordCreate) defaults() {
	if _, ok := rc.mutation.UserUUID(); !ok {
		v := record.DefaultUserUUID
		rc.mutation.SetUserUUID(v)
	}
	if _, ok := rc.mutation.Readability(); !ok {
		v := record.DefaultReadability
		rc.mutation.SetReadability(v)
	}
	if _, ok := rc.mutation.Robustness(); !ok {
		v := record.DefaultRobustness
		rc.mutation.SetRobustness(v)
	}
	if _, ok := rc.mutation.Efficiency(); !ok {
		v := record.DefaultEfficiency
		rc.mutation.SetEfficiency(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RecordCreate) check() error {
	if _, ok := rc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "Record.uuid"`)}
	}
	if _, ok := rc.mutation.UserUUID(); !ok {
		return &ValidationError{Name: "user_uuid", err: errors.New(`ent: missing required field "Record.user_uuid"`)}
	}
	if _, ok := rc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Record.code"`)}
	}
	if _, ok := rc.mutation.Readability(); !ok {
		return &ValidationError{Name: "readability", err: errors.New(`ent: missing required field "Record.readability"`)}
	}
	if _, ok := rc.mutation.Robustness(); !ok {
		return &ValidationError{Name: "robustness", err: errors.New(`ent: missing required field "Record.robustness"`)}
	}
	if _, ok := rc.mutation.Efficiency(); !ok {
		return &ValidationError{Name: "efficiency", err: errors.New(`ent: missing required field "Record.efficiency"`)}
	}
	if _, ok := rc.mutation.ProblemID(); !ok {
		return &ValidationError{Name: "problem", err: errors.New(`ent: missing required edge "Record.problem"`)}
	}
	return nil
}

func (rc *RecordCreate) sqlSave(ctx context.Context) (*Record, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RecordCreate) createSpec() (*Record, *sqlgraph.CreateSpec) {
	var (
		_node = &Record{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(record.Table, sqlgraph.NewFieldSpec(record.FieldID, field.TypeInt))
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.UUID(); ok {
		_spec.SetField(record.FieldUUID, field.TypeString, value)
		_node.UUID = value
	}
	if value, ok := rc.mutation.UserUUID(); ok {
		_spec.SetField(record.FieldUserUUID, field.TypeString, value)
		_node.UserUUID = value
	}
	if value, ok := rc.mutation.Code(); ok {
		_spec.SetField(record.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := rc.mutation.Readability(); ok {
		_spec.SetField(record.FieldReadability, field.TypeInt, value)
		_node.Readability = value
	}
	if value, ok := rc.mutation.Robustness(); ok {
		_spec.SetField(record.FieldRobustness, field.TypeInt, value)
		_node.Robustness = value
	}
	if value, ok := rc.mutation.Efficiency(); ok {
		_spec.SetField(record.FieldEfficiency, field.TypeInt, value)
		_node.Efficiency = value
	}
	if nodes := rc.mutation.ProblemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   record.ProblemTable,
			Columns: []string{record.ProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.problem_records = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RecordCreateBulk is the builder for creating many Record entities in bulk.
type RecordCreateBulk struct {
	config
	builders []*RecordCreate
}

// Save creates the Record entities in the database.
func (rcb *RecordCreateBulk) Save(ctx context.Context) ([]*Record, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Record, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RecordCreateBulk) SaveX(ctx context.Context) []*Record {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RecordCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RecordCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
