// Code generated by ent, DO NOT EDIT.

package problem

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the problem type in the database.
	Label = "problem"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUUID holds the string denoting the uuid field in the database.
	FieldUUID = "uuid"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldLanguage holds the string denoting the language field in the database.
	FieldLanguage = "language"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldDifficulty holds the string denoting the difficulty field in the database.
	FieldDifficulty = "difficulty"
	// FieldReadability holds the string denoting the readability field in the database.
	FieldReadability = "readability"
	// FieldModularity holds the string denoting the modularity field in the database.
	FieldModularity = "modularity"
	// FieldEfficiency holds the string denoting the efficiency field in the database.
	FieldEfficiency = "efficiency"
	// FieldTestability holds the string denoting the testability field in the database.
	FieldTestability = "testability"
	// FieldMaintainablity holds the string denoting the maintainablity field in the database.
	FieldMaintainablity = "maintainablity"
	// EdgeRecords holds the string denoting the records edge name in mutations.
	EdgeRecords = "records"
	// Table holds the table name of the problem in the database.
	Table = "problems"
	// RecordsTable is the table that holds the records relation/edge. The primary key declared below.
	RecordsTable = "problem_records"
	// RecordsInverseTable is the table name for the Record entity.
	// It exists in this package in order to avoid circular dependency with the "record" package.
	RecordsInverseTable = "records"
)

// Columns holds all SQL columns for problem fields.
var Columns = []string{
	FieldID,
	FieldUUID,
	FieldCode,
	FieldTitle,
	FieldLanguage,
	FieldDescription,
	FieldDifficulty,
	FieldReadability,
	FieldModularity,
	FieldEfficiency,
	FieldTestability,
	FieldMaintainablity,
}

var (
	// RecordsPrimaryKey and RecordsColumn2 are the table columns denoting the
	// primary key for the records relation (M2M).
	RecordsPrimaryKey = []string{"problem_id", "record_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultDifficulty holds the default value on creation for the "difficulty" field.
	DefaultDifficulty int
	// DifficultyValidator is a validator for the "difficulty" field. It is called by the builders before save.
	DifficultyValidator func(int) error
	// DefaultReadability holds the default value on creation for the "readability" field.
	DefaultReadability int
	// DefaultModularity holds the default value on creation for the "modularity" field.
	DefaultModularity int
	// DefaultEfficiency holds the default value on creation for the "efficiency" field.
	DefaultEfficiency int
	// DefaultTestability holds the default value on creation for the "testability" field.
	DefaultTestability int
	// DefaultMaintainablity holds the default value on creation for the "maintainablity" field.
	DefaultMaintainablity int
)

// OrderOption defines the ordering options for the Problem queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUUID orders the results by the uuid field.
func ByUUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUUID, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByLanguage orders the results by the language field.
func ByLanguage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLanguage, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByDifficulty orders the results by the difficulty field.
func ByDifficulty(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDifficulty, opts...).ToFunc()
}

// ByReadability orders the results by the readability field.
func ByReadability(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReadability, opts...).ToFunc()
}

// ByModularity orders the results by the modularity field.
func ByModularity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModularity, opts...).ToFunc()
}

// ByEfficiency orders the results by the efficiency field.
func ByEfficiency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEfficiency, opts...).ToFunc()
}

// ByTestability orders the results by the testability field.
func ByTestability(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTestability, opts...).ToFunc()
}

// ByMaintainablity orders the results by the maintainablity field.
func ByMaintainablity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaintainablity, opts...).ToFunc()
}

// ByRecordsCount orders the results by records count.
func ByRecordsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRecordsStep(), opts...)
	}
}

// ByRecords orders the results by records terms.
func ByRecords(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRecordsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRecordsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RecordsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, RecordsTable, RecordsPrimaryKey...),
	)
}
