// Code generated by ent, DO NOT EDIT.

package ent

import (
	"code-connect/ent/problem"
	"code-connect/ent/record"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Record is the model entity for the Record schema.
type Record struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty" -`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid,omitempty" id`
	// UserUUID holds the value of the "user_uuid" field.
	UserUUID string `json:"user_uuid,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Readability holds the value of the "readability" field.
	Readability int `json:"readability,omitempty"`
	// Robustness holds the value of the "robustness" field.
	Robustness int `json:"robustness,omitempty"`
	// Efficiency holds the value of the "efficiency" field.
	Efficiency int `json:"efficiency,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RecordQuery when eager-loading is set.
	Edges           RecordEdges `json:"edges"`
	problem_records *int
	selectValues    sql.SelectValues
}

// RecordEdges holds the relations/edges for other nodes in the graph.
type RecordEdges struct {
	// Problem holds the value of the problem edge.
	Problem *Problem `json:"problem,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProblemOrErr returns the Problem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RecordEdges) ProblemOrErr() (*Problem, error) {
	if e.loadedTypes[0] {
		if e.Problem == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: problem.Label}
		}
		return e.Problem, nil
	}
	return nil, &NotLoadedError{edge: "problem"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Record) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case record.FieldID, record.FieldReadability, record.FieldRobustness, record.FieldEfficiency:
			values[i] = new(sql.NullInt64)
		case record.FieldUUID, record.FieldUserUUID, record.FieldCode:
			values[i] = new(sql.NullString)
		case record.ForeignKeys[0]: // problem_records
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Record fields.
func (r *Record) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case record.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case record.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				r.UUID = value.String
			}
		case record.FieldUserUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_uuid", values[i])
			} else if value.Valid {
				r.UserUUID = value.String
			}
		case record.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				r.Code = value.String
			}
		case record.FieldReadability:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field readability", values[i])
			} else if value.Valid {
				r.Readability = int(value.Int64)
			}
		case record.FieldRobustness:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field robustness", values[i])
			} else if value.Valid {
				r.Robustness = int(value.Int64)
			}
		case record.FieldEfficiency:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field efficiency", values[i])
			} else if value.Valid {
				r.Efficiency = int(value.Int64)
			}
		case record.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field problem_records", value)
			} else if value.Valid {
				r.problem_records = new(int)
				*r.problem_records = int(value.Int64)
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Record.
// This includes values selected through modifiers, order, etc.
func (r *Record) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryProblem queries the "problem" edge of the Record entity.
func (r *Record) QueryProblem() *ProblemQuery {
	return NewRecordClient(r.config).QueryProblem(r)
}

// Update returns a builder for updating this Record.
// Note that you need to call Record.Unwrap() before calling this method if this Record
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Record) Update() *RecordUpdateOne {
	return NewRecordClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Record entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Record) Unwrap() *Record {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Record is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Record) String() string {
	var builder strings.Builder
	builder.WriteString("Record(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("uuid=")
	builder.WriteString(r.UUID)
	builder.WriteString(", ")
	builder.WriteString("user_uuid=")
	builder.WriteString(r.UserUUID)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(r.Code)
	builder.WriteString(", ")
	builder.WriteString("readability=")
	builder.WriteString(fmt.Sprintf("%v", r.Readability))
	builder.WriteString(", ")
	builder.WriteString("robustness=")
	builder.WriteString(fmt.Sprintf("%v", r.Robustness))
	builder.WriteString(", ")
	builder.WriteString("efficiency=")
	builder.WriteString(fmt.Sprintf("%v", r.Efficiency))
	builder.WriteByte(')')
	return builder.String()
}

// Records is a parsable slice of Record.
type Records []*Record
