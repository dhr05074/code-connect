// Code generated by ent, DO NOT EDIT.

package ent

import (
	"code-connect/ent/problem"
	"code-connect/ent/record"
	"code-connect/ent/schema"
	"code-connect/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	problemFields := schema.Problem{}.Fields()
	_ = problemFields
	// problemDescDifficulty is the schema descriptor for difficulty field.
	problemDescDifficulty := problemFields[6].Descriptor()
	// problem.DefaultDifficulty holds the default value on creation for the difficulty field.
	problem.DefaultDifficulty = problemDescDifficulty.Default.(int)
	// problem.DifficultyValidator is a validator for the "difficulty" field. It is called by the builders before save.
	problem.DifficultyValidator = func() func(int) error {
		validators := problemDescDifficulty.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(difficulty int) error {
			for _, fn := range fns {
				if err := fn(difficulty); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// problemDescReadability is the schema descriptor for readability field.
	problemDescReadability := problemFields[7].Descriptor()
	// problem.DefaultReadability holds the default value on creation for the readability field.
	problem.DefaultReadability = problemDescReadability.Default.(int)
	// problemDescRobustness is the schema descriptor for robustness field.
	problemDescRobustness := problemFields[8].Descriptor()
	// problem.DefaultRobustness holds the default value on creation for the robustness field.
	problem.DefaultRobustness = problemDescRobustness.Default.(int)
	// problemDescEfficiency is the schema descriptor for efficiency field.
	problemDescEfficiency := problemFields[9].Descriptor()
	// problem.DefaultEfficiency holds the default value on creation for the efficiency field.
	problem.DefaultEfficiency = problemDescEfficiency.Default.(int)
	recordFields := schema.Record{}.Fields()
	_ = recordFields
	// recordDescUserUUID is the schema descriptor for user_uuid field.
	recordDescUserUUID := recordFields[2].Descriptor()
	// record.DefaultUserUUID holds the default value on creation for the user_uuid field.
	record.DefaultUserUUID = recordDescUserUUID.Default.(string)
	// recordDescReadability is the schema descriptor for readability field.
	recordDescReadability := recordFields[4].Descriptor()
	// record.DefaultReadability holds the default value on creation for the readability field.
	record.DefaultReadability = recordDescReadability.Default.(int)
	// recordDescRobustness is the schema descriptor for robustness field.
	recordDescRobustness := recordFields[5].Descriptor()
	// record.DefaultRobustness holds the default value on creation for the robustness field.
	record.DefaultRobustness = recordDescRobustness.Default.(int)
	// recordDescEfficiency is the schema descriptor for efficiency field.
	recordDescEfficiency := recordFields[6].Descriptor()
	// record.DefaultEfficiency holds the default value on creation for the efficiency field.
	record.DefaultEfficiency = recordDescEfficiency.Default.(int)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescEloScore is the schema descriptor for elo_score field.
	userDescEloScore := userFields[3].Descriptor()
	// user.DefaultEloScore holds the default value on creation for the elo_score field.
	user.DefaultEloScore = userDescEloScore.Default.(int)
}
