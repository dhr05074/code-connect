// Code generated by ent, DO NOT EDIT.

package ent

import (
	"code-connect/ent/predicate"
	"code-connect/ent/problem"
	"code-connect/ent/record"
	"code-connect/gateway"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProblemUpdate is the builder for updating Problem entities.
type ProblemUpdate struct {
	config
	hooks    []Hook
	mutation *ProblemMutation
}

// Where appends a list predicates to the ProblemUpdate builder.
func (pu *ProblemUpdate) Where(ps ...predicate.Problem) *ProblemUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUUID sets the "uuid" field.
func (pu *ProblemUpdate) SetUUID(s string) *ProblemUpdate {
	pu.mutation.SetUUID(s)
	return pu
}

// SetCode sets the "code" field.
func (pu *ProblemUpdate) SetCode(s string) *ProblemUpdate {
	pu.mutation.SetCode(s)
	return pu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (pu *ProblemUpdate) SetNillableCode(s *string) *ProblemUpdate {
	if s != nil {
		pu.SetCode(*s)
	}
	return pu
}

// ClearCode clears the value of the "code" field.
func (pu *ProblemUpdate) ClearCode() *ProblemUpdate {
	pu.mutation.ClearCode()
	return pu
}

// SetTitle sets the "title" field.
func (pu *ProblemUpdate) SetTitle(s string) *ProblemUpdate {
	pu.mutation.SetTitle(s)
	return pu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pu *ProblemUpdate) SetNillableTitle(s *string) *ProblemUpdate {
	if s != nil {
		pu.SetTitle(*s)
	}
	return pu
}

// ClearTitle clears the value of the "title" field.
func (pu *ProblemUpdate) ClearTitle() *ProblemUpdate {
	pu.mutation.ClearTitle()
	return pu
}

// SetLanguage sets the "language" field.
func (pu *ProblemUpdate) SetLanguage(gl gateway.ProgrammingLanguage) *ProblemUpdate {
	pu.mutation.SetLanguage(gl)
	return pu
}

// SetDescription sets the "description" field.
func (pu *ProblemUpdate) SetDescription(s string) *ProblemUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *ProblemUpdate) SetNillableDescription(s *string) *ProblemUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// ClearDescription clears the value of the "description" field.
func (pu *ProblemUpdate) ClearDescription() *ProblemUpdate {
	pu.mutation.ClearDescription()
	return pu
}

// SetDifficulty sets the "difficulty" field.
func (pu *ProblemUpdate) SetDifficulty(i int) *ProblemUpdate {
	pu.mutation.ResetDifficulty()
	pu.mutation.SetDifficulty(i)
	return pu
}

// SetNillableDifficulty sets the "difficulty" field if the given value is not nil.
func (pu *ProblemUpdate) SetNillableDifficulty(i *int) *ProblemUpdate {
	if i != nil {
		pu.SetDifficulty(*i)
	}
	return pu
}

// AddDifficulty adds i to the "difficulty" field.
func (pu *ProblemUpdate) AddDifficulty(i int) *ProblemUpdate {
	pu.mutation.AddDifficulty(i)
	return pu
}

// SetReadability sets the "readability" field.
func (pu *ProblemUpdate) SetReadability(i int) *ProblemUpdate {
	pu.mutation.ResetReadability()
	pu.mutation.SetReadability(i)
	return pu
}

// SetNillableReadability sets the "readability" field if the given value is not nil.
func (pu *ProblemUpdate) SetNillableReadability(i *int) *ProblemUpdate {
	if i != nil {
		pu.SetReadability(*i)
	}
	return pu
}

// AddReadability adds i to the "readability" field.
func (pu *ProblemUpdate) AddReadability(i int) *ProblemUpdate {
	pu.mutation.AddReadability(i)
	return pu
}

// SetModularity sets the "modularity" field.
func (pu *ProblemUpdate) SetModularity(i int) *ProblemUpdate {
	pu.mutation.ResetModularity()
	pu.mutation.SetModularity(i)
	return pu
}

// SetNillableModularity sets the "modularity" field if the given value is not nil.
func (pu *ProblemUpdate) SetNillableModularity(i *int) *ProblemUpdate {
	if i != nil {
		pu.SetModularity(*i)
	}
	return pu
}

// AddModularity adds i to the "modularity" field.
func (pu *ProblemUpdate) AddModularity(i int) *ProblemUpdate {
	pu.mutation.AddModularity(i)
	return pu
}

// SetEfficiency sets the "efficiency" field.
func (pu *ProblemUpdate) SetEfficiency(i int) *ProblemUpdate {
	pu.mutation.ResetEfficiency()
	pu.mutation.SetEfficiency(i)
	return pu
}

// SetNillableEfficiency sets the "efficiency" field if the given value is not nil.
func (pu *ProblemUpdate) SetNillableEfficiency(i *int) *ProblemUpdate {
	if i != nil {
		pu.SetEfficiency(*i)
	}
	return pu
}

// AddEfficiency adds i to the "efficiency" field.
func (pu *ProblemUpdate) AddEfficiency(i int) *ProblemUpdate {
	pu.mutation.AddEfficiency(i)
	return pu
}

// SetTestability sets the "testability" field.
func (pu *ProblemUpdate) SetTestability(i int) *ProblemUpdate {
	pu.mutation.ResetTestability()
	pu.mutation.SetTestability(i)
	return pu
}

// SetNillableTestability sets the "testability" field if the given value is not nil.
func (pu *ProblemUpdate) SetNillableTestability(i *int) *ProblemUpdate {
	if i != nil {
		pu.SetTestability(*i)
	}
	return pu
}

// AddTestability adds i to the "testability" field.
func (pu *ProblemUpdate) AddTestability(i int) *ProblemUpdate {
	pu.mutation.AddTestability(i)
	return pu
}

// SetMaintainablity sets the "maintainablity" field.
func (pu *ProblemUpdate) SetMaintainablity(i int) *ProblemUpdate {
	pu.mutation.ResetMaintainablity()
	pu.mutation.SetMaintainablity(i)
	return pu
}

// SetNillableMaintainablity sets the "maintainablity" field if the given value is not nil.
func (pu *ProblemUpdate) SetNillableMaintainablity(i *int) *ProblemUpdate {
	if i != nil {
		pu.SetMaintainablity(*i)
	}
	return pu
}

// AddMaintainablity adds i to the "maintainablity" field.
func (pu *ProblemUpdate) AddMaintainablity(i int) *ProblemUpdate {
	pu.mutation.AddMaintainablity(i)
	return pu
}

// AddRecordIDs adds the "records" edge to the Record entity by IDs.
func (pu *ProblemUpdate) AddRecordIDs(ids ...int) *ProblemUpdate {
	pu.mutation.AddRecordIDs(ids...)
	return pu
}

// AddRecords adds the "records" edges to the Record entity.
func (pu *ProblemUpdate) AddRecords(r ...*Record) *ProblemUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.AddRecordIDs(ids...)
}

// Mutation returns the ProblemMutation object of the builder.
func (pu *ProblemUpdate) Mutation() *ProblemMutation {
	return pu.mutation
}

// ClearRecords clears all "records" edges to the Record entity.
func (pu *ProblemUpdate) ClearRecords() *ProblemUpdate {
	pu.mutation.ClearRecords()
	return pu
}

// RemoveRecordIDs removes the "records" edge to Record entities by IDs.
func (pu *ProblemUpdate) RemoveRecordIDs(ids ...int) *ProblemUpdate {
	pu.mutation.RemoveRecordIDs(ids...)
	return pu
}

// RemoveRecords removes "records" edges to Record entities.
func (pu *ProblemUpdate) RemoveRecords(r ...*Record) *ProblemUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.RemoveRecordIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProblemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProblemUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProblemUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProblemUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProblemUpdate) check() error {
	if v, ok := pu.mutation.Difficulty(); ok {
		if err := problem.DifficultyValidator(v); err != nil {
			return &ValidationError{Name: "difficulty", err: fmt.Errorf(`ent: validator failed for field "Problem.difficulty": %w`, err)}
		}
	}
	return nil
}

func (pu *ProblemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(problem.Table, problem.Columns, sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UUID(); ok {
		_spec.SetField(problem.FieldUUID, field.TypeString, value)
	}
	if value, ok := pu.mutation.Code(); ok {
		_spec.SetField(problem.FieldCode, field.TypeString, value)
	}
	if pu.mutation.CodeCleared() {
		_spec.ClearField(problem.FieldCode, field.TypeString)
	}
	if value, ok := pu.mutation.Title(); ok {
		_spec.SetField(problem.FieldTitle, field.TypeString, value)
	}
	if pu.mutation.TitleCleared() {
		_spec.ClearField(problem.FieldTitle, field.TypeString)
	}
	if value, ok := pu.mutation.Language(); ok {
		_spec.SetField(problem.FieldLanguage, field.TypeString, value)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(problem.FieldDescription, field.TypeString, value)
	}
	if pu.mutation.DescriptionCleared() {
		_spec.ClearField(problem.FieldDescription, field.TypeString)
	}
	if value, ok := pu.mutation.Difficulty(); ok {
		_spec.SetField(problem.FieldDifficulty, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedDifficulty(); ok {
		_spec.AddField(problem.FieldDifficulty, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Readability(); ok {
		_spec.SetField(problem.FieldReadability, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedReadability(); ok {
		_spec.AddField(problem.FieldReadability, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Modularity(); ok {
		_spec.SetField(problem.FieldModularity, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedModularity(); ok {
		_spec.AddField(problem.FieldModularity, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Efficiency(); ok {
		_spec.SetField(problem.FieldEfficiency, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedEfficiency(); ok {
		_spec.AddField(problem.FieldEfficiency, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Testability(); ok {
		_spec.SetField(problem.FieldTestability, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedTestability(); ok {
		_spec.AddField(problem.FieldTestability, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Maintainablity(); ok {
		_spec.SetField(problem.FieldMaintainablity, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedMaintainablity(); ok {
		_spec.AddField(problem.FieldMaintainablity, field.TypeInt, value)
	}
	if pu.mutation.RecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   problem.RecordsTable,
			Columns: problem.RecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(record.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedRecordsIDs(); len(nodes) > 0 && !pu.mutation.RecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   problem.RecordsTable,
			Columns: problem.RecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(record.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   problem.RecordsTable,
			Columns: problem.RecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(record.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{problem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProblemUpdateOne is the builder for updating a single Problem entity.
type ProblemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProblemMutation
}

// SetUUID sets the "uuid" field.
func (puo *ProblemUpdateOne) SetUUID(s string) *ProblemUpdateOne {
	puo.mutation.SetUUID(s)
	return puo
}

// SetCode sets the "code" field.
func (puo *ProblemUpdateOne) SetCode(s string) *ProblemUpdateOne {
	puo.mutation.SetCode(s)
	return puo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (puo *ProblemUpdateOne) SetNillableCode(s *string) *ProblemUpdateOne {
	if s != nil {
		puo.SetCode(*s)
	}
	return puo
}

// ClearCode clears the value of the "code" field.
func (puo *ProblemUpdateOne) ClearCode() *ProblemUpdateOne {
	puo.mutation.ClearCode()
	return puo
}

// SetTitle sets the "title" field.
func (puo *ProblemUpdateOne) SetTitle(s string) *ProblemUpdateOne {
	puo.mutation.SetTitle(s)
	return puo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (puo *ProblemUpdateOne) SetNillableTitle(s *string) *ProblemUpdateOne {
	if s != nil {
		puo.SetTitle(*s)
	}
	return puo
}

// ClearTitle clears the value of the "title" field.
func (puo *ProblemUpdateOne) ClearTitle() *ProblemUpdateOne {
	puo.mutation.ClearTitle()
	return puo
}

// SetLanguage sets the "language" field.
func (puo *ProblemUpdateOne) SetLanguage(gl gateway.ProgrammingLanguage) *ProblemUpdateOne {
	puo.mutation.SetLanguage(gl)
	return puo
}

// SetDescription sets the "description" field.
func (puo *ProblemUpdateOne) SetDescription(s string) *ProblemUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *ProblemUpdateOne) SetNillableDescription(s *string) *ProblemUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// ClearDescription clears the value of the "description" field.
func (puo *ProblemUpdateOne) ClearDescription() *ProblemUpdateOne {
	puo.mutation.ClearDescription()
	return puo
}

// SetDifficulty sets the "difficulty" field.
func (puo *ProblemUpdateOne) SetDifficulty(i int) *ProblemUpdateOne {
	puo.mutation.ResetDifficulty()
	puo.mutation.SetDifficulty(i)
	return puo
}

// SetNillableDifficulty sets the "difficulty" field if the given value is not nil.
func (puo *ProblemUpdateOne) SetNillableDifficulty(i *int) *ProblemUpdateOne {
	if i != nil {
		puo.SetDifficulty(*i)
	}
	return puo
}

// AddDifficulty adds i to the "difficulty" field.
func (puo *ProblemUpdateOne) AddDifficulty(i int) *ProblemUpdateOne {
	puo.mutation.AddDifficulty(i)
	return puo
}

// SetReadability sets the "readability" field.
func (puo *ProblemUpdateOne) SetReadability(i int) *ProblemUpdateOne {
	puo.mutation.ResetReadability()
	puo.mutation.SetReadability(i)
	return puo
}

// SetNillableReadability sets the "readability" field if the given value is not nil.
func (puo *ProblemUpdateOne) SetNillableReadability(i *int) *ProblemUpdateOne {
	if i != nil {
		puo.SetReadability(*i)
	}
	return puo
}

// AddReadability adds i to the "readability" field.
func (puo *ProblemUpdateOne) AddReadability(i int) *ProblemUpdateOne {
	puo.mutation.AddReadability(i)
	return puo
}

// SetModularity sets the "modularity" field.
func (puo *ProblemUpdateOne) SetModularity(i int) *ProblemUpdateOne {
	puo.mutation.ResetModularity()
	puo.mutation.SetModularity(i)
	return puo
}

// SetNillableModularity sets the "modularity" field if the given value is not nil.
func (puo *ProblemUpdateOne) SetNillableModularity(i *int) *ProblemUpdateOne {
	if i != nil {
		puo.SetModularity(*i)
	}
	return puo
}

// AddModularity adds i to the "modularity" field.
func (puo *ProblemUpdateOne) AddModularity(i int) *ProblemUpdateOne {
	puo.mutation.AddModularity(i)
	return puo
}

// SetEfficiency sets the "efficiency" field.
func (puo *ProblemUpdateOne) SetEfficiency(i int) *ProblemUpdateOne {
	puo.mutation.ResetEfficiency()
	puo.mutation.SetEfficiency(i)
	return puo
}

// SetNillableEfficiency sets the "efficiency" field if the given value is not nil.
func (puo *ProblemUpdateOne) SetNillableEfficiency(i *int) *ProblemUpdateOne {
	if i != nil {
		puo.SetEfficiency(*i)
	}
	return puo
}

// AddEfficiency adds i to the "efficiency" field.
func (puo *ProblemUpdateOne) AddEfficiency(i int) *ProblemUpdateOne {
	puo.mutation.AddEfficiency(i)
	return puo
}

// SetTestability sets the "testability" field.
func (puo *ProblemUpdateOne) SetTestability(i int) *ProblemUpdateOne {
	puo.mutation.ResetTestability()
	puo.mutation.SetTestability(i)
	return puo
}

// SetNillableTestability sets the "testability" field if the given value is not nil.
func (puo *ProblemUpdateOne) SetNillableTestability(i *int) *ProblemUpdateOne {
	if i != nil {
		puo.SetTestability(*i)
	}
	return puo
}

// AddTestability adds i to the "testability" field.
func (puo *ProblemUpdateOne) AddTestability(i int) *ProblemUpdateOne {
	puo.mutation.AddTestability(i)
	return puo
}

// SetMaintainablity sets the "maintainablity" field.
func (puo *ProblemUpdateOne) SetMaintainablity(i int) *ProblemUpdateOne {
	puo.mutation.ResetMaintainablity()
	puo.mutation.SetMaintainablity(i)
	return puo
}

// SetNillableMaintainablity sets the "maintainablity" field if the given value is not nil.
func (puo *ProblemUpdateOne) SetNillableMaintainablity(i *int) *ProblemUpdateOne {
	if i != nil {
		puo.SetMaintainablity(*i)
	}
	return puo
}

// AddMaintainablity adds i to the "maintainablity" field.
func (puo *ProblemUpdateOne) AddMaintainablity(i int) *ProblemUpdateOne {
	puo.mutation.AddMaintainablity(i)
	return puo
}

// AddRecordIDs adds the "records" edge to the Record entity by IDs.
func (puo *ProblemUpdateOne) AddRecordIDs(ids ...int) *ProblemUpdateOne {
	puo.mutation.AddRecordIDs(ids...)
	return puo
}

// AddRecords adds the "records" edges to the Record entity.
func (puo *ProblemUpdateOne) AddRecords(r ...*Record) *ProblemUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.AddRecordIDs(ids...)
}

// Mutation returns the ProblemMutation object of the builder.
func (puo *ProblemUpdateOne) Mutation() *ProblemMutation {
	return puo.mutation
}

// ClearRecords clears all "records" edges to the Record entity.
func (puo *ProblemUpdateOne) ClearRecords() *ProblemUpdateOne {
	puo.mutation.ClearRecords()
	return puo
}

// RemoveRecordIDs removes the "records" edge to Record entities by IDs.
func (puo *ProblemUpdateOne) RemoveRecordIDs(ids ...int) *ProblemUpdateOne {
	puo.mutation.RemoveRecordIDs(ids...)
	return puo
}

// RemoveRecords removes "records" edges to Record entities.
func (puo *ProblemUpdateOne) RemoveRecords(r ...*Record) *ProblemUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.RemoveRecordIDs(ids...)
}

// Where appends a list predicates to the ProblemUpdate builder.
func (puo *ProblemUpdateOne) Where(ps ...predicate.Problem) *ProblemUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProblemUpdateOne) Select(field string, fields ...string) *ProblemUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Problem entity.
func (puo *ProblemUpdateOne) Save(ctx context.Context) (*Problem, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProblemUpdateOne) SaveX(ctx context.Context) *Problem {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProblemUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProblemUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProblemUpdateOne) check() error {
	if v, ok := puo.mutation.Difficulty(); ok {
		if err := problem.DifficultyValidator(v); err != nil {
			return &ValidationError{Name: "difficulty", err: fmt.Errorf(`ent: validator failed for field "Problem.difficulty": %w`, err)}
		}
	}
	return nil
}

func (puo *ProblemUpdateOne) sqlSave(ctx context.Context) (_node *Problem, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(problem.Table, problem.Columns, sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Problem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, problem.FieldID)
		for _, f := range fields {
			if !problem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != problem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UUID(); ok {
		_spec.SetField(problem.FieldUUID, field.TypeString, value)
	}
	if value, ok := puo.mutation.Code(); ok {
		_spec.SetField(problem.FieldCode, field.TypeString, value)
	}
	if puo.mutation.CodeCleared() {
		_spec.ClearField(problem.FieldCode, field.TypeString)
	}
	if value, ok := puo.mutation.Title(); ok {
		_spec.SetField(problem.FieldTitle, field.TypeString, value)
	}
	if puo.mutation.TitleCleared() {
		_spec.ClearField(problem.FieldTitle, field.TypeString)
	}
	if value, ok := puo.mutation.Language(); ok {
		_spec.SetField(problem.FieldLanguage, field.TypeString, value)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(problem.FieldDescription, field.TypeString, value)
	}
	if puo.mutation.DescriptionCleared() {
		_spec.ClearField(problem.FieldDescription, field.TypeString)
	}
	if value, ok := puo.mutation.Difficulty(); ok {
		_spec.SetField(problem.FieldDifficulty, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedDifficulty(); ok {
		_spec.AddField(problem.FieldDifficulty, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Readability(); ok {
		_spec.SetField(problem.FieldReadability, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedReadability(); ok {
		_spec.AddField(problem.FieldReadability, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Modularity(); ok {
		_spec.SetField(problem.FieldModularity, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedModularity(); ok {
		_spec.AddField(problem.FieldModularity, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Efficiency(); ok {
		_spec.SetField(problem.FieldEfficiency, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedEfficiency(); ok {
		_spec.AddField(problem.FieldEfficiency, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Testability(); ok {
		_spec.SetField(problem.FieldTestability, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedTestability(); ok {
		_spec.AddField(problem.FieldTestability, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Maintainablity(); ok {
		_spec.SetField(problem.FieldMaintainablity, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedMaintainablity(); ok {
		_spec.AddField(problem.FieldMaintainablity, field.TypeInt, value)
	}
	if puo.mutation.RecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   problem.RecordsTable,
			Columns: problem.RecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(record.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedRecordsIDs(); len(nodes) > 0 && !puo.mutation.RecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   problem.RecordsTable,
			Columns: problem.RecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(record.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   problem.RecordsTable,
			Columns: problem.RecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(record.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Problem{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{problem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
