// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	ai "code-connect/pkg/ai"

	mock "github.com/stretchr/testify/mock"
)

// GPTClientGenerator is an autogenerated mock type for the GPTClientGenerator type
type GPTClientGenerator struct {
	mock.Mock
}

type GPTClientGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *GPTClientGenerator) EXPECT() *GPTClientGenerator_Expecter {
	return &GPTClientGenerator_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields:
func (_m *GPTClientGenerator) Execute() (ai.GPTClient, error) {
	ret := _m.Called()

	var r0 ai.GPTClient
	var r1 error
	if rf, ok := ret.Get(0).(func() (ai.GPTClient, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() ai.GPTClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ai.GPTClient)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GPTClientGenerator_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type GPTClientGenerator_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
func (_e *GPTClientGenerator_Expecter) Execute() *GPTClientGenerator_Execute_Call {
	return &GPTClientGenerator_Execute_Call{Call: _e.mock.On("Execute")}
}

func (_c *GPTClientGenerator_Execute_Call) Run(run func()) *GPTClientGenerator_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GPTClientGenerator_Execute_Call) Return(_a0 ai.GPTClient, _a1 error) *GPTClientGenerator_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GPTClientGenerator_Execute_Call) RunAndReturn(run func() (ai.GPTClient, error)) *GPTClientGenerator_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewGPTClientGenerator creates a new instance of GPTClientGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGPTClientGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *GPTClientGenerator {
	mock := &GPTClientGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
