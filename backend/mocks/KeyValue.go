// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// KeyValue is an autogenerated mock type for the KeyValue type
type KeyValue struct {
	mock.Mock
}

type KeyValue_Expecter struct {
	mock *mock.Mock
}

func (_m *KeyValue) EXPECT() *KeyValue_Expecter {
	return &KeyValue_Expecter{mock: &_m.Mock}
}

// Expire provides a mock function with given fields: ctx, key, expiration
func (_m *KeyValue) Expire(ctx context.Context, key string, expiration time.Duration) error {
	ret := _m.Called(ctx, key, expiration)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) error); ok {
		r0 = rf(ctx, key, expiration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// KeyValue_Expire_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Expire'
type KeyValue_Expire_Call struct {
	*mock.Call
}

// Expire is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - expiration time.Duration
func (_e *KeyValue_Expecter) Expire(ctx interface{}, key interface{}, expiration interface{}) *KeyValue_Expire_Call {
	return &KeyValue_Expire_Call{Call: _e.mock.On("Expire", ctx, key, expiration)}
}

func (_c *KeyValue_Expire_Call) Run(run func(ctx context.Context, key string, expiration time.Duration)) *KeyValue_Expire_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration))
	})
	return _c
}

func (_c *KeyValue_Expire_Call) Return(_a0 error) *KeyValue_Expire_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KeyValue_Expire_Call) RunAndReturn(run func(context.Context, string, time.Duration) error) *KeyValue_Expire_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, key
func (_m *KeyValue) Get(ctx context.Context, key string) (string, error) {
	ret := _m.Called(ctx, key)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeyValue_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type KeyValue_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *KeyValue_Expecter) Get(ctx interface{}, key interface{}) *KeyValue_Get_Call {
	return &KeyValue_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *KeyValue_Get_Call) Run(run func(ctx context.Context, key string)) *KeyValue_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *KeyValue_Get_Call) Return(_a0 string, _a1 error) *KeyValue_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeyValue_Get_Call) RunAndReturn(run func(context.Context, string) (string, error)) *KeyValue_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Incr provides a mock function with given fields: ctx, key
func (_m *KeyValue) Incr(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// KeyValue_Incr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Incr'
type KeyValue_Incr_Call struct {
	*mock.Call
}

// Incr is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *KeyValue_Expecter) Incr(ctx interface{}, key interface{}) *KeyValue_Incr_Call {
	return &KeyValue_Incr_Call{Call: _e.mock.On("Incr", ctx, key)}
}

func (_c *KeyValue_Incr_Call) Run(run func(ctx context.Context, key string)) *KeyValue_Incr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *KeyValue_Incr_Call) Return(_a0 error) *KeyValue_Incr_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KeyValue_Incr_Call) RunAndReturn(run func(context.Context, string) error) *KeyValue_Incr_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, key, value
func (_m *KeyValue) Set(ctx context.Context, key string, value string) error {
	ret := _m.Called(ctx, key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// KeyValue_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type KeyValue_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value string
func (_e *KeyValue_Expecter) Set(ctx interface{}, key interface{}, value interface{}) *KeyValue_Set_Call {
	return &KeyValue_Set_Call{Call: _e.mock.On("Set", ctx, key, value)}
}

func (_c *KeyValue_Set_Call) Run(run func(ctx context.Context, key string, value string)) *KeyValue_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *KeyValue_Set_Call) Return(_a0 error) *KeyValue_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KeyValue_Set_Call) RunAndReturn(run func(context.Context, string, string) error) *KeyValue_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewKeyValue creates a new instance of KeyValue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKeyValue(t interface {
	mock.TestingT
	Cleanup(func())
}) *KeyValue {
	mock := &KeyValue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
