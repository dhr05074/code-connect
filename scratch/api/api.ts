/* tslint:disable */
/* eslint-disable */
/**
 * CodeConnect
 * CodeConnect API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CreateProblem202Response
 */
export interface CreateProblem202Response {
    /**
     * This ID is given upon request. This ID allows the requested resource to be returned.
     * @type {string}
     * @memberof CreateProblem202Response
     */
    'request_id': string;
}
/**
 * 
 * @export
 * @interface CreateProblem400Response
 */
export interface CreateProblem400Response {
    /**
     * Error message
     * @type {string}
     * @memberof CreateProblem400Response
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface CreateProblemRequest
 */
export interface CreateProblemRequest {
    /**
     * 문제 출제 시 사용할 프로그래밍 언어입니다.
     * @type {string}
     * @memberof CreateProblemRequest
     */
    'language': string;
    /**
     * 문제의 난이도입니다. 1부터 100까지의 정수로 입력합니다. 
     * @type {number}
     * @memberof CreateProblemRequest
     */
    'difficulty'?: number;
}
/**
 * 
 * @export
 * @interface GetProblem200Response
 */
export interface GetProblem200Response {
    /**
     * 
     * @type {Problem}
     * @memberof GetProblem200Response
     */
    'problem': Problem;
}
/**
 * 
 * @export
 * @interface GetProblem404Response
 */
export interface GetProblem404Response {
    /**
     * Error message
     * @type {string}
     * @memberof GetProblem404Response
     */
    'message': string;
}
/**
 * 사용자가 입력한 `language`와 `estimated_time`에 따라 자동으로 생성된 문제입니다. 
 * @export
 * @interface Problem
 */
export interface Problem {
    /**
     * ID of the problem.
     * @type {string}
     * @memberof Problem
     */
    'problem_id': string;
    /**
     * 문제의 제목입니다. 사용자가 문제를 이해하는 데 도움이 되는 정보를 제공합니다. 
     * @type {string}
     * @memberof Problem
     */
    'title': string;
    /**
     * 문제의 배경 설명입니다. 사용자가 문제를 이해하는 데 도움이 되는 정보를 제공합니다. 
     * @type {string}
     * @memberof Problem
     */
    'background': string;
    /**
     * 생성된 코드입니다. Base64로 인코딩되어 있으니, 화면에 출력하기 위해 디코딩이 필요합니다. 
     * @type {string}
     * @memberof Problem
     */
    'code': string;
    /**
     * 초보 프로그래머 기준 문제 풀이 예상 소요 시간입니다. 분 단위로 입력합니다.  입력하지 않을 경우 기본값으로 30분이 설정됩니다. 
     * @type {number}
     * @memberof Problem
     */
    'estimated_time': number;
}
/**
 * 
 * @export
 * @interface SubmitSolution200Response
 */
export interface SubmitSolution200Response {
    /**
     * Score of the solution out of 100.
     * @type {string}
     * @memberof SubmitSolution200Response
     */
    'score': string;
}
/**
 * 
 * @export
 * @interface SubmitSolutionRequest
 */
export interface SubmitSolutionRequest {
    /**
     * 문제 풀이에 사용할 코드입니다. 코드는 Base64로 인코딩되어야 합니다. 
     * @type {string}
     * @memberof SubmitSolutionRequest
     */
    'code': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 로그인한 사용자의 정보와 입력한 언어를 바탕으로 최적의 문제를 만듭니다. 문제 생성에는 시간이 소요되므로 `202` 코드를 반환합니다. 문제 생성 완료 후 `/problems/:request_id` 에서 문제를 확인할 수 있습니다. 
         * @summary 문제를 만듭니다.
         * @param {CreateProblemRequest} createProblemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProblem: async (createProblemRequest: CreateProblemRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProblemRequest' is not null or undefined
            assertParamExists('createProblem', 'createProblemRequest', createProblemRequest)
            const localVarPath = `/problems`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProblemRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 문제 생성 요청 후 반환된 요청 ID를 통해 문제를 조회합니다. 문제가 생성되지 않은 경우 404를 반환합니다. 
         * @summary 문제를 조회합니다.
         * @param {string} requestId 문제 생성 요청 후 반환된 요청 ID입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProblem: async (requestId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestId' is not null or undefined
            assertParamExists('getProblem', 'requestId', requestId)
            const localVarPath = `/problems/{request_id}`
                .replace(`{${"request_id"}}`, encodeURIComponent(String(requestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 문제 풀이를 제출합니다. 문제 풀이에는 시간이 소요되므로 202를 반환합니다. 문제 풀이 완료 후 `/report/:request_id` 에서 풀이 결과를 확인할 수 있습니다. 
         * @summary 문제 풀이를 제출합니다.
         * @param {string} requestId 문제 생성 요청 후 반환된 요청 ID입니다.
         * @param {SubmitSolutionRequest} submitSolutionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitSolution: async (requestId: string, submitSolutionRequest: SubmitSolutionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestId' is not null or undefined
            assertParamExists('submitSolution', 'requestId', requestId)
            // verify required parameter 'submitSolutionRequest' is not null or undefined
            assertParamExists('submitSolution', 'submitSolutionRequest', submitSolutionRequest)
            const localVarPath = `/submit/{request_id}`
                .replace(`{${"request_id"}}`, encodeURIComponent(String(requestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(submitSolutionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 로그인한 사용자의 정보와 입력한 언어를 바탕으로 최적의 문제를 만듭니다. 문제 생성에는 시간이 소요되므로 `202` 코드를 반환합니다. 문제 생성 완료 후 `/problems/:request_id` 에서 문제를 확인할 수 있습니다. 
         * @summary 문제를 만듭니다.
         * @param {CreateProblemRequest} createProblemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProblem(createProblemRequest: CreateProblemRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateProblem202Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProblem(createProblemRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 문제 생성 요청 후 반환된 요청 ID를 통해 문제를 조회합니다. 문제가 생성되지 않은 경우 404를 반환합니다. 
         * @summary 문제를 조회합니다.
         * @param {string} requestId 문제 생성 요청 후 반환된 요청 ID입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProblem(requestId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetProblem200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProblem(requestId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 문제 풀이를 제출합니다. 문제 풀이에는 시간이 소요되므로 202를 반환합니다. 문제 풀이 완료 후 `/report/:request_id` 에서 풀이 결과를 확인할 수 있습니다. 
         * @summary 문제 풀이를 제출합니다.
         * @param {string} requestId 문제 생성 요청 후 반환된 요청 ID입니다.
         * @param {SubmitSolutionRequest} submitSolutionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitSolution(requestId: string, submitSolutionRequest: SubmitSolutionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubmitSolution200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitSolution(requestId, submitSolutionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 로그인한 사용자의 정보와 입력한 언어를 바탕으로 최적의 문제를 만듭니다. 문제 생성에는 시간이 소요되므로 `202` 코드를 반환합니다. 문제 생성 완료 후 `/problems/:request_id` 에서 문제를 확인할 수 있습니다. 
         * @summary 문제를 만듭니다.
         * @param {CreateProblemRequest} createProblemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProblem(createProblemRequest: CreateProblemRequest, options?: any): AxiosPromise<CreateProblem202Response> {
            return localVarFp.createProblem(createProblemRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 문제 생성 요청 후 반환된 요청 ID를 통해 문제를 조회합니다. 문제가 생성되지 않은 경우 404를 반환합니다. 
         * @summary 문제를 조회합니다.
         * @param {string} requestId 문제 생성 요청 후 반환된 요청 ID입니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProblem(requestId: string, options?: any): AxiosPromise<GetProblem200Response> {
            return localVarFp.getProblem(requestId, options).then((request) => request(axios, basePath));
        },
        /**
         * 문제 풀이를 제출합니다. 문제 풀이에는 시간이 소요되므로 202를 반환합니다. 문제 풀이 완료 후 `/report/:request_id` 에서 풀이 결과를 확인할 수 있습니다. 
         * @summary 문제 풀이를 제출합니다.
         * @param {string} requestId 문제 생성 요청 후 반환된 요청 ID입니다.
         * @param {SubmitSolutionRequest} submitSolutionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitSolution(requestId: string, submitSolutionRequest: SubmitSolutionRequest, options?: any): AxiosPromise<SubmitSolution200Response> {
            return localVarFp.submitSolution(requestId, submitSolutionRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 로그인한 사용자의 정보와 입력한 언어를 바탕으로 최적의 문제를 만듭니다. 문제 생성에는 시간이 소요되므로 `202` 코드를 반환합니다. 문제 생성 완료 후 `/problems/:request_id` 에서 문제를 확인할 수 있습니다. 
     * @summary 문제를 만듭니다.
     * @param {CreateProblemRequest} createProblemRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createProblem(createProblemRequest: CreateProblemRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createProblem(createProblemRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 문제 생성 요청 후 반환된 요청 ID를 통해 문제를 조회합니다. 문제가 생성되지 않은 경우 404를 반환합니다. 
     * @summary 문제를 조회합니다.
     * @param {string} requestId 문제 생성 요청 후 반환된 요청 ID입니다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProblem(requestId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getProblem(requestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 문제 풀이를 제출합니다. 문제 풀이에는 시간이 소요되므로 202를 반환합니다. 문제 풀이 완료 후 `/report/:request_id` 에서 풀이 결과를 확인할 수 있습니다. 
     * @summary 문제 풀이를 제출합니다.
     * @param {string} requestId 문제 생성 요청 후 반환된 요청 ID입니다.
     * @param {SubmitSolutionRequest} submitSolutionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public submitSolution(requestId: string, submitSolutionRequest: SubmitSolutionRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).submitSolution(requestId, submitSolutionRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


