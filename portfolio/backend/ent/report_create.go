// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"portfolio/ent/report"
	"portfolio/schema"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReportCreate is the builder for creating a Report entity.
type ReportCreate struct {
	config
	mutation *ReportMutation
	hooks    []Hook
}

// SetRequestID sets the "request_id" field.
func (rc *ReportCreate) SetRequestID(s string) *ReportCreate {
	rc.mutation.SetRequestID(s)
	return rc
}

// SetStatus sets the "status" field.
func (rc *ReportCreate) SetStatus(s string) *ReportCreate {
	rc.mutation.SetStatus(s)
	return rc
}

// SetProjectFeedbacks sets the "project_feedbacks" field.
func (rc *ReportCreate) SetProjectFeedbacks(s []schema.Feedback) *ReportCreate {
	rc.mutation.SetProjectFeedbacks(s)
	return rc
}

// SetTechStackFeedbacks sets the "tech_stack_feedbacks" field.
func (rc *ReportCreate) SetTechStackFeedbacks(s []schema.Feedback) *ReportCreate {
	rc.mutation.SetTechStackFeedbacks(s)
	return rc
}

// SetProjectRecommendations sets the "project_recommendations" field.
func (rc *ReportCreate) SetProjectRecommendations(s []schema.Recommendation) *ReportCreate {
	rc.mutation.SetProjectRecommendations(s)
	return rc
}

// SetTechStackRecommendations sets the "tech_stack_recommendations" field.
func (rc *ReportCreate) SetTechStackRecommendations(s []schema.Recommendation) *ReportCreate {
	rc.mutation.SetTechStackRecommendations(s)
	return rc
}

// Mutation returns the ReportMutation object of the builder.
func (rc *ReportCreate) Mutation() *ReportMutation {
	return rc.mutation
}

// Save creates the Report in the database.
func (rc *ReportCreate) Save(ctx context.Context) (*Report, error) {
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ReportCreate) SaveX(ctx context.Context) *Report {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *ReportCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *ReportCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *ReportCreate) check() error {
	if _, ok := rc.mutation.RequestID(); !ok {
		return &ValidationError{Name: "request_id", err: errors.New(`ent: missing required field "Report.request_id"`)}
	}
	if _, ok := rc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Report.status"`)}
	}
	if _, ok := rc.mutation.ProjectFeedbacks(); !ok {
		return &ValidationError{Name: "project_feedbacks", err: errors.New(`ent: missing required field "Report.project_feedbacks"`)}
	}
	if _, ok := rc.mutation.TechStackFeedbacks(); !ok {
		return &ValidationError{Name: "tech_stack_feedbacks", err: errors.New(`ent: missing required field "Report.tech_stack_feedbacks"`)}
	}
	if _, ok := rc.mutation.ProjectRecommendations(); !ok {
		return &ValidationError{Name: "project_recommendations", err: errors.New(`ent: missing required field "Report.project_recommendations"`)}
	}
	if _, ok := rc.mutation.TechStackRecommendations(); !ok {
		return &ValidationError{Name: "tech_stack_recommendations", err: errors.New(`ent: missing required field "Report.tech_stack_recommendations"`)}
	}
	return nil
}

func (rc *ReportCreate) sqlSave(ctx context.Context) (*Report, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *ReportCreate) createSpec() (*Report, *sqlgraph.CreateSpec) {
	var (
		_node = &Report{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(report.Table, sqlgraph.NewFieldSpec(report.FieldID, field.TypeInt))
	)
	if value, ok := rc.mutation.RequestID(); ok {
		_spec.SetField(report.FieldRequestID, field.TypeString, value)
		_node.RequestID = value
	}
	if value, ok := rc.mutation.Status(); ok {
		_spec.SetField(report.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := rc.mutation.ProjectFeedbacks(); ok {
		_spec.SetField(report.FieldProjectFeedbacks, field.TypeJSON, value)
		_node.ProjectFeedbacks = value
	}
	if value, ok := rc.mutation.TechStackFeedbacks(); ok {
		_spec.SetField(report.FieldTechStackFeedbacks, field.TypeJSON, value)
		_node.TechStackFeedbacks = value
	}
	if value, ok := rc.mutation.ProjectRecommendations(); ok {
		_spec.SetField(report.FieldProjectRecommendations, field.TypeJSON, value)
		_node.ProjectRecommendations = value
	}
	if value, ok := rc.mutation.TechStackRecommendations(); ok {
		_spec.SetField(report.FieldTechStackRecommendations, field.TypeJSON, value)
		_node.TechStackRecommendations = value
	}
	return _node, _spec
}

// ReportCreateBulk is the builder for creating many Report entities in bulk.
type ReportCreateBulk struct {
	config
	builders []*ReportCreate
}

// Save creates the Report entities in the database.
func (rcb *ReportCreateBulk) Save(ctx context.Context) ([]*Report, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Report, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReportMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *ReportCreateBulk) SaveX(ctx context.Context) []*Report {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *ReportCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *ReportCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
