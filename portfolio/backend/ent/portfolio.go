// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"portfolio/ent/portfolio"
	"portfolio/schema"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Portfolio is the model entity for the Portfolio schema.
type Portfolio struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// RequestID holds the value of the "request_id" field.
	RequestID string `json:"request_id,omitempty"`
	// Job holds the value of the "job" field.
	Job string `json:"job,omitempty"`
	// CareerYears holds the value of the "career_years" field.
	CareerYears uint `json:"career_years,omitempty"`
	// TechStacks holds the value of the "tech_stacks" field.
	TechStacks []string `json:"tech_stacks,omitempty"`
	// Projects holds the value of the "projects" field.
	Projects []schema.Project `json:"projects,omitempty"`
	// PreferredCompany holds the value of the "preferred_company" field.
	PreferredCompany string `json:"preferred_company,omitempty"`
	selectValues     sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Portfolio) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case portfolio.FieldTechStacks, portfolio.FieldProjects:
			values[i] = new([]byte)
		case portfolio.FieldID, portfolio.FieldCareerYears:
			values[i] = new(sql.NullInt64)
		case portfolio.FieldRequestID, portfolio.FieldJob, portfolio.FieldPreferredCompany:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Portfolio fields.
func (po *Portfolio) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case portfolio.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			po.ID = int(value.Int64)
		case portfolio.FieldRequestID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request_id", values[i])
			} else if value.Valid {
				po.RequestID = value.String
			}
		case portfolio.FieldJob:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field job", values[i])
			} else if value.Valid {
				po.Job = value.String
			}
		case portfolio.FieldCareerYears:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field career_years", values[i])
			} else if value.Valid {
				po.CareerYears = uint(value.Int64)
			}
		case portfolio.FieldTechStacks:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tech_stacks", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &po.TechStacks); err != nil {
					return fmt.Errorf("unmarshal field tech_stacks: %w", err)
				}
			}
		case portfolio.FieldProjects:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field projects", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &po.Projects); err != nil {
					return fmt.Errorf("unmarshal field projects: %w", err)
				}
			}
		case portfolio.FieldPreferredCompany:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field preferred_company", values[i])
			} else if value.Valid {
				po.PreferredCompany = value.String
			}
		default:
			po.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Portfolio.
// This includes values selected through modifiers, order, etc.
func (po *Portfolio) Value(name string) (ent.Value, error) {
	return po.selectValues.Get(name)
}

// Update returns a builder for updating this Portfolio.
// Note that you need to call Portfolio.Unwrap() before calling this method if this Portfolio
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *Portfolio) Update() *PortfolioUpdateOne {
	return NewPortfolioClient(po.config).UpdateOne(po)
}

// Unwrap unwraps the Portfolio entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (po *Portfolio) Unwrap() *Portfolio {
	_tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("ent: Portfolio is not a transactional entity")
	}
	po.config.driver = _tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *Portfolio) String() string {
	var builder strings.Builder
	builder.WriteString("Portfolio(")
	builder.WriteString(fmt.Sprintf("id=%v, ", po.ID))
	builder.WriteString("request_id=")
	builder.WriteString(po.RequestID)
	builder.WriteString(", ")
	builder.WriteString("job=")
	builder.WriteString(po.Job)
	builder.WriteString(", ")
	builder.WriteString("career_years=")
	builder.WriteString(fmt.Sprintf("%v", po.CareerYears))
	builder.WriteString(", ")
	builder.WriteString("tech_stacks=")
	builder.WriteString(fmt.Sprintf("%v", po.TechStacks))
	builder.WriteString(", ")
	builder.WriteString("projects=")
	builder.WriteString(fmt.Sprintf("%v", po.Projects))
	builder.WriteString(", ")
	builder.WriteString("preferred_company=")
	builder.WriteString(po.PreferredCompany)
	builder.WriteByte(')')
	return builder.String()
}

// Portfolios is a parsable slice of Portfolio.
type Portfolios []*Portfolio
