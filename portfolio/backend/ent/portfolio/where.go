// Code generated by ent, DO NOT EDIT.

package portfolio

import (
	"portfolio/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldLTE(FieldID, id))
}

// RequestID applies equality check predicate on the "request_id" field. It's identical to RequestIDEQ.
func RequestID(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldEQ(FieldRequestID, v))
}

// Job applies equality check predicate on the "job" field. It's identical to JobEQ.
func Job(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldEQ(FieldJob, v))
}

// CareerYears applies equality check predicate on the "career_years" field. It's identical to CareerYearsEQ.
func CareerYears(v uint) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldEQ(FieldCareerYears, v))
}

// PreferredCompany applies equality check predicate on the "preferred_company" field. It's identical to PreferredCompanyEQ.
func PreferredCompany(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldEQ(FieldPreferredCompany, v))
}

// RequestIDEQ applies the EQ predicate on the "request_id" field.
func RequestIDEQ(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldEQ(FieldRequestID, v))
}

// RequestIDNEQ applies the NEQ predicate on the "request_id" field.
func RequestIDNEQ(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldNEQ(FieldRequestID, v))
}

// RequestIDIn applies the In predicate on the "request_id" field.
func RequestIDIn(vs ...string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldIn(FieldRequestID, vs...))
}

// RequestIDNotIn applies the NotIn predicate on the "request_id" field.
func RequestIDNotIn(vs ...string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldNotIn(FieldRequestID, vs...))
}

// RequestIDGT applies the GT predicate on the "request_id" field.
func RequestIDGT(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldGT(FieldRequestID, v))
}

// RequestIDGTE applies the GTE predicate on the "request_id" field.
func RequestIDGTE(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldGTE(FieldRequestID, v))
}

// RequestIDLT applies the LT predicate on the "request_id" field.
func RequestIDLT(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldLT(FieldRequestID, v))
}

// RequestIDLTE applies the LTE predicate on the "request_id" field.
func RequestIDLTE(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldLTE(FieldRequestID, v))
}

// RequestIDContains applies the Contains predicate on the "request_id" field.
func RequestIDContains(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldContains(FieldRequestID, v))
}

// RequestIDHasPrefix applies the HasPrefix predicate on the "request_id" field.
func RequestIDHasPrefix(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldHasPrefix(FieldRequestID, v))
}

// RequestIDHasSuffix applies the HasSuffix predicate on the "request_id" field.
func RequestIDHasSuffix(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldHasSuffix(FieldRequestID, v))
}

// RequestIDEqualFold applies the EqualFold predicate on the "request_id" field.
func RequestIDEqualFold(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldEqualFold(FieldRequestID, v))
}

// RequestIDContainsFold applies the ContainsFold predicate on the "request_id" field.
func RequestIDContainsFold(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldContainsFold(FieldRequestID, v))
}

// JobEQ applies the EQ predicate on the "job" field.
func JobEQ(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldEQ(FieldJob, v))
}

// JobNEQ applies the NEQ predicate on the "job" field.
func JobNEQ(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldNEQ(FieldJob, v))
}

// JobIn applies the In predicate on the "job" field.
func JobIn(vs ...string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldIn(FieldJob, vs...))
}

// JobNotIn applies the NotIn predicate on the "job" field.
func JobNotIn(vs ...string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldNotIn(FieldJob, vs...))
}

// JobGT applies the GT predicate on the "job" field.
func JobGT(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldGT(FieldJob, v))
}

// JobGTE applies the GTE predicate on the "job" field.
func JobGTE(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldGTE(FieldJob, v))
}

// JobLT applies the LT predicate on the "job" field.
func JobLT(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldLT(FieldJob, v))
}

// JobLTE applies the LTE predicate on the "job" field.
func JobLTE(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldLTE(FieldJob, v))
}

// JobContains applies the Contains predicate on the "job" field.
func JobContains(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldContains(FieldJob, v))
}

// JobHasPrefix applies the HasPrefix predicate on the "job" field.
func JobHasPrefix(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldHasPrefix(FieldJob, v))
}

// JobHasSuffix applies the HasSuffix predicate on the "job" field.
func JobHasSuffix(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldHasSuffix(FieldJob, v))
}

// JobEqualFold applies the EqualFold predicate on the "job" field.
func JobEqualFold(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldEqualFold(FieldJob, v))
}

// JobContainsFold applies the ContainsFold predicate on the "job" field.
func JobContainsFold(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldContainsFold(FieldJob, v))
}

// CareerYearsEQ applies the EQ predicate on the "career_years" field.
func CareerYearsEQ(v uint) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldEQ(FieldCareerYears, v))
}

// CareerYearsNEQ applies the NEQ predicate on the "career_years" field.
func CareerYearsNEQ(v uint) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldNEQ(FieldCareerYears, v))
}

// CareerYearsIn applies the In predicate on the "career_years" field.
func CareerYearsIn(vs ...uint) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldIn(FieldCareerYears, vs...))
}

// CareerYearsNotIn applies the NotIn predicate on the "career_years" field.
func CareerYearsNotIn(vs ...uint) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldNotIn(FieldCareerYears, vs...))
}

// CareerYearsGT applies the GT predicate on the "career_years" field.
func CareerYearsGT(v uint) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldGT(FieldCareerYears, v))
}

// CareerYearsGTE applies the GTE predicate on the "career_years" field.
func CareerYearsGTE(v uint) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldGTE(FieldCareerYears, v))
}

// CareerYearsLT applies the LT predicate on the "career_years" field.
func CareerYearsLT(v uint) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldLT(FieldCareerYears, v))
}

// CareerYearsLTE applies the LTE predicate on the "career_years" field.
func CareerYearsLTE(v uint) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldLTE(FieldCareerYears, v))
}

// PreferredCompanyEQ applies the EQ predicate on the "preferred_company" field.
func PreferredCompanyEQ(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldEQ(FieldPreferredCompany, v))
}

// PreferredCompanyNEQ applies the NEQ predicate on the "preferred_company" field.
func PreferredCompanyNEQ(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldNEQ(FieldPreferredCompany, v))
}

// PreferredCompanyIn applies the In predicate on the "preferred_company" field.
func PreferredCompanyIn(vs ...string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldIn(FieldPreferredCompany, vs...))
}

// PreferredCompanyNotIn applies the NotIn predicate on the "preferred_company" field.
func PreferredCompanyNotIn(vs ...string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldNotIn(FieldPreferredCompany, vs...))
}

// PreferredCompanyGT applies the GT predicate on the "preferred_company" field.
func PreferredCompanyGT(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldGT(FieldPreferredCompany, v))
}

// PreferredCompanyGTE applies the GTE predicate on the "preferred_company" field.
func PreferredCompanyGTE(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldGTE(FieldPreferredCompany, v))
}

// PreferredCompanyLT applies the LT predicate on the "preferred_company" field.
func PreferredCompanyLT(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldLT(FieldPreferredCompany, v))
}

// PreferredCompanyLTE applies the LTE predicate on the "preferred_company" field.
func PreferredCompanyLTE(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldLTE(FieldPreferredCompany, v))
}

// PreferredCompanyContains applies the Contains predicate on the "preferred_company" field.
func PreferredCompanyContains(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldContains(FieldPreferredCompany, v))
}

// PreferredCompanyHasPrefix applies the HasPrefix predicate on the "preferred_company" field.
func PreferredCompanyHasPrefix(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldHasPrefix(FieldPreferredCompany, v))
}

// PreferredCompanyHasSuffix applies the HasSuffix predicate on the "preferred_company" field.
func PreferredCompanyHasSuffix(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldHasSuffix(FieldPreferredCompany, v))
}

// PreferredCompanyIsNil applies the IsNil predicate on the "preferred_company" field.
func PreferredCompanyIsNil() predicate.Portfolio {
	return predicate.Portfolio(sql.FieldIsNull(FieldPreferredCompany))
}

// PreferredCompanyNotNil applies the NotNil predicate on the "preferred_company" field.
func PreferredCompanyNotNil() predicate.Portfolio {
	return predicate.Portfolio(sql.FieldNotNull(FieldPreferredCompany))
}

// PreferredCompanyEqualFold applies the EqualFold predicate on the "preferred_company" field.
func PreferredCompanyEqualFold(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldEqualFold(FieldPreferredCompany, v))
}

// PreferredCompanyContainsFold applies the ContainsFold predicate on the "preferred_company" field.
func PreferredCompanyContainsFold(v string) predicate.Portfolio {
	return predicate.Portfolio(sql.FieldContainsFold(FieldPreferredCompany, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Portfolio) predicate.Portfolio {
	return predicate.Portfolio(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Portfolio) predicate.Portfolio {
	return predicate.Portfolio(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Portfolio) predicate.Portfolio {
	return predicate.Portfolio(func(s *sql.Selector) {
		p(s.Not())
	})
}
