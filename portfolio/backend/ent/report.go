// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"portfolio/ent/report"
	"portfolio/schema"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Report is the model entity for the Report schema.
type Report struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// RequestID holds the value of the "request_id" field.
	RequestID string `json:"request_id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// ProjectFeedbacks holds the value of the "project_feedbacks" field.
	ProjectFeedbacks []schema.Feedback `json:"project_feedbacks,omitempty"`
	// TechStackFeedbacks holds the value of the "tech_stack_feedbacks" field.
	TechStackFeedbacks []schema.Feedback `json:"tech_stack_feedbacks,omitempty"`
	// ProjectRecommendations holds the value of the "project_recommendations" field.
	ProjectRecommendations []schema.Recommendation `json:"project_recommendations,omitempty"`
	// TechStackRecommendations holds the value of the "tech_stack_recommendations" field.
	TechStackRecommendations []schema.Recommendation `json:"tech_stack_recommendations,omitempty"`
	selectValues             sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Report) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case report.FieldProjectFeedbacks, report.FieldTechStackFeedbacks, report.FieldProjectRecommendations, report.FieldTechStackRecommendations:
			values[i] = new([]byte)
		case report.FieldID:
			values[i] = new(sql.NullInt64)
		case report.FieldRequestID, report.FieldStatus:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Report fields.
func (r *Report) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case report.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case report.FieldRequestID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request_id", values[i])
			} else if value.Valid {
				r.RequestID = value.String
			}
		case report.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				r.Status = value.String
			}
		case report.FieldProjectFeedbacks:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field project_feedbacks", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &r.ProjectFeedbacks); err != nil {
					return fmt.Errorf("unmarshal field project_feedbacks: %w", err)
				}
			}
		case report.FieldTechStackFeedbacks:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tech_stack_feedbacks", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &r.TechStackFeedbacks); err != nil {
					return fmt.Errorf("unmarshal field tech_stack_feedbacks: %w", err)
				}
			}
		case report.FieldProjectRecommendations:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field project_recommendations", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &r.ProjectRecommendations); err != nil {
					return fmt.Errorf("unmarshal field project_recommendations: %w", err)
				}
			}
		case report.FieldTechStackRecommendations:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tech_stack_recommendations", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &r.TechStackRecommendations); err != nil {
					return fmt.Errorf("unmarshal field tech_stack_recommendations: %w", err)
				}
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Report.
// This includes values selected through modifiers, order, etc.
func (r *Report) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// Update returns a builder for updating this Report.
// Note that you need to call Report.Unwrap() before calling this method if this Report
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Report) Update() *ReportUpdateOne {
	return NewReportClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Report entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Report) Unwrap() *Report {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Report is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Report) String() string {
	var builder strings.Builder
	builder.WriteString("Report(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("request_id=")
	builder.WriteString(r.RequestID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(r.Status)
	builder.WriteString(", ")
	builder.WriteString("project_feedbacks=")
	builder.WriteString(fmt.Sprintf("%v", r.ProjectFeedbacks))
	builder.WriteString(", ")
	builder.WriteString("tech_stack_feedbacks=")
	builder.WriteString(fmt.Sprintf("%v", r.TechStackFeedbacks))
	builder.WriteString(", ")
	builder.WriteString("project_recommendations=")
	builder.WriteString(fmt.Sprintf("%v", r.ProjectRecommendations))
	builder.WriteString(", ")
	builder.WriteString("tech_stack_recommendations=")
	builder.WriteString(fmt.Sprintf("%v", r.TechStackRecommendations))
	builder.WriteByte(')')
	return builder.String()
}

// Reports is a parsable slice of Report.
type Reports []*Report
