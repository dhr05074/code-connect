// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"portfolio/ent/portfolio"
	"portfolio/ent/predicate"
	"portfolio/schema"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// PortfolioUpdate is the builder for updating Portfolio entities.
type PortfolioUpdate struct {
	config
	hooks    []Hook
	mutation *PortfolioMutation
}

// Where appends a list predicates to the PortfolioUpdate builder.
func (pu *PortfolioUpdate) Where(ps ...predicate.Portfolio) *PortfolioUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetRequestID sets the "request_id" field.
func (pu *PortfolioUpdate) SetRequestID(s string) *PortfolioUpdate {
	pu.mutation.SetRequestID(s)
	return pu
}

// SetJob sets the "job" field.
func (pu *PortfolioUpdate) SetJob(s string) *PortfolioUpdate {
	pu.mutation.SetJob(s)
	return pu
}

// SetCareerYears sets the "career_years" field.
func (pu *PortfolioUpdate) SetCareerYears(u uint) *PortfolioUpdate {
	pu.mutation.ResetCareerYears()
	pu.mutation.SetCareerYears(u)
	return pu
}

// AddCareerYears adds u to the "career_years" field.
func (pu *PortfolioUpdate) AddCareerYears(u int) *PortfolioUpdate {
	pu.mutation.AddCareerYears(u)
	return pu
}

// SetTechStacks sets the "tech_stacks" field.
func (pu *PortfolioUpdate) SetTechStacks(s []string) *PortfolioUpdate {
	pu.mutation.SetTechStacks(s)
	return pu
}

// AppendTechStacks appends s to the "tech_stacks" field.
func (pu *PortfolioUpdate) AppendTechStacks(s []string) *PortfolioUpdate {
	pu.mutation.AppendTechStacks(s)
	return pu
}

// SetProjects sets the "projects" field.
func (pu *PortfolioUpdate) SetProjects(s []schema.Project) *PortfolioUpdate {
	pu.mutation.SetProjects(s)
	return pu
}

// AppendProjects appends s to the "projects" field.
func (pu *PortfolioUpdate) AppendProjects(s []schema.Project) *PortfolioUpdate {
	pu.mutation.AppendProjects(s)
	return pu
}

// SetPreferredCompany sets the "preferred_company" field.
func (pu *PortfolioUpdate) SetPreferredCompany(s string) *PortfolioUpdate {
	pu.mutation.SetPreferredCompany(s)
	return pu
}

// SetNillablePreferredCompany sets the "preferred_company" field if the given value is not nil.
func (pu *PortfolioUpdate) SetNillablePreferredCompany(s *string) *PortfolioUpdate {
	if s != nil {
		pu.SetPreferredCompany(*s)
	}
	return pu
}

// ClearPreferredCompany clears the value of the "preferred_company" field.
func (pu *PortfolioUpdate) ClearPreferredCompany() *PortfolioUpdate {
	pu.mutation.ClearPreferredCompany()
	return pu
}

// Mutation returns the PortfolioMutation object of the builder.
func (pu *PortfolioUpdate) Mutation() *PortfolioMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PortfolioUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PortfolioUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PortfolioUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PortfolioUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PortfolioUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(portfolio.Table, portfolio.Columns, sqlgraph.NewFieldSpec(portfolio.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.RequestID(); ok {
		_spec.SetField(portfolio.FieldRequestID, field.TypeString, value)
	}
	if value, ok := pu.mutation.Job(); ok {
		_spec.SetField(portfolio.FieldJob, field.TypeString, value)
	}
	if value, ok := pu.mutation.CareerYears(); ok {
		_spec.SetField(portfolio.FieldCareerYears, field.TypeUint, value)
	}
	if value, ok := pu.mutation.AddedCareerYears(); ok {
		_spec.AddField(portfolio.FieldCareerYears, field.TypeUint, value)
	}
	if value, ok := pu.mutation.TechStacks(); ok {
		_spec.SetField(portfolio.FieldTechStacks, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedTechStacks(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, portfolio.FieldTechStacks, value)
		})
	}
	if value, ok := pu.mutation.Projects(); ok {
		_spec.SetField(portfolio.FieldProjects, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedProjects(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, portfolio.FieldProjects, value)
		})
	}
	if value, ok := pu.mutation.PreferredCompany(); ok {
		_spec.SetField(portfolio.FieldPreferredCompany, field.TypeString, value)
	}
	if pu.mutation.PreferredCompanyCleared() {
		_spec.ClearField(portfolio.FieldPreferredCompany, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{portfolio.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PortfolioUpdateOne is the builder for updating a single Portfolio entity.
type PortfolioUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PortfolioMutation
}

// SetRequestID sets the "request_id" field.
func (puo *PortfolioUpdateOne) SetRequestID(s string) *PortfolioUpdateOne {
	puo.mutation.SetRequestID(s)
	return puo
}

// SetJob sets the "job" field.
func (puo *PortfolioUpdateOne) SetJob(s string) *PortfolioUpdateOne {
	puo.mutation.SetJob(s)
	return puo
}

// SetCareerYears sets the "career_years" field.
func (puo *PortfolioUpdateOne) SetCareerYears(u uint) *PortfolioUpdateOne {
	puo.mutation.ResetCareerYears()
	puo.mutation.SetCareerYears(u)
	return puo
}

// AddCareerYears adds u to the "career_years" field.
func (puo *PortfolioUpdateOne) AddCareerYears(u int) *PortfolioUpdateOne {
	puo.mutation.AddCareerYears(u)
	return puo
}

// SetTechStacks sets the "tech_stacks" field.
func (puo *PortfolioUpdateOne) SetTechStacks(s []string) *PortfolioUpdateOne {
	puo.mutation.SetTechStacks(s)
	return puo
}

// AppendTechStacks appends s to the "tech_stacks" field.
func (puo *PortfolioUpdateOne) AppendTechStacks(s []string) *PortfolioUpdateOne {
	puo.mutation.AppendTechStacks(s)
	return puo
}

// SetProjects sets the "projects" field.
func (puo *PortfolioUpdateOne) SetProjects(s []schema.Project) *PortfolioUpdateOne {
	puo.mutation.SetProjects(s)
	return puo
}

// AppendProjects appends s to the "projects" field.
func (puo *PortfolioUpdateOne) AppendProjects(s []schema.Project) *PortfolioUpdateOne {
	puo.mutation.AppendProjects(s)
	return puo
}

// SetPreferredCompany sets the "preferred_company" field.
func (puo *PortfolioUpdateOne) SetPreferredCompany(s string) *PortfolioUpdateOne {
	puo.mutation.SetPreferredCompany(s)
	return puo
}

// SetNillablePreferredCompany sets the "preferred_company" field if the given value is not nil.
func (puo *PortfolioUpdateOne) SetNillablePreferredCompany(s *string) *PortfolioUpdateOne {
	if s != nil {
		puo.SetPreferredCompany(*s)
	}
	return puo
}

// ClearPreferredCompany clears the value of the "preferred_company" field.
func (puo *PortfolioUpdateOne) ClearPreferredCompany() *PortfolioUpdateOne {
	puo.mutation.ClearPreferredCompany()
	return puo
}

// Mutation returns the PortfolioMutation object of the builder.
func (puo *PortfolioUpdateOne) Mutation() *PortfolioMutation {
	return puo.mutation
}

// Where appends a list predicates to the PortfolioUpdate builder.
func (puo *PortfolioUpdateOne) Where(ps ...predicate.Portfolio) *PortfolioUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PortfolioUpdateOne) Select(field string, fields ...string) *PortfolioUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Portfolio entity.
func (puo *PortfolioUpdateOne) Save(ctx context.Context) (*Portfolio, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PortfolioUpdateOne) SaveX(ctx context.Context) *Portfolio {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PortfolioUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PortfolioUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PortfolioUpdateOne) sqlSave(ctx context.Context) (_node *Portfolio, err error) {
	_spec := sqlgraph.NewUpdateSpec(portfolio.Table, portfolio.Columns, sqlgraph.NewFieldSpec(portfolio.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Portfolio.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, portfolio.FieldID)
		for _, f := range fields {
			if !portfolio.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != portfolio.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.RequestID(); ok {
		_spec.SetField(portfolio.FieldRequestID, field.TypeString, value)
	}
	if value, ok := puo.mutation.Job(); ok {
		_spec.SetField(portfolio.FieldJob, field.TypeString, value)
	}
	if value, ok := puo.mutation.CareerYears(); ok {
		_spec.SetField(portfolio.FieldCareerYears, field.TypeUint, value)
	}
	if value, ok := puo.mutation.AddedCareerYears(); ok {
		_spec.AddField(portfolio.FieldCareerYears, field.TypeUint, value)
	}
	if value, ok := puo.mutation.TechStacks(); ok {
		_spec.SetField(portfolio.FieldTechStacks, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedTechStacks(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, portfolio.FieldTechStacks, value)
		})
	}
	if value, ok := puo.mutation.Projects(); ok {
		_spec.SetField(portfolio.FieldProjects, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedProjects(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, portfolio.FieldProjects, value)
		})
	}
	if value, ok := puo.mutation.PreferredCompany(); ok {
		_spec.SetField(portfolio.FieldPreferredCompany, field.TypeString, value)
	}
	if puo.mutation.PreferredCompanyCleared() {
		_spec.ClearField(portfolio.FieldPreferredCompany, field.TypeString)
	}
	_node = &Portfolio{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{portfolio.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
