openapi: 3.0.0
info:
  title: Portfolio Analyzer
  description: Title
  version: 1.0.0
servers:
  - url: 'https'
paths:
  /submit:
    post:
      description: 사용자가 입력한 포트폴리오를 평가 시스템에 제출합니다.
      operationId: submitPortfolio
      summary: 포트폴리오 제출
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - job
                - career_years
                - tech_stacks
                - projects
              properties:
                job:
                  type: string
                  description: 사용자가 원하는 직군입니다.
                  example: '프론트엔드 개발자'
                career_years:
                  type: integer
                  description: 사용자의 경력입니다. 신입은 0으로 입력합니다.
                  example: 0
                tech_stacks:
                  type: array
                  description: 사용자가 사용할 수 있는 기술 스택입니다.
                  items:
                    type: string
                    description: 기술 스택의 이름입니다.
                    example: 'Java'
                projects:
                  type: array
                  description: 사용자가 작성한 프로젝트입니다.
                  items:
                    $ref: '#/components/schemas/project'
                preferred_company:
                  type: string
                  description: 사용자가 원하는 회사의 특징을 기술합니다.
                  example: '복지 좋은 회사'
      responses:
        202:
          description: |
            분석 요청이 성공적으로 접수되었습니다. 분석 완료까지는 15초에서 1분 정도 소요될 수 있습니다.
          content:
            application/json:
              schema:
                type: object
                required:
                  - request_id
                properties:
                  request_id:
                    $ref: '#/components/schemas/request_id'
  /report/{request_id}:
    get:
      description: 사용자의 포트폴리오 분석 보고서를 조회합니다.
      summary: 포트폴리오 분석 리포트 조회
      operationId: getReportByRequestID
      parameters:
        - in: path
          name: request_id
          required: true
          schema:
            $ref: '#/components/schemas/request_id'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                  - project_feedbacks
                  - tech_stack_feedbacks
                  - project_recommendations
                  - tech_stack_recommendations
                properties:
                  status:
                    $ref: '#/components/schemas/report_status'
                  project_feedbacks:
                    type: array
                    description: 사용자의 프로젝트에 대한 피드백입니다.
                    items:
                      $ref: '#/components/schemas/feedback'
                  tech_stack_feedbacks:
                    type: array
                    description: 사용자의 테크 스택에 대한 피드백입니다.
                    items:
                      $ref: '#/components/schemas/feedback'
                  project_recommendations:
                    type: array
                    description: 사용자의 프로젝트에 대한 추천입니다.
                    items:
                      $ref: '#/components/schemas/recommendation'
                  tech_stack_recommendations:
                    type: array
                    description: 사용자의 테크 스택에 대한 추천입니다.
                    items:
                      $ref: '#/components/schemas/recommendation'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                properties:
                  message:
                    type: string
                    description: 요청 ID에 해당하는 리포트가 존재하지 않거나, 아직 생성되지 않았습니다.
                    example: 'report does not exist.'
components:
  schemas:
    request_id:
      type: string
      description: 모든 요청에 사용되는 요청 ID입니다. 서버에서 생성되는 값입니다.
      example: 1234567890
    feedback:
      type: object
      description: 사용자의 포트폴리오 분석 보고서의 피드백 구성 요소입니다.
      properties:
        subject:
          type: string
          description: 피드백이 다루는 주제입니다. 사용자가 입력한 테크 스택이나 프로젝트 제목이 될 수 있습니다.
          example: '테크 스택: Java'
        score:
          type: integer
          description: 사용자가 원하는 직군에 해당 주제가 얼마나 적합한지의 점수입니다. 0~100 사이의 정수입니다.
          example: 80
        comment:
          type: string
          description: 피드백의 내용입니다.
          example: '테크 스택이 적합하다고 생각합니다.'
      x-go-type: schema.Feedback
      x-go-type-import:
        path: portfolio/schema
    recommendation:
      type: object
      description: 사용자의 포트폴리오 분석 보고서의 추천 구성 요소입니다.
      properties:
        subject:
          type: string
          description: 추천이 다루는 주제입니다. 사용자가 입력한 테크 스택이나 프로젝트 제목이 될 수 있습니다.
          example: '테크 스택: Java'
        score:
          type: integer
          description: 사용자가 원하는 직군에 해당 주제가 얼마나 적합한지의 점수입니다. 0~100 사이의 정수입니다.
          example: 80
        reason:
          type: string
          description: 추천의 이유입니다.
          example: '테크 스택이 적합하다고 생각합니다. 왜냐하면, ...'
      x-go-type: schema.Recommendation
      x-go-type-import:
        path: portfolio/schema
    project:
      type: object
      description: 사용자가 포트폴리오에 작성한 프로젝트입니다.
      properties:
        title:
          type: string
          description: 프로젝트의 제목입니다.
          example: '금융 어플리케이션 제작'
        description:
          type: string
          description: 프로젝트의 설명입니다.
          example: '금융 관련 어플리케이션을 제작했습니다.'
      required:
        - title
        - description
      x-go-type: schema.Project
      x-go-type-import:
        path: portfolio/schema
    report_status:
      type: string
      description: 포트폴리오 분석 진행 상태입니다.
      enum:
        - 'pending'
        - 'processing'
        - 'done'
        - 'failed'
      example: 'pending'
